<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="/http://victorstepanov.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="/http://victorstepanov.github.io/" rel="alternate" type="text/html" /><updated>2020-08-09T21:28:18-07:00</updated><id>/http://victorstepanov.github.io/</id><title type="html">Victor Stepanov</title><subtitle>Passionate about making game developers more productive</subtitle><entry><title type="html">Notes for “Procedural World Generation of ‘Far Cry 5’” GDC2018</title><link href="/http://victorstepanov.github.io/gdc2018-procedural-world-generation-of-far-cry-5" rel="alternate" type="text/html" title="Notes for &quot;Procedural World Generation of 'Far Cry 5'&quot; GDC2018" /><published>2020-08-08T18:00:00-07:00</published><updated>2020-08-08T18:00:00-07:00</updated><id>/http://victorstepanov.github.io/gdc2018-procedural-world-generation-of-far-cry-5</id><content type="html" xml:base="/http://victorstepanov.github.io/gdc2018-procedural-world-generation-of-far-cry-5">&lt;p&gt;&lt;strong&gt;TLDW Summary&lt;/strong&gt;: This talk is about how FC5 developers created a pipeline for generating a realistic game world using procedural recipes. The talk contains a high-level overview of the pipeline with two deep dives into the details of the tools.&lt;/p&gt;

&lt;h2 id=&quot;key-terms&quot;&gt;Key Terms&lt;/h2&gt;
&lt;div class=&quot;keyword-container&quot;&gt;
&lt;ul class=&quot;keyword-container&quot;&gt;
&lt;li&gt;procedural workflow&lt;/li&gt;
&lt;li&gt;an ecosystem of procedural tools&lt;/li&gt;
&lt;li&gt;Houdini Engine&lt;/li&gt;
&lt;li&gt;biome recipes&lt;/li&gt;
&lt;li&gt;determinism&lt;/li&gt;
&lt;li&gt;terrain&lt;/li&gt;
&lt;li&gt;2d mask&lt;/li&gt;
&lt;/ul&gt;
&lt;style&gt;
    .keyword-container &gt; ul
    {
        font-size: 16px;
        list-style-type: none;
        padding:15px;
    }
    .keyword-container &gt; li
    {
        background-color:#f3f3f3;
        display : inline;
        padding:5px;
        margin:2px;
        margin-bottom: 100px;
        border-radius: 5px;
    }
&lt;/style&gt;
&lt;/div&gt;

&lt;h2 id=&quot;presentation-time-stamps&quot;&gt;Presentation Time Stamps&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025215/Procedural-World-Generation-of-Far&quot; target=&quot;_blank&quot;&gt;at minute 2&lt;/a&gt; Introduction&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025215/Procedural-World-Generation-of-Far&quot; target=&quot;_blank&quot;&gt;at minute 2&lt;/a&gt; The goals of the procedural pipeline&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025215/Procedural-World-Generation-of-Far&quot; target=&quot;_blank&quot;&gt;at minute 6&lt;/a&gt; The tools that were developed&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025215/Procedural-World-Generation-of-Far&quot; target=&quot;_blank&quot;&gt;at minute 15&lt;/a&gt; The system from the user’s point of view&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025215/Procedural-World-Generation-of-Far&quot; target=&quot;_blank&quot;&gt;at minute 12&lt;/a&gt; How the pipeline is working under the hood&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025215/Procedural-World-Generation-of-Far&quot; target=&quot;_blank&quot;&gt;at minute 16&lt;/a&gt; The Cliff generation tool&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025215/Procedural-World-Generation-of-Far&quot; target=&quot;_blank&quot;&gt;at minute 25&lt;/a&gt; The Biome generation tool&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025215/Procedural-World-Generation-of-Far&quot; target=&quot;_blank&quot;&gt;at minute 46&lt;/a&gt; What changed during development&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025215/Procedural-World-Generation-of-Far&quot; target=&quot;_blank&quot;&gt;at minute 49&lt;/a&gt; Conclusion&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025215/Procedural-World-Generation-of-Far&quot; target=&quot;_blank&quot;&gt;at minute 52&lt;/a&gt; Q&amp;amp;A&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;key-concepts&quot;&gt;Key Concepts&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;biome&lt;/strong&gt; : an area of a game world with distinct terrain, vegetation, and animal life.
&lt;img src=&quot;assets/images/posts/gdc2018-procedural-world-generation-of-far-cry-5/slide_71_sub_biome.png&quot; alt=&quot;slide 71 sub biome&quot; width=&quot;700&quot; style=&quot;margin: .1em auto&quot; /&gt;
    &lt;p style=&quot;font-size:50%&quot;&gt;Carrier, Etienne. &lt;i&gt;Procedural World Generation of 'Far Cry 5'&lt;/i&gt;. Mar. 2018, GDC, &lt;a target=&quot;_blank&quot; href=&quot;https://www.gdcvault.com/play/1025557/Procedural-World-Generation-of-Far&quot;&gt; GDC Vault Slide Location&lt;/a&gt;. Presentation Slide #71.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;map&lt;/strong&gt; : parts of a game &lt;em&gt;world&lt;/em&gt; that are not loaded at the same time&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;section&lt;/strong&gt; : a part of a &lt;em&gt;map&lt;/em&gt; (256m X 256m)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;sector&lt;/strong&gt; : a part of a &lt;em&gt;section&lt;/em&gt; (64m X 64m), the smallest part of a world that can be &lt;em&gt;baked&lt;/em&gt;
&lt;img src=&quot;assets/images/posts/gdc2018-procedural-world-generation-of-far-cry-5/slide_34_sector.png&quot; alt=&quot;slide 34 sector&quot; width=&quot;700&quot; style=&quot;margin: .1em auto&quot; /&gt;
    &lt;p style=&quot;font-size:50%&quot;&gt;Carrier, Etienne. &lt;i&gt;Procedural World Generation of 'Far Cry 5'&lt;/i&gt;. Mar. 2018, GDC, &lt;a target=&quot;_blank&quot; href=&quot;https://www.gdcvault.com/play/1025557/Procedural-World-Generation-of-Far&quot;&gt; GDC Vault Slide Location&lt;/a&gt;. Presentation Slide #34.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;recipe&lt;/strong&gt; : a set of rules that given a set of inputs determines what &lt;em&gt;entities&lt;/em&gt; need to be placed at a given location&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;points of interest&lt;/strong&gt; : a &lt;em&gt;map&lt;/em&gt; &lt;em&gt;location&lt;/em&gt; reserved for user input and editing&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-problemschallenges&quot;&gt;The Problems/Challenges&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Filling up empty space is easy, but filling it up so it looks &lt;em&gt;natural&lt;/em&gt; is a big challenge.&lt;/li&gt;
  &lt;li&gt;The workflow required to fill up large open spaces beautifully, quickly, while maintaining the &lt;em&gt;flexibility&lt;/em&gt; for applying user input.
    &lt;ul&gt;
      &lt;li&gt;The workflow had to allow fine-tuning of smaller &lt;em&gt;locations&lt;/em&gt; to deliver &lt;em&gt;tight gameplay experiences&lt;/em&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Terraforming&lt;/em&gt; can’t be locked at the start of the project
    &lt;ul&gt;
      &lt;li&gt;The terrain of the game would be constantly changing, and the &lt;em&gt;biomes&lt;/em&gt; would need to be constantly updated. Updating the biomes by hand wasn’t an option.&lt;/li&gt;
      &lt;li&gt;The asset placement needs to be consistent with the terrain topology.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The pipeline needs to run without human intervention to regenerate the content in a &lt;em&gt;build farm&lt;/em&gt; setting.&lt;/li&gt;
  &lt;li&gt;The pipeline needs to generate small &lt;em&gt;sections&lt;/em&gt; of the world separately.&lt;/li&gt;
  &lt;li&gt;The parts of the world should be generated &lt;em&gt;deterministically&lt;/em&gt; to enable stitching parts together.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;propositions&quot;&gt;Propositions&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;The biomes procedural system should be able to simulate &lt;em&gt;natural phenomena&lt;/em&gt;.
&lt;img src=&quot;assets/images/posts/gdc2018-procedural-world-generation-of-far-cry-5/slide_80_natural.png&quot; alt=&quot;slide 80 natural phenomena&quot; width=&quot;700&quot; style=&quot;margin: .1em auto&quot; /&gt;
    &lt;p style=&quot;font-size:50%&quot;&gt;Carrier, Etienne. &lt;i&gt;Procedural World Generation of 'Far Cry 5'&lt;/i&gt;. Mar. 2018, GDC, &lt;a target=&quot;_blank&quot; href=&quot;https://www.gdcvault.com/play/1025557/Procedural-World-Generation-of-Far&quot;&gt; GDC Vault Slide Location&lt;/a&gt;. Presentation Slide #80.&lt;/p&gt;
    &lt;p&gt;&lt;img src=&quot;assets/images/posts/gdc2018-procedural-world-generation-of-far-cry-5/slide_99_canopy.png&quot; alt=&quot;slide 99 natural phenomena&quot; width=&quot;700&quot; style=&quot;margin: .1em auto&quot; /&gt;&lt;/p&gt;
    &lt;p style=&quot;font-size:50%&quot;&gt;Carrier, Etienne. &lt;i&gt;Procedural World Generation of 'Far Cry 5'&lt;/i&gt;. Mar. 2018, GDC, &lt;a target=&quot;_blank&quot; href=&quot;https://www.gdcvault.com/play/1025557/Procedural-World-Generation-of-Far&quot;&gt; GDC Vault Slide Location&lt;/a&gt;. Presentation Slide #99.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Build &lt;em&gt;biome recipes&lt;/em&gt; that react to the physical features of the land to ensure &lt;em&gt;coherence&lt;/em&gt; throughout the world
&lt;img src=&quot;assets/images/posts/gdc2018-procedural-world-generation-of-far-cry-5/slide_89_physical_features.png&quot; alt=&quot;slide 89 natural phenomena&quot; width=&quot;700&quot; style=&quot;margin: .1em auto&quot; /&gt;
    &lt;p style=&quot;font-size:50%&quot;&gt;Carrier, Etienne. &lt;i&gt;Procedural World Generation of 'Far Cry 5'&lt;/i&gt;. Mar. 2018, GDC, &lt;a target=&quot;_blank&quot; href=&quot;https://www.gdcvault.com/play/1025557/Procedural-World-Generation-of-Far&quot;&gt; GDC Vault Slide Location&lt;/a&gt;. Presentation Slide #89.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The iterative process is vital to the quality of the game&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Use Houdini Engine to run the full map generation in a nightly build&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;same input&lt;/em&gt; = &lt;em&gt;same result&lt;/em&gt; (determinism matters)&lt;/li&gt;
  &lt;li&gt;The ecosystem of tools needs to be user friendly
    &lt;ul&gt;
      &lt;li&gt;shelf tools&lt;/li&gt;
      &lt;li&gt;be able to override procedural results&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;User must be able to bake data as they work&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;key-points&quot;&gt;Key Points&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;They developed a sophisticated procedural pipeline for creating a realistic game world using Houdini and Houdini Engine&lt;/li&gt;
  &lt;li&gt;Originally they just wanted to develop the &lt;em&gt;biome tool&lt;/em&gt;, but they ended up developing a suite of tools.&lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;heart&lt;/em&gt; of the pipeline is the &lt;em&gt;data exchange&lt;/em&gt; between the Houdini Engine and the Game Engine
&lt;img src=&quot;assets/images/posts/gdc2018-procedural-world-generation-of-far-cry-5/slide_70_import_2d_data.png&quot; alt=&quot;slide 70 importing 2d data&quot; width=&quot;700&quot; style=&quot;margin: .1em auto&quot; /&gt;
    &lt;p style=&quot;font-size:50%&quot;&gt;Carrier, Etienne. &lt;i&gt;Procedural World Generation of 'Far Cry 5'&lt;/i&gt;. Mar. 2018, GDC, &lt;a target=&quot;_blank&quot; href=&quot;https://www.gdcvault.com/play/1025557/Procedural-World-Generation-of-Far&quot;&gt; GDC Vault Slide Location&lt;/a&gt;. Presentation Slide #70.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;They developed an &lt;em&gt;ecosystem of procedural tools&lt;/em&gt;, where one tool would provide the input to the next tool
&lt;img src=&quot;assets/images/posts/gdc2018-procedural-world-generation-of-far-cry-5/slide_38_the_pipeline.png&quot; alt=&quot;slide 38 high-level pipeline overview&quot; width=&quot;700&quot; style=&quot;margin: .1em auto&quot; /&gt;
    &lt;p style=&quot;font-size:50%&quot;&gt;Carrier, Etienne. &lt;i&gt;Procedural World Generation of 'Far Cry 5'&lt;/i&gt;. Mar. 2018, GDC, &lt;a target=&quot;_blank&quot; href=&quot;https://www.gdcvault.com/play/1025557/Procedural-World-Generation-of-Far&quot;&gt; GDC Vault Slide Location&lt;/a&gt;. Presentation Slide #38.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;They regenerate the entire game world every night on special &lt;em&gt;build machines&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;user-iteration-workflow&quot;&gt;User Iteration Workflow&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;timestamp: 6 minutes into the presentation&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Terraforming pass&lt;/li&gt;
  &lt;li&gt;Define freshwater
  &lt;img src=&quot;assets/images/posts/gdc2018-procedural-world-generation-of-far-cry-5/slide_22_fresh_water.png&quot; alt=&quot;slide 22 high-level pipeline overview&quot; width=&quot;700&quot; style=&quot;margin: .1em auto&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;font-size:50%&quot;&gt;Carrier, Etienne. &lt;i&gt;Procedural World Generation of 'Far Cry 5'&lt;/i&gt;. Mar. 2018, GDC, &lt;a target=&quot;_blank&quot; href=&quot;https://www.gdcvault.com/play/1025557/Procedural-World-Generation-of-Far&quot;&gt; GDC Vault Slide Location&lt;/a&gt;. Presentation Slide #22.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Run the &lt;em&gt;cliff generation tool&lt;/em&gt; to create cliffs on steep terrain&lt;/li&gt;
  &lt;li&gt;Use &lt;em&gt;Biome painter&lt;/em&gt; and run procedural generation to spawn the vegetation&lt;/li&gt;
  &lt;li&gt;Setting up &lt;em&gt;Points of Interest&lt;/em&gt; (a.k.a. location)
 &lt;img src=&quot;assets/images/posts/gdc2018-procedural-world-generation-of-far-cry-5/slide_26_point_of_interest.png&quot; alt=&quot;slide 26 high-level pipeline overview&quot; width=&quot;700&quot; style=&quot;margin: .1em auto&quot; /&gt;
    &lt;p style=&quot;font-size:50%&quot;&gt;Carrier, Etienne. &lt;i&gt;Procedural World Generation of 'Far Cry 5'&lt;/i&gt;. Mar. 2018, GDC, &lt;a target=&quot;_blank&quot; href=&quot;https://www.gdcvault.com/play/1025557/Procedural-World-Generation-of-Far&quot;&gt; GDC Vault Slide Location&lt;/a&gt;. Presentation Slide #26.&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;Paint an area with the grass Biome&lt;/li&gt;
      &lt;li&gt;Laying down a road spline&lt;/li&gt;
      &lt;li&gt;Bake roads and refresh biome&lt;/li&gt;
      &lt;li&gt;Add buildings, props&lt;/li&gt;
      &lt;li&gt;Apply terrain texture&lt;/li&gt;
      &lt;li&gt;Add more Trees with the forest sub-biome&lt;/li&gt;
      &lt;li&gt;Bake/refresh biome&lt;/li&gt;
      &lt;li&gt;Add fence spline&lt;/li&gt;
      &lt;li&gt;Add power line spline
        &lt;ol&gt;
          &lt;li&gt;Snap power line connector to house&lt;/li&gt;
          &lt;li&gt;Bake/refresh biome&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;user-non-destructive-workflow&quot;&gt;User Non-Destructive Workflow&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;timestamp: 11 minutes into the presentation&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Update level of terrain&lt;/li&gt;
  &lt;li&gt;Bake/refresh biome
 &lt;img src=&quot;assets/images/posts/gdc2018-procedural-world-generation-of-far-cry-5/slide_35_bake.png&quot; alt=&quot;slide 35 high-level pipeline overview&quot; width=&quot;700&quot; style=&quot;margin: .1em auto&quot; /&gt;
    &lt;p style=&quot;font-size:50%&quot;&gt;Carrier, Etienne. &lt;i&gt;Procedural World Generation of 'Far Cry 5'&lt;/i&gt;. Mar. 2018, GDC, &lt;a target=&quot;_blank&quot; href=&quot;https://www.gdcvault.com/play/1025557/Procedural-World-Generation-of-Far&quot;&gt; GDC Vault Slide Location&lt;/a&gt;. Presentation Slide #35.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;how-the-pipeline-is-working-under-the-hood&quot;&gt;How the pipeline is working under the hood&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;timestamp: 12 minutes into the presentation&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;At the heart of the pipeline is the data exchange between the Houdini Engine and the Game Engine&lt;/li&gt;
  &lt;li&gt;Inputs for the pipeline are sent from the Game Engine to Houdini via a Python Script
    &lt;ul&gt;
      &lt;li&gt;world information&lt;/li&gt;
      &lt;li&gt;spline &amp;amp; shapes&lt;/li&gt;
      &lt;li&gt;file paths&lt;/li&gt;
      &lt;li&gt;Terrain Sectors (Main input that the generation is linked to)&lt;/li&gt;
      &lt;li&gt;heightmaps&lt;/li&gt;
      &lt;li&gt;Biome painter&lt;/li&gt;
      &lt;li&gt;2D terrain masks&lt;/li&gt;
      &lt;li&gt;Houdini Geometry (that might have been generated by another procedural tool)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Outputs of Houdini
    &lt;ul&gt;
      &lt;li&gt;List of outputs
        &lt;ul&gt;
          &lt;li&gt;Entity point could
  &lt;img src=&quot;assets/images/posts/gdc2018-procedural-world-generation-of-far-cry-5/slide_37_entity_point_cloud.png&quot; alt=&quot;slide 37 high-level pipeline overview&quot; width=&quot;700&quot; style=&quot;margin: .1em auto&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p style=&quot;font-size:50%&quot;&gt;Carrier, Etienne. &lt;i&gt;Procedural World Generation of 'Far Cry 5'&lt;/i&gt;. Mar. 2018, GDC, &lt;a target=&quot;_blank&quot; href=&quot;https://www.gdcvault.com/play/1025557/Procedural-World-Generation-of-Far&quot;&gt; GDC Vault Slide Location&lt;/a&gt;. Presentation Slide #37.&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;Terrain texture layers&lt;/li&gt;
          &lt;li&gt;Terrain heightmap layers&lt;/li&gt;
          &lt;li&gt;2D terrain data&lt;/li&gt;
          &lt;li&gt;Geometry&lt;/li&gt;
          &lt;li&gt;Terrain logic zones&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;The data is saved onto a disk using temp “buffers”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The output of one tool influences the output of another tool
    &lt;ul&gt;
      &lt;li&gt;The tools use masks to communicate with each other&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;examples-of-tools&quot;&gt;Examples of tools&lt;/h1&gt;

&lt;h2 id=&quot;cliffs-tool&quot;&gt;Cliffs tool&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;timestamp: 16 minutes into the presentation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/gdc2018-procedural-world-generation-of-far-cry-5/slide_65_cliff_tool.png&quot; alt=&quot;slide 65 cliff tool&quot; width=&quot;700&quot; style=&quot;margin: .1em auto&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;font-size:50%&quot;&gt;Carrier, Etienne. &lt;i&gt;Procedural World Generation of 'Far Cry 5'&lt;/i&gt;. Mar. 2018, GDC, &lt;a target=&quot;_blank&quot; href=&quot;https://www.gdcvault.com/play/1025557/Procedural-World-Generation-of-Far&quot;&gt; GDC Vault Slide Location&lt;/a&gt;. Presentation Slide #65.&lt;/p&gt;

&lt;h2 id=&quot;biomes-tool&quot;&gt;Biomes Tool&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;timestamp: 25 minutes into the presentation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/gdc2018-procedural-world-generation-of-far-cry-5/slide_69_biome_tool.png&quot; alt=&quot;slide 69 biome tool&quot; width=&quot;700&quot; style=&quot;margin: .1em auto&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;font-size:50%&quot;&gt;Carrier, Etienne. &lt;i&gt;Procedural World Generation of 'Far Cry 5'&lt;/i&gt;. Mar. 2018, GDC, &lt;a target=&quot;_blank&quot; href=&quot;https://www.gdcvault.com/play/1025557/Procedural-World-Generation-of-Far&quot;&gt; GDC Vault Slide Location&lt;/a&gt;. Presentation Slide #69.&lt;/p&gt;

&lt;h1 id=&quot;lessons-learned&quot;&gt;Lessons Learned&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;timestamp: 46 minutes into the presentation&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Making the steps of the &lt;em&gt;pipeline simple&lt;/em&gt;. Don’t require knowledge of when the underlying data is generated or how it affects the &lt;em&gt;downstream tasks&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;blending of biomes&lt;/em&gt; is a complicated feature for the users to use and the developers to debug.&lt;/li&gt;
  &lt;li&gt;This level of customization and generation at this scale &lt;em&gt;can impact the gameplay&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;This is just a taste of what is possible to produce using this type of &lt;em&gt;procedural technology&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;You won’t get it right on your first try. Keep iterating and simplifying the pipeline. Be flexible - plans and requirements change.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Pay attention&lt;/em&gt; to how the users use the tools. If you think a feature will be useful it doesn’t mean that the users will use it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;solved-problemschallenges&quot;&gt;Solved Problems/Challenges&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;They shipped FC5&lt;/li&gt;
  &lt;li&gt;They developed:
    &lt;ul&gt;
      &lt;li&gt;The freshwater tool&lt;/li&gt;
      &lt;li&gt;Fences &amp;amp; power line tool&lt;/li&gt;
      &lt;li&gt;Cliff generation tool&lt;/li&gt;
      &lt;li&gt;Biome tool (to spawn vegetation)&lt;/li&gt;
      &lt;li&gt;Fog tool&lt;/li&gt;
      &lt;li&gt;World map tool (scatter trees on the world map)&lt;/li&gt;
      &lt;li&gt;Power line tool
        &lt;ul&gt;
          &lt;li&gt;Auto snapping if a user made an error (with-in a given threshold distance)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The workflow allowed for quick &lt;strong&gt;iteration&lt;/strong&gt; and the ability to &lt;em&gt;“bake as you work”&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Use &lt;em&gt;biome recipes&lt;/em&gt; to define what vegetation will be placed in different parts of the map (near water, near cliffs, at high altitude)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;practical-truths&quot;&gt;Practical Truths&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;General Tools Development Wisdom&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;“At first you won’t understand the problem.”&lt;/strong&gt; - You won’t get a system design “right” from the first attempt.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“You are not your users.”&lt;/strong&gt; - If you think something is a good feature, it doesn’t mean that the users will think so.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“Users don’t have to know the implementation details”.&lt;/strong&gt; - Users will not remember complicated cause-and-effect scenarios.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“Hidden Cascade Effect”&lt;/strong&gt; - In a fully automated system, a user might not see/ suspect that their changes are affecting another system that is out of view.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“The speed of iteration is vital to the quality of the game.”&lt;/strong&gt; - Don’t let the tools be the bottleneck of the iteration process.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;practical-principles&quot;&gt;Practical Principles&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;General Tools Development Principles&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enable user input and &lt;em&gt;customization&lt;/em&gt; inside a procedural generation system.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Observe users&lt;/em&gt; to understand what is important for them.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;K.I.S.S.&lt;/em&gt;: Keep It Stupid Simple&lt;/li&gt;
  &lt;li&gt;Search for the balance between &lt;em&gt;control&lt;/em&gt; and &lt;em&gt;automation&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;questions-that-came-to-mind&quot;&gt;Questions that came to mind&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;What are some websites/resources about good &lt;em&gt;Digital Content Creation tool&lt;/em&gt; architecture/patterns? Maybe even some checklists?
    &lt;ul&gt;
      &lt;li&gt;Like :
        &lt;ul&gt;
          &lt;li&gt;“Don’t forget to make a headless client for your tool”&lt;/li&gt;
          &lt;li&gt;“Don’t forget to add python scripting”&lt;/li&gt;
          &lt;li&gt;“Don’t forget to think about determinism when saving&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Is there any alternative to Houdini? (not counting &lt;strong&gt;rolling your own&lt;/strong&gt;)&lt;/li&gt;
  &lt;li&gt;How do they edit the road network that spans multiple &lt;strong&gt;maps&lt;/strong&gt; (parts of the &lt;strong&gt;world&lt;/strong&gt;)?&lt;/li&gt;
  &lt;li&gt;How long into the future when level art for &lt;strong&gt;second class&lt;/strong&gt; points of interest will be fully defined by recipes? When will it be mainstream?&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;background-color:#FFFF94;border-left: 18px solid #ffff48;padding-left: 50px;&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;These notes are just the main ideas of the talk. They don’t contain anecdotes and examples. If you want to learn more, I would advise watching the talk on the &lt;a target=&quot;_blank&quot; href=&quot;https://www.gdcvault.com/play/1025215/Procedural-World-Generation-of-Far&quot;&gt;GDC Vault&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-toolsmiths&quot;&gt;The Toolsmiths&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://thetoolsmiths.org/assets/thetoolsmiths_cover_1000x2881.png&quot; alt=&quot;The Toolsmiths logo&quot; width=&quot;700&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I took these notes as part of our little “Book Club” for GDC Vault Videos &lt;a href=&quot;http://thetoolsmiths.org/vault_club&quot; target=&quot;_blank&quot;&gt;The Toolsmiths #vault club&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Join us on &lt;a href=&quot;http://thetoolsmiths.org/join_slack_team&quot; target=&quot;_blank&quot;&gt;Slack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Join us on &lt;a href=&quot;https://twitter.com/thetoolsmiths&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025557/Procedural-World-Generation-of-Far&quot; target=&quot;_blank&quot;&gt;Slides: 	Procedural World Generation of ‘Far Cry 5’&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;related-talksvideos&quot;&gt;Related Talks\Videos&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1024029/-Ghost-Recon-Wildlands-Terrain&quot; target=&quot;_blank&quot;&gt;GDC 2017 ‘Ghost Recon Wildlands’: Terrain Tools and Technology&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/browse/gdc-18/play/1025261/Terrain-Rendering-in-Far-Cry&quot; target=&quot;_blank&quot;&gt;GDC 2018 Terrain Rendering in ‘Far Cry 5’&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/browse/gdc-18/play/1025264/The-Asset-Build-System-of&quot; target=&quot;_blank&quot;&gt;GDC 2018 The Asset Build System of ‘Far Cry 5’&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=OklvMqMCkc4&amp;amp;feature=youtu.be&quot; target=&quot;_blank&quot;&gt;GAT #69: River - 2k19 Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;credits&quot;&gt;Credits&lt;/h2&gt;

&lt;p&gt;Post cover image by &lt;a href=&quot;https://pixabay.com/users/Pexels-2286921/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=1852955&quot;&gt;Pexels&lt;/a&gt; from &lt;a href=&quot;https://pixabay.com/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=1852955&quot;&gt;Pixabay&lt;/a&gt;&lt;/p&gt;</content><author><name>Victor Stepanov</name></author><category term="GDC" /><category term="procedural" /><category term="visual-arts" /><category term="level-art" /><category term="level-design" /><summary type="html">TLDW Summary: This talk is about how FC5 developers created a pipeline for generating a realistic game world using procedural recipes. The talk contains a high-level overview of the pipeline with two deep dives into the details of the tools. Key Terms procedural workflow an ecosystem of procedural tools Houdini Engine biome recipes determinism terrain 2d mask Presentation Time Stamps at minute 2 Introduction at minute 2 The goals of the procedural pipeline at minute 6 The tools that were developed at minute 15 The system from the user’s point of view at minute 12 How the pipeline is working under the hood at minute 16 The Cliff generation tool at minute 25 The Biome generation tool at minute 46 What changed during development at minute 49 Conclusion at minute 52 Q&amp;amp;A Key Concepts biome : an area of a game world with distinct terrain, vegetation, and animal life. Carrier, Etienne. Procedural World Generation of 'Far Cry 5'. Mar. 2018, GDC, GDC Vault Slide Location. Presentation Slide #71. map : parts of a game world that are not loaded at the same time section : a part of a map (256m X 256m) sector : a part of a section (64m X 64m), the smallest part of a world that can be baked Carrier, Etienne. Procedural World Generation of 'Far Cry 5'. Mar. 2018, GDC, GDC Vault Slide Location. Presentation Slide #34. recipe : a set of rules that given a set of inputs determines what entities need to be placed at a given location points of interest : a map location reserved for user input and editing The Problems/Challenges Filling up empty space is easy, but filling it up so it looks natural is a big challenge. The workflow required to fill up large open spaces beautifully, quickly, while maintaining the flexibility for applying user input. The workflow had to allow fine-tuning of smaller locations to deliver tight gameplay experiences. Terraforming can’t be locked at the start of the project The terrain of the game would be constantly changing, and the biomes would need to be constantly updated. Updating the biomes by hand wasn’t an option. The asset placement needs to be consistent with the terrain topology. The pipeline needs to run without human intervention to regenerate the content in a build farm setting. The pipeline needs to generate small sections of the world separately. The parts of the world should be generated deterministically to enable stitching parts together. Propositions The biomes procedural system should be able to simulate natural phenomena. Carrier, Etienne. Procedural World Generation of 'Far Cry 5'. Mar. 2018, GDC, GDC Vault Slide Location. Presentation Slide #80. Carrier, Etienne. Procedural World Generation of 'Far Cry 5'. Mar. 2018, GDC, GDC Vault Slide Location. Presentation Slide #99. Build biome recipes that react to the physical features of the land to ensure coherence throughout the world Carrier, Etienne. Procedural World Generation of 'Far Cry 5'. Mar. 2018, GDC, GDC Vault Slide Location. Presentation Slide #89. The iterative process is vital to the quality of the game Use Houdini Engine to run the full map generation in a nightly build same input = same result (determinism matters) The ecosystem of tools needs to be user friendly shelf tools be able to override procedural results User must be able to bake data as they work Key Points They developed a sophisticated procedural pipeline for creating a realistic game world using Houdini and Houdini Engine Originally they just wanted to develop the biome tool, but they ended up developing a suite of tools. The heart of the pipeline is the data exchange between the Houdini Engine and the Game Engine Carrier, Etienne. Procedural World Generation of 'Far Cry 5'. Mar. 2018, GDC, GDC Vault Slide Location. Presentation Slide #70. They developed an ecosystem of procedural tools, where one tool would provide the input to the next tool Carrier, Etienne. Procedural World Generation of 'Far Cry 5'. Mar. 2018, GDC, GDC Vault Slide Location. Presentation Slide #38. They regenerate the entire game world every night on special build machines. User Iteration Workflow timestamp: 6 minutes into the presentation Terraforming pass Define freshwater Carrier, Etienne. Procedural World Generation of 'Far Cry 5'. Mar. 2018, GDC, GDC Vault Slide Location. Presentation Slide #22. Run the cliff generation tool to create cliffs on steep terrain Use Biome painter and run procedural generation to spawn the vegetation Setting up Points of Interest (a.k.a. location) Carrier, Etienne. Procedural World Generation of 'Far Cry 5'. Mar. 2018, GDC, GDC Vault Slide Location. Presentation Slide #26. Paint an area with the grass Biome Laying down a road spline Bake roads and refresh biome Add buildings, props Apply terrain texture Add more Trees with the forest sub-biome Bake/refresh biome Add fence spline Add power line spline Snap power line connector to house Bake/refresh biome User Non-Destructive Workflow timestamp: 11 minutes into the presentation Update level of terrain Bake/refresh biome Carrier, Etienne. Procedural World Generation of 'Far Cry 5'. Mar. 2018, GDC, GDC Vault Slide Location. Presentation Slide #35. How the pipeline is working under the hood timestamp: 12 minutes into the presentation At the heart of the pipeline is the data exchange between the Houdini Engine and the Game Engine Inputs for the pipeline are sent from the Game Engine to Houdini via a Python Script world information spline &amp;amp; shapes file paths Terrain Sectors (Main input that the generation is linked to) heightmaps Biome painter 2D terrain masks Houdini Geometry (that might have been generated by another procedural tool) Outputs of Houdini List of outputs Entity point could Carrier, Etienne. Procedural World Generation of 'Far Cry 5'. Mar. 2018, GDC, GDC Vault Slide Location. Presentation Slide #37. Terrain texture layers Terrain heightmap layers 2D terrain data Geometry Terrain logic zones The data is saved onto a disk using temp “buffers” The output of one tool influences the output of another tool The tools use masks to communicate with each other Examples of tools Cliffs tool timestamp: 16 minutes into the presentation Carrier, Etienne. Procedural World Generation of 'Far Cry 5'. Mar. 2018, GDC, GDC Vault Slide Location. Presentation Slide #65. Biomes Tool timestamp: 25 minutes into the presentation Carrier, Etienne. Procedural World Generation of 'Far Cry 5'. Mar. 2018, GDC, GDC Vault Slide Location. Presentation Slide #69. Lessons Learned timestamp: 46 minutes into the presentation Making the steps of the pipeline simple. Don’t require knowledge of when the underlying data is generated or how it affects the downstream tasks. The blending of biomes is a complicated feature for the users to use and the developers to debug. This level of customization and generation at this scale can impact the gameplay. This is just a taste of what is possible to produce using this type of procedural technology. You won’t get it right on your first try. Keep iterating and simplifying the pipeline. Be flexible - plans and requirements change. Pay attention to how the users use the tools. If you think a feature will be useful it doesn’t mean that the users will use it. Solved Problems/Challenges They shipped FC5 They developed: The freshwater tool Fences &amp;amp; power line tool Cliff generation tool Biome tool (to spawn vegetation) Fog tool World map tool (scatter trees on the world map) Power line tool Auto snapping if a user made an error (with-in a given threshold distance) The workflow allowed for quick iteration and the ability to “bake as you work” Use biome recipes to define what vegetation will be placed in different parts of the map (near water, near cliffs, at high altitude) Practical Truths General Tools Development Wisdom “At first you won’t understand the problem.” - You won’t get a system design “right” from the first attempt. “You are not your users.” - If you think something is a good feature, it doesn’t mean that the users will think so. “Users don’t have to know the implementation details”. - Users will not remember complicated cause-and-effect scenarios. “Hidden Cascade Effect” - In a fully automated system, a user might not see/ suspect that their changes are affecting another system that is out of view. “The speed of iteration is vital to the quality of the game.” - Don’t let the tools be the bottleneck of the iteration process. Practical Principles General Tools Development Principles Enable user input and customization inside a procedural generation system. Observe users to understand what is important for them. K.I.S.S.: Keep It Stupid Simple Search for the balance between control and automation. Questions that came to mind What are some websites/resources about good Digital Content Creation tool architecture/patterns? Maybe even some checklists? Like : “Don’t forget to make a headless client for your tool” “Don’t forget to add python scripting” “Don’t forget to think about determinism when saving Is there any alternative to Houdini? (not counting rolling your own) How do they edit the road network that spans multiple maps (parts of the world)? How long into the future when level art for second class points of interest will be fully defined by recipes? When will it be mainstream? These notes are just the main ideas of the talk. They don’t contain anecdotes and examples. If you want to learn more, I would advise watching the talk on the GDC Vault. The Toolsmiths I took these notes as part of our little “Book Club” for GDC Vault Videos The Toolsmiths #vault club Join us on Slack. Join us on Twitter. Links Slides: Procedural World Generation of ‘Far Cry 5’ Related Talks\Videos GDC 2017 ‘Ghost Recon Wildlands’: Terrain Tools and Technology GDC 2018 Terrain Rendering in ‘Far Cry 5’ GDC 2018 The Asset Build System of ‘Far Cry 5’ GAT #69: River - 2k19 Edition Credits Post cover image by Pexels from Pixabay</summary></entry><entry><title type="html">Notes for “Tools for ‘Marvel’s Spider-Man’ Editing with Immutable Data” GDC2019</title><link href="/http://victorstepanov.github.io/gdc2019-tools-for-marvels-spider-man-editing-with-immutable-data" rel="alternate" type="text/html" title="Notes for &quot;Tools for 'Marvel's Spider-Man' Editing with Immutable Data&quot; GDC2019" /><published>2019-07-13T18:00:00-07:00</published><updated>2019-07-13T18:00:00-07:00</updated><id>/http://victorstepanov.github.io/gdc2019-tools-for-marvels-spider-man-editing-with-immutable-data</id><content type="html" xml:base="/http://victorstepanov.github.io/gdc2019-tools-for-marvels-spider-man-editing-with-immutable-data">&lt;p&gt;&lt;strong&gt;TLDW Summary&lt;/strong&gt;: This talk is a tour of the technologies that Insomniac Games developed to transition from their web based tools to their new desktop tools. Highlighting what challenges they encountered when replacing the tool chain in mid production.&lt;/p&gt;

&lt;h2 id=&quot;keywords&quot;&gt;Keywords&lt;/h2&gt;
&lt;div class=&quot;keyword-container&quot;&gt;
&lt;ul class=&quot;keyword-container&quot;&gt;
&lt;li&gt;Data Design&lt;/li&gt;
&lt;li&gt;Immutable Data&lt;/li&gt;
&lt;li&gt;Mid Production&lt;/li&gt;
&lt;li&gt;Data Definition Language (DDL)&lt;/li&gt;
&lt;li&gt;Porting&lt;/li&gt;
&lt;/ul&gt;
&lt;style&gt;
    .keyword-container &gt; ul
    {
        font-size: 16px;
        list-style-type: none;
        padding:15px;
    }
    .keyword-container &gt; li
    {
        background-color:#f3f3f3;
        display : inline;
        padding:5px;
        margin:2px;
        margin-bottom: 100px;
        border-radius: 5px;
    }
&lt;/style&gt;
&lt;/div&gt;

&lt;h2 id=&quot;presentation-time-stamps&quot;&gt;Presentation Time Stamps&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1026080/Tools-for-Marvel-s-Spider&quot;&gt;at min 1&lt;/a&gt; Background&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1026080/Tools-for-Marvel-s-Spider&quot;&gt;at min 2&lt;/a&gt; Making Changes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1026080/Tools-for-Marvel-s-Spider&quot;&gt;at min 6&lt;/a&gt; Mission Directive&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1026080/Tools-for-Marvel-s-Spider&quot;&gt;at min 15&lt;/a&gt; Implicitly shared data with Copy-on-write&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1026080/Tools-for-Marvel-s-Spider&quot;&gt;at min 29&lt;/a&gt; Immutable Data&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1026080/Tools-for-Marvel-s-Spider&quot;&gt;at min 32&lt;/a&gt; The Edit Loop&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1026080/Tools-for-Marvel-s-Spider&quot;&gt;at min 41&lt;/a&gt; Hazards Encountered&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1026080/Tools-for-Marvel-s-Spider&quot;&gt;at min 45&lt;/a&gt; Conclusion&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1026080/Tools-for-Marvel-s-Spider&quot;&gt;at min 47&lt;/a&gt; Q&amp;amp;A&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Insomniac Games started to develop Web-Based Tools in 2010 (written in JavaScript)
    &lt;ul&gt;
      &lt;li&gt;This lead to some issues and the engine team decided to go back to the regular desktop tools
        &lt;ul&gt;
          &lt;li&gt;for more see &lt;a href=&quot;http://www.gdcvault.com/play/1024465/Insomniac-s-Web-Tools-A&quot;&gt;GDC 2017 “Insomniac’s Web Tools: A Postmortem”&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Insomniac Games  shipped 6 games with the web tools&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;This talk is about what happened after the “Insomniac’s Web Tools: A Postmortem”&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;making-changes&quot;&gt;Making Changes&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;timestamp: 2 min into the presentation&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;In 2015 the work started on the transition from JavaScript to C++ Qt with a 4 man team&lt;/li&gt;
  &lt;li&gt;The refactoring had to be done while the tools were still in use&lt;/li&gt;
  &lt;li&gt;Sunset Overdrive pushed the JS world editor to its limits and ‘Marvel’s Spider-Man’ Manhattan would be even bigger
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;assets/images/posts/tools-for-marvels-spider-man-editing-with-immutable-data/map-scale.jpg&quot; alt=&quot;slide: Sunset Overdrive vs'Marvel's Spider-Man' Manhattan size&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;the team needed to port 12 editors from JS
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;assets/images/posts/tools-for-marvels-spider-man-editing-with-immutable-data/world-editor.jpg&quot; alt=&quot;slide: world editor&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;assets/images/posts/tools-for-marvels-spider-man-editing-with-immutable-data/animation-editor.jpg&quot; alt=&quot;slide: animation editor&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;assets/images/posts/tools-for-marvels-spider-man-editing-with-immutable-data/cinematics-editor.jpg&quot; alt=&quot;slide: cinematics editor&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;assets/images/posts/tools-for-marvels-spider-man-editing-with-immutable-data/vfx-editor.jpg&quot; alt=&quot;slide: vfx editor&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;assets/images/posts/tools-for-marvels-spider-man-editing-with-immutable-data/12-editors.jpg&quot; alt=&quot;slide: 12 editors&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;the goals of the refactoring were
    &lt;ul&gt;
      &lt;li&gt;performance (being able to work with large data sets)
        &lt;ul&gt;
          &lt;li&gt;multi-threading support&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;easier to maintain&lt;/li&gt;
      &lt;li&gt;type safety (JS “Uncaught TypeError: undefined is not a function”)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;mission-directive&quot;&gt;Mission Directive&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;timestamp: 6 min into the presentation&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the tool porting was planned to be done when a significant part of the content would have been created with the old tools
    &lt;ul&gt;
      &lt;li&gt;needed to provide an upgrade path or data compatibility&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;the C++ tools need to have the same UX and UI as the JS tools to make the switching between the tools as seamless as possible.
    &lt;ul&gt;
      &lt;li&gt;no feature requests were accepted to make it possible to finish on time&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The tools were 100% data compatible
    &lt;ul&gt;
      &lt;li&gt;this enabled the users to fall back to the JS tools when they hit an issue with the C++ version&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;the JS tools were using a local client/server model
    &lt;ul&gt;
      &lt;li&gt;the local server was called LunaServer
        &lt;ul&gt;
          &lt;li&gt;for more check out the GDC2012 talk about &lt;a href=&quot;https://gdcvault.com/play/1015531/Developing-Imperfect-Software-How-to&quot;&gt;Developing Imperfect Software: How to Prepare for Development Pipeline Failure&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;LunaServer
        &lt;ul&gt;
          &lt;li&gt;stores its state in MongoDB&lt;/li&gt;
          &lt;li&gt;responsible for file system IO&lt;/li&gt;
          &lt;li&gt;responsible for Perforce operations&lt;/li&gt;
          &lt;li&gt;sync changes to assets between tools&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;their own in-house DDL
    &lt;ul&gt;
      &lt;li&gt;made JSON type safe with a DDL compiler (ToolsDDL) that would compile the DDL into C++ code (set/get)&lt;/li&gt;
      &lt;li&gt;tools use in memory JSON representation (to reduce complexity and the need to convert between C++ object)modification&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;to represent a game object, they use JSON trees which are the same as hash table of hash tables&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;implicitly-shared-data-with-copy-on-write&quot;&gt;Implicitly shared data with Copy-on-write&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;timestamp: 15 min into the presentation&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;a detailed explanation of the Implicitly shared data with Copy-on-write pattern at @ 15-36&lt;/li&gt;
  &lt;li&gt;basic idea
    &lt;ul&gt;
      &lt;li&gt;a global state is implicitly shared between modules&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;assets/images/posts/tools-for-marvels-spider-man-editing-with-immutable-data/modify_worldNode_0.jpg&quot; alt=&quot;slide: modify worldNode step one&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;when a module wants to update the global state, a copy is made&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;assets/images/posts/tools-for-marvels-spider-man-editing-with-immutable-data/modify_worldNode.jpg&quot; alt=&quot;slide: modify worldNode step two&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;after the modification is done the rest of the modules get notified to fetch the pointer to the new object&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;assets/images/posts/tools-for-marvels-spider-man-editing-with-immutable-data/modify_worldNode_2.jpg&quot; alt=&quot;slide: modify worldNode step three&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;implicit sharing makes it easy to compute the diff of 2 JSON trees
    &lt;ul&gt;
      &lt;li&gt;this is because as soon as 2 subtrees point to the same shared subtree, you don’t need to traverse that part of the tree any further.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;immutable-data&quot;&gt;Immutable Data&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;timestamp: 29 min into the presentation&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the same idea of Implicitly shared data &lt;strong&gt;without&lt;/strong&gt; Copy-on-write
    &lt;ul&gt;
      &lt;li&gt;no setters&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;assets/images/posts/tools-for-marvels-spider-man-editing-with-immutable-data/Immutable_Data.jpg&quot; alt=&quot;slide: Immutable Data class&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;this makes it easier to reason about the code&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;font-style: normal;font-size: 26px;margin-left: 32px;font-family: Consolas, 'Times New Roman', Verdana;border-left: 4px solid #3a5ebf;padding-left: 20px;&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&quot;Immutable is not const. const only controls access, immutable is a guarantee.&quot;
&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;they like to think about this as a step towards functional programming&lt;/li&gt;
  &lt;li&gt;designing an API that is like a function that returns a new value based on the old value
    &lt;ul&gt;
      &lt;li&gt;without any
        &lt;ul&gt;
          &lt;li&gt;side effects&lt;/li&gt;
          &lt;li&gt;preconditions&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-edit-loop&quot;&gt;The Edit Loop&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;timestamp: 32 min into the presentation&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;LunaEdit is the module that is responsible for editing asset
    &lt;ul&gt;
      &lt;li&gt;creating a new object from an object that was passed in&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;LunaEdit is also responsible for
    &lt;ul&gt;
      &lt;li&gt;handling Perforce checkout&lt;/li&gt;
      &lt;li&gt;handling the undo system&lt;/li&gt;
      &lt;li&gt;sending updates to the LunaServer (updating the DB and files on disk)&lt;/li&gt;
      &lt;li&gt;broadcast changes all of the modules in the system (change/update)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;all of the complexity of working with the data format is hidden in one place -  the LunaEdit module&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;assets/images/posts/tools-for-marvels-spider-man-editing-with-immutable-data/edit_loop.jpg&quot; alt=&quot;slide: The Edit Loop&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;hazards-encountered&quot;&gt;Hazards Encountered&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;timestamp: 41 min into the presentation&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;copying wide (flat) hash tables is expensive
    &lt;ul&gt;
      &lt;li&gt;prefer deep hash tables&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;don’t use QJsonObject
    &lt;ul&gt;
      &lt;li&gt;strings are stored as 8-bit and returned as 16-bit&lt;/li&gt;
      &lt;li&gt;strings are not shared (issue with identical keys)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;with multiple versions of data in flight
    &lt;ul&gt;
      &lt;li&gt;a module wants to change a piece of data that is in the process of being updated.&lt;/li&gt;
      &lt;li&gt;this wasn’t an issue because the main thread is the only thread that can request a change&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;background-color:#FFFF94;border-left: 18px solid #ffff48;padding-left: 50px;&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;These notes are just the main ideas of the talk. They don’t contain anecdotes and examples. If you want to learn more, I would advise watching the talk on the &lt;a href=&quot;https://www.gdcvault.com/play/1026080/Tools-for-Marvel-s-Spider&quot;&gt;GDC Vault&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-toolsmiths&quot;&gt;The Toolsmiths&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://thetoolsmiths.org/assets/thetoolsmiths_cover_1000x2881.png&quot; alt=&quot;The Toolsmiths logo&quot; width=&quot;700&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I took these notes as part of our little “Book Club” for GDC Vault Videos &lt;a href=&quot;http://thetoolsmiths.org/vault_club&quot;&gt;The Toolsmiths #vault club&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Join us on &lt;a href=&quot;http://thetoolsmiths.org/join_slack_team&quot;&gt;Slack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Join us on &lt;a href=&quot;https://twitter.com/thetoolsmiths&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1026080/Tools-for-Marvel-s-Spider&quot;&gt;Tools for ‘Marvel’s Spider-Man’ Editing with Immutable Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;related-talks&quot;&gt;Related talks&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.gdcvault.com/play/1024465/Insomniac-s-Web-Tools-A&quot;&gt;GDC 2017 “Insomniac’s Web Tools: A Postmortem”&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gdcvault.com/play/1015531/Developing-Imperfect-Software-How-to&quot;&gt;GDC 2012 Developing Imperfect Software: How to Prepare for Development Pipeline Failure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Victor Stepanov</name></author><category term="GDC" /><category term="data" /><category term="ddl" /><category term="edit" /><category term="web" /><summary type="html">TLDW Summary: This talk is a tour of the technologies that Insomniac Games developed to transition from their web based tools to their new desktop tools. Highlighting what challenges they encountered when replacing the tool chain in mid production. Keywords Data Design Immutable Data Mid Production Data Definition Language (DDL) Porting Presentation Time Stamps at min 1 Background at min 2 Making Changes at min 6 Mission Directive at min 15 Implicitly shared data with Copy-on-write at min 29 Immutable Data at min 32 The Edit Loop at min 41 Hazards Encountered at min 45 Conclusion at min 47 Q&amp;amp;A Background Insomniac Games started to develop Web-Based Tools in 2010 (written in JavaScript) This lead to some issues and the engine team decided to go back to the regular desktop tools for more see GDC 2017 “Insomniac’s Web Tools: A Postmortem” Insomniac Games shipped 6 games with the web tools This talk is about what happened after the “Insomniac’s Web Tools: A Postmortem” Making Changes timestamp: 2 min into the presentation In 2015 the work started on the transition from JavaScript to C++ Qt with a 4 man team The refactoring had to be done while the tools were still in use Sunset Overdrive pushed the JS world editor to its limits and ‘Marvel’s Spider-Man’ Manhattan would be even bigger the team needed to port 12 editors from JS the goals of the refactoring were performance (being able to work with large data sets) multi-threading support easier to maintain type safety (JS “Uncaught TypeError: undefined is not a function”) Mission Directive timestamp: 6 min into the presentation the tool porting was planned to be done when a significant part of the content would have been created with the old tools needed to provide an upgrade path or data compatibility the C++ tools need to have the same UX and UI as the JS tools to make the switching between the tools as seamless as possible. no feature requests were accepted to make it possible to finish on time The tools were 100% data compatible this enabled the users to fall back to the JS tools when they hit an issue with the C++ version the JS tools were using a local client/server model the local server was called LunaServer for more check out the GDC2012 talk about Developing Imperfect Software: How to Prepare for Development Pipeline Failure LunaServer stores its state in MongoDB responsible for file system IO responsible for Perforce operations sync changes to assets between tools their own in-house DDL made JSON type safe with a DDL compiler (ToolsDDL) that would compile the DDL into C++ code (set/get) tools use in memory JSON representation (to reduce complexity and the need to convert between C++ object)modification to represent a game object, they use JSON trees which are the same as hash table of hash tables Implicitly shared data with Copy-on-write timestamp: 15 min into the presentation a detailed explanation of the Implicitly shared data with Copy-on-write pattern at @ 15-36 basic idea a global state is implicitly shared between modules when a module wants to update the global state, a copy is made after the modification is done the rest of the modules get notified to fetch the pointer to the new object implicit sharing makes it easy to compute the diff of 2 JSON trees this is because as soon as 2 subtrees point to the same shared subtree, you don’t need to traverse that part of the tree any further. Immutable Data timestamp: 29 min into the presentation the same idea of Implicitly shared data without Copy-on-write no setters this makes it easier to reason about the code &quot;Immutable is not const. const only controls access, immutable is a guarantee.&quot; they like to think about this as a step towards functional programming designing an API that is like a function that returns a new value based on the old value without any side effects preconditions The Edit Loop timestamp: 32 min into the presentation LunaEdit is the module that is responsible for editing asset creating a new object from an object that was passed in LunaEdit is also responsible for handling Perforce checkout handling the undo system sending updates to the LunaServer (updating the DB and files on disk) broadcast changes all of the modules in the system (change/update) all of the complexity of working with the data format is hidden in one place - the LunaEdit module Hazards Encountered timestamp: 41 min into the presentation copying wide (flat) hash tables is expensive prefer deep hash tables don’t use QJsonObject strings are stored as 8-bit and returned as 16-bit strings are not shared (issue with identical keys) with multiple versions of data in flight a module wants to change a piece of data that is in the process of being updated. this wasn’t an issue because the main thread is the only thread that can request a change These notes are just the main ideas of the talk. They don’t contain anecdotes and examples. If you want to learn more, I would advise watching the talk on the GDC Vault. The Toolsmiths I took these notes as part of our little “Book Club” for GDC Vault Videos The Toolsmiths #vault club Join us on Slack. Join us on Twitter. Links Tools for ‘Marvel’s Spider-Man’ Editing with Immutable Data Related talks GDC 2017 “Insomniac’s Web Tools: A Postmortem” GDC 2012 Developing Imperfect Software: How to Prepare for Development Pipeline Failure</summary></entry><entry><title type="html">Notes for “The Future of Scene Description on ‘God of War’” GDC2019</title><link href="/http://victorstepanov.github.io/gdc2019-the-future-of-scene-description-on-god-of-war" rel="alternate" type="text/html" title="Notes for &quot;The Future of Scene Description on 'God of War'&quot; GDC2019" /><published>2019-06-15T18:00:00-07:00</published><updated>2019-06-15T18:00:00-07:00</updated><id>/http://victorstepanov.github.io/gdc2019-the-future-of-scene-description-on-god-of-war</id><content type="html" xml:base="/http://victorstepanov.github.io/gdc2019-the-future-of-scene-description-on-god-of-war">&lt;p&gt;&lt;strong&gt;TLDW Summary&lt;/strong&gt;: This talk sheds light on the decisions that were made by the Santa Monica Studio’s engine team while tackling the problems of time and complexity in transforming source data into game-ready data.&lt;/p&gt;

&lt;h2 id=&quot;keywords&quot;&gt;Keywords&lt;/h2&gt;
&lt;div class=&quot;keyword-container&quot;&gt;
&lt;ul class=&quot;keyword-container&quot;&gt;
&lt;li&gt;Data Design&lt;/li&gt;
&lt;li&gt;Data Duality&lt;/li&gt;
&lt;li&gt;Scene Description&lt;/li&gt;
&lt;li&gt;Data Definition Language (DDL)&lt;/li&gt;
&lt;li&gt;Nondeterminism&lt;/li&gt;
&lt;/ul&gt;
&lt;style&gt;
    .keyword-container &gt; ul
    {
        font-size: 16px;
        list-style-type: none;
        padding:15px;
    }
    .keyword-container &gt; li
    {
        background-color:#f3f3f3;
        display : inline;
        padding:5px;
        margin:2px;
        margin-bottom: 100px;
        border-radius: 5px;
    }
&lt;/style&gt;
&lt;/div&gt;

&lt;h2 id=&quot;presentation-time-stamps&quot;&gt;Presentation Time Stamps&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025969/The-Future-of-Scene-Description&quot;&gt;at min 1&lt;/a&gt; Backgound: Game Content Pipeline&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025969/The-Future-of-Scene-Description&quot;&gt;at min 16&lt;/a&gt; Past: Redefining SmSchema&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025969/The-Future-of-Scene-Description&quot;&gt;at min 20&lt;/a&gt; Present: A view after years of investment&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025969/The-Future-of-Scene-Description&quot;&gt;at min 27&lt;/a&gt; Present: Connecting the parts of the design into one&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025969/The-Future-of-Scene-Description&quot;&gt;at min 37&lt;/a&gt; Looking into the future: many opportunities still remain&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025969/The-Future-of-Scene-Description&quot;&gt;at min 41&lt;/a&gt; Lessons we’ve learned&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025969/The-Future-of-Scene-Description&quot;&gt;at min 43&lt;/a&gt; Q&amp;amp;A&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;backgound-game-content-pipeline&quot;&gt;Backgound: Game Content Pipeline&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;timestamp: 1 min into the presentation&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;God of War data breakdown
&lt;img src=&quot;assets/images/posts/the-future-of-scene-description-on-god-of-war\god-of-War-data-breakdown.jpg&quot; alt=&quot;slide: God of War data breakdown&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;What Source Data and Run-time data have in common
&lt;img src=&quot;assets/images/posts/the-future-of-scene-description-on-god-of-war\source-data-n-production-data.jpg&quot; alt=&quot;slide: What Source Data and Run-time data have in common&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;The design philosophy was inspired by the scene description from the film industry&lt;/li&gt;
  &lt;li&gt;Patch size was a common enemy
    &lt;ul&gt;
      &lt;li&gt;Nondeterminism made patch sizes huge
        &lt;ul&gt;
          &lt;li&gt;Patching was always an afterthought.&lt;/li&gt;
          &lt;li&gt;Parts of the run-time was an afterthought.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Exploring data formats to find a better way&lt;/li&gt;
  &lt;li&gt;2 types of explicit data formats
    &lt;ul&gt;
      &lt;li&gt;Low level: FlatBuffers, ProtocolBuffers&lt;/li&gt;
      &lt;li&gt;Higher level: COLLADA and USD&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;None satisfied the requirements
    &lt;ul&gt;
      &lt;li&gt;This was the catalyst for the SmSchema Data Definition Language&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The SmSchema proof of concept had 3 main parts
    &lt;ul&gt;
      &lt;li&gt;The definition itself&lt;/li&gt;
      &lt;li&gt;C++ code generation with (Jinja Python)&lt;/li&gt;
      &lt;li&gt;Sterilization into JSON&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The first attempt to apply it to a real-world problem showed that the mental model that they had envisioned had missing parts
&lt;img src=&quot;assets/images/posts/the-future-of-scene-description-on-god-of-war\smschema-interconnected-technologies.jpg&quot; alt=&quot;slide: missing interconnected technologies&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;past-redefining-smschema&quot;&gt;Past: Redefining SmSchema&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;timestamp: 16 min into the presentation&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Decided to use the serialization as an anchor point to design around&lt;/li&gt;
  &lt;li&gt;The redesign started with laying down the foundation with &lt;a href=&quot;https://fs.blog/2018/04/first-principles/&quot;&gt;first-prenciples&lt;/a&gt;
&lt;img src=&quot;assets/images/posts/the-future-of-scene-description-on-god-of-war\first-principles.jpg&quot; alt=&quot;slide: first-prenciples used in the design&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Wanted to get away from a JSON-based Language&lt;/li&gt;
  &lt;li&gt;Issues with Maya scalability brought more questions that needed answers
&lt;img src=&quot;assets/images/posts/the-future-of-scene-description-on-god-of-war\new-insight.jpg&quot; alt=&quot;slide: questions that needed answers&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;present-a-view-after-years-of-investment&quot;&gt;Present: A view after years of investment&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;timestamp: 20 min into the presentation&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;img src=&quot;assets/images/posts/the-future-of-scene-description-on-god-of-war\smschema-interconnected-technologies-2.jpg&quot; alt=&quot;slide: SmSchema architecture high level&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;The DDL was inspired by &lt;a href=&quot;https://gdcvault.com/play/1015531/Developing-Imperfect-Software-How-to&quot;&gt;Insomniac’s DDL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Used &lt;a href=&quot;https://www.antlr.org/&quot;&gt;ANTLR&lt;/a&gt; for language definition&lt;/li&gt;
  &lt;li&gt;Process of code generation
    &lt;ul&gt;
      &lt;li&gt;Used special Compile-Time Type Info (CTTI) to decouple the DDL and the code generation&lt;/li&gt;
      &lt;li&gt;Used a functional approach to make it easier to generate code to any current or future target&lt;/li&gt;
      &lt;li&gt;Used special metadata in the form of annotations to enable user-driven code generation without making changes in the parser&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;assets/images/posts/the-future-of-scene-description-on-god-of-war\code-gen-1.jpg&quot; alt=&quot;slide: Code Generation with CTTI info&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;assets/images/posts/the-future-of-scene-description-on-god-of-war\code-gen-2.jpg&quot; alt=&quot;slide: Code Generation with CTTI flexibility&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Serialization formats
    &lt;ul&gt;
      &lt;li&gt;JSON - Human readable for merging, diffing and fixing issues
        &lt;ul&gt;
          &lt;li&gt;Leverage open source tools and libs&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Binary - For performance &amp;amp; compression&lt;/li&gt;
      &lt;li&gt;Experimenting with MsgPack to encode large assets&lt;/li&gt;
      &lt;li&gt;X3D scene loader increased performance by an order of magnitude while saving and loading&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;present-connecting-the-parts-of-the-design-into-one&quot;&gt;Present: connecting the parts of the design into one&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;timestamp: 27 min into the presentation&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The defining structure of SmSchema that brings all of the parts together is called the document.&lt;/li&gt;
  &lt;li&gt;The Document is a “Section of data with a header”
    &lt;ul&gt;
      &lt;li&gt;Defining the semantics of pointers used in the referencing solution. Used to reference other documents.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pointers was a common request for SmSchema
    &lt;ul&gt;
      &lt;li&gt;See details on the implementation of pointer @ min 28&lt;/li&gt;
      &lt;li&gt;The pointer had to provide
        &lt;ul&gt;
          &lt;li&gt;Ownership semantics: unique, weak&lt;/li&gt;
          &lt;li&gt;Locality semantics: local, section, external&lt;/li&gt;
          &lt;li&gt;Used Frozen/Alive concept to determine if the reference is loaded&lt;/li&gt;
          &lt;li&gt;The concept of the section was introduced to SmSchema
            &lt;ul&gt;
              &lt;li&gt;A document is segmented into several memory blocks&lt;/li&gt;
              &lt;li&gt;These memory blocks are called sections and are used for storing things like debug data or GPU data&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;assets/images/posts/the-future-of-scene-description-on-god-of-war\sections.jpg&quot; alt=&quot;slide: Sections of the SmSchema Doc&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;With the Document structure, they were able to design workflows with a minimum amount of transformations from the source data to the run-time data
    &lt;ul&gt;
      &lt;li&gt;The document could be
        &lt;ul&gt;
          &lt;li&gt;Shipping streaming resource&lt;/li&gt;
          &lt;li&gt;A string hash look-up table&lt;/li&gt;
          &lt;li&gt;A source X3D scene graph&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;assets/images/posts/the-future-of-scene-description-on-god-of-war\data-transform.jpg&quot; alt=&quot;slide: Transforming data from source to run-time&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;looking-into-the-future-many-opportunities-still-remain&quot;&gt;Looking into the future: many opportunities still remain&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;timestamp: 37 min into the presentation&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Current and future research
&lt;img src=&quot;assets/images/posts/the-future-of-scene-description-on-god-of-war\wip.jpg&quot; alt=&quot;slide: SmSchema architecture high level Final&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Challenges with external pointer resolution
    &lt;ul&gt;
      &lt;li&gt;Who is responsible for resolving? 
&lt;img src=&quot;assets/images/posts/the-future-of-scene-description-on-god-of-war\external-pointers.jpg&quot; alt=&quot;slide: Frozen external pointers&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;This led to the creation of a data structure for arbitrating external pointer resolution called the “document store”
    &lt;ul&gt;
      &lt;li&gt;The document arbitration takes a form of transaction
&lt;img src=&quot;assets/images/posts/the-future-of-scene-description-on-god-of-war\document-store.jpg&quot; alt=&quot;slide: Document store transactions&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The combination of the Document Store and Streaming Policies could produce complex decision-making behavior for streaming resources&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;font-style: normal;font-size: 26px;margin-left: 32px;font-family: Consolas, 'Times New Roman', Verdana;border-left: 4px solid #3a5ebf;padding-left: 20px;&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&quot;Solutions have to be driven by use case, introduced with scrutiny, and solve a domain of problems evidently and clearly.&quot;
&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;lessons-weve-learned&quot;&gt;Lessons we’ve learned&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;timestamp: 41 min into the presentation&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;While answering what is the future of Scene Description on “God of War”
    &lt;ul&gt;
      &lt;li&gt;They understood that there are other questions that they need to answer before answering the original question
        &lt;ul&gt;
          &lt;li&gt;What are the primitives used in the design of
            &lt;ul&gt;
              &lt;li&gt;The engine&lt;/li&gt;
              &lt;li&gt;The workflows&lt;/li&gt;
              &lt;li&gt;The formats&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;font-style: normal;font-size: 26px;margin-left: 32px;font-family: Consolas, 'Times New Roman', Verdana;border-left: 4px solid #3a5ebf;padding-left: 20px;&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&quot;Our goal was never to predispose ourselves to a particulate design. The future of scene description is not a data structure, it’s not a design pattern; it’s a set of questions that we need to be able to answer about our content.&quot;
&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/the-future-of-scene-description-on-god-of-war\takeaway.jpg&quot; alt=&quot;slide: takeaway&quot; width=&quot;700&quot; /&gt;&lt;/p&gt;

&lt;div style=&quot;background-color:#FFFF94;border-left: 18px solid #ffff48;padding-left: 50px;&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;These notes are just the main ideas of the talk. They don’t contain anecdotes and examples. If you want to learn more, I would advise watching the talk on the &lt;a href=&quot;https://www.gdcvault.com/play/1025969/The-Future-of-Scene-Description&quot;&gt;GDC Vault&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-toolsmiths&quot;&gt;The Toolsmiths&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://thetoolsmiths.org/assets/thetoolsmiths_cover_1000x2881.png&quot; alt=&quot;The Toolsmiths logo&quot; width=&quot;700&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I took these notes as part of our little “Book Club” for GDC Vault Videos &lt;a href=&quot;http://thetoolsmiths.org/vault_club&quot;&gt;The Toolsmiths #vault club&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Koray Hagen&lt;/strong&gt; is a member of the &lt;a href=&quot;http://thetoolsmiths.org/&quot;&gt;Toolsmiths&lt;/a&gt; community. The Toolsmiths are a community of Game Tool Developers that are passionate about improving the way people make games.&lt;/p&gt;

&lt;p&gt;Join us on &lt;a href=&quot;http://thetoolsmiths.org/join_slack_team&quot;&gt;Slack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Join us on &lt;a href=&quot;https://twitter.com/thetoolsmiths&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025969/The-Future-of-Scene-Description&quot;&gt;The Future of Scene Description on ‘God of War’&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Slides for &lt;a href=&quot;https://www.gdcvault.com/play/1026345/The-Future-of-Scene-Description&quot;&gt;The Future of Scene Description on ‘God of War’&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;related-blog-links&quot;&gt;Related Blog Links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Notes for &lt;a href=&quot;http://victorstepanov.github.io//2018-10-07-tools-tutorial-day-a-tale-of-three-data-schemas&quot;&gt;GDC 2018 Tools Tutorial Day: A Tale of Three Data Schemas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;related-talks&quot;&gt;Related talks&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025284/Tools-Tutorial-Day-A-Tale&quot;&gt;GDC 2018 Tools Tutorial Day: A Tale of Three Data Schemas&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gdcvault.com/play/1015531/Developing-Imperfect-Software-How-to&quot;&gt;GDC 2012 Developing Imperfect Software: How to Prepare for Development Pipeline Failure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Victor Stepanov</name></author><category term="GDC" /><category term="data" /><category term="determinism" /><category term="ddl" /><summary type="html">TLDW Summary: This talk sheds light on the decisions that were made by the Santa Monica Studio’s engine team while tackling the problems of time and complexity in transforming source data into game-ready data. Keywords Data Design Data Duality Scene Description Data Definition Language (DDL) Nondeterminism Presentation Time Stamps at min 1 Backgound: Game Content Pipeline at min 16 Past: Redefining SmSchema at min 20 Present: A view after years of investment at min 27 Present: Connecting the parts of the design into one at min 37 Looking into the future: many opportunities still remain at min 41 Lessons we’ve learned at min 43 Q&amp;amp;A Backgound: Game Content Pipeline timestamp: 1 min into the presentation God of War data breakdown What Source Data and Run-time data have in common The design philosophy was inspired by the scene description from the film industry Patch size was a common enemy Nondeterminism made patch sizes huge Patching was always an afterthought. Parts of the run-time was an afterthought. Exploring data formats to find a better way 2 types of explicit data formats Low level: FlatBuffers, ProtocolBuffers Higher level: COLLADA and USD None satisfied the requirements This was the catalyst for the SmSchema Data Definition Language The SmSchema proof of concept had 3 main parts The definition itself C++ code generation with (Jinja Python) Sterilization into JSON The first attempt to apply it to a real-world problem showed that the mental model that they had envisioned had missing parts Past: Redefining SmSchema timestamp: 16 min into the presentation Decided to use the serialization as an anchor point to design around The redesign started with laying down the foundation with first-prenciples Wanted to get away from a JSON-based Language Issues with Maya scalability brought more questions that needed answers Present: A view after years of investment timestamp: 20 min into the presentation The DDL was inspired by Insomniac’s DDL Used ANTLR for language definition Process of code generation Used special Compile-Time Type Info (CTTI) to decouple the DDL and the code generation Used a functional approach to make it easier to generate code to any current or future target Used special metadata in the form of annotations to enable user-driven code generation without making changes in the parser Serialization formats JSON - Human readable for merging, diffing and fixing issues Leverage open source tools and libs Binary - For performance &amp;amp; compression Experimenting with MsgPack to encode large assets X3D scene loader increased performance by an order of magnitude while saving and loading Present: connecting the parts of the design into one timestamp: 27 min into the presentation The defining structure of SmSchema that brings all of the parts together is called the document. The Document is a “Section of data with a header” Defining the semantics of pointers used in the referencing solution. Used to reference other documents. Pointers was a common request for SmSchema See details on the implementation of pointer @ min 28 The pointer had to provide Ownership semantics: unique, weak Locality semantics: local, section, external Used Frozen/Alive concept to determine if the reference is loaded The concept of the section was introduced to SmSchema A document is segmented into several memory blocks These memory blocks are called sections and are used for storing things like debug data or GPU data With the Document structure, they were able to design workflows with a minimum amount of transformations from the source data to the run-time data The document could be Shipping streaming resource A string hash look-up table A source X3D scene graph Looking into the future: many opportunities still remain timestamp: 37 min into the presentation Current and future research Challenges with external pointer resolution Who is responsible for resolving? This led to the creation of a data structure for arbitrating external pointer resolution called the “document store” The document arbitration takes a form of transaction The combination of the Document Store and Streaming Policies could produce complex decision-making behavior for streaming resources &quot;Solutions have to be driven by use case, introduced with scrutiny, and solve a domain of problems evidently and clearly.&quot; Lessons we’ve learned timestamp: 41 min into the presentation While answering what is the future of Scene Description on “God of War” They understood that there are other questions that they need to answer before answering the original question What are the primitives used in the design of The engine The workflows The formats &quot;Our goal was never to predispose ourselves to a particulate design. The future of scene description is not a data structure, it’s not a design pattern; it’s a set of questions that we need to be able to answer about our content.&quot; These notes are just the main ideas of the talk. They don’t contain anecdotes and examples. If you want to learn more, I would advise watching the talk on the GDC Vault. The Toolsmiths I took these notes as part of our little “Book Club” for GDC Vault Videos The Toolsmiths #vault club Koray Hagen is a member of the Toolsmiths community. The Toolsmiths are a community of Game Tool Developers that are passionate about improving the way people make games. Join us on Slack. Join us on Twitter. Links The Future of Scene Description on ‘God of War’ Slides for The Future of Scene Description on ‘God of War’ Related Blog Links Notes for GDC 2018 Tools Tutorial Day: A Tale of Three Data Schemas Related talks GDC 2018 Tools Tutorial Day: A Tale of Three Data Schemas GDC 2012 Developing Imperfect Software: How to Prepare for Development Pipeline Failure</summary></entry><entry><title type="html">Notes for “Bungie’s Force Multipliers - Production Engineers” GDC2019</title><link href="/http://victorstepanov.github.io/gdc2019-bungie-s-force-multipliers-production-engineers" rel="alternate" type="text/html" title="Notes for &quot;Bungie's Force Multipliers - Production Engineers&quot; GDC2019" /><published>2019-05-25T18:00:00-07:00</published><updated>2019-05-25T18:00:00-07:00</updated><id>/http://victorstepanov.github.io/gdc2019-bungie-s-force-multipliers-production-engineers</id><content type="html" xml:base="/http://victorstepanov.github.io/gdc2019-bungie-s-force-multipliers-production-engineers">&lt;p&gt;&lt;strong&gt;TLDW Summary&lt;/strong&gt;: How Bungie organized a dedicated task force of engineers to stay on top of production challenges, blocking issues and shielding Tech-Artists and Engineers from random support requests.&lt;/p&gt;

&lt;h2 id=&quot;keywords&quot;&gt;Keywords&lt;/h2&gt;
&lt;div class=&quot;keyword-container&quot;&gt;
&lt;ul class=&quot;keyword-container&quot;&gt;
&lt;li&gt;Support&lt;/li&gt;
&lt;li&gt;Tools Role&lt;/li&gt;
&lt;li&gt;Production&lt;/li&gt;
&lt;/ul&gt;
&lt;style&gt;
    .keyword-container &gt; ul
    {
        font-size: 16px;
        list-style-type: none;
        padding:15px;
    }
    .keyword-container &gt; li
    {
        background-color:#f3f3f3;
        display : inline;
        padding:5px;
        margin:2px;
        margin-bottom: 100px;
        border-radius: 5px;
    }
&lt;/style&gt;
&lt;/div&gt;

&lt;h2 id=&quot;presentation-table-of-contents&quot;&gt;Presentation Table of Contents&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;assets/images/posts/Bungie-s-Force-Multipliers-Production/toc.jpg&quot; alt=&quot;slide: achieving the development vision&quot; width=&quot;700&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;presentation-timestamps&quot;&gt;Presentation Timestamps&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025970/Bungie-s-Force-Multipliers-Production&quot;&gt;at min 1&lt;/a&gt; What is a Production Engineer (PE)?&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025970/Bungie-s-Force-Multipliers-Production&quot;&gt;at min 6&lt;/a&gt; History&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025970/Bungie-s-Force-Multipliers-Production&quot;&gt;at min 10&lt;/a&gt; Training &amp;amp; Specializations&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025970/Bungie-s-Force-Multipliers-Production&quot;&gt;at min 13&lt;/a&gt; Day-to-Day&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025970/Bungie-s-Force-Multipliers-Production&quot;&gt;at min 33&lt;/a&gt; Hiring a Production Engineer&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025970/Bungie-s-Force-Multipliers-Production&quot;&gt;at min 37&lt;/a&gt; Conclusion &amp;amp; Takeaways&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025970/Bungie-s-Force-Multipliers-Production&quot;&gt;at min 38&lt;/a&gt; Q&amp;amp;A&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-a-production-engineer-pe&quot;&gt;What is a Production Engineer (PE)?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;timestamp: 1 min into the presentation&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;PE is a dedicated engineering role that comes to the rescue when a content creator hits an issue that blocks his/her work.&lt;/li&gt;
  &lt;li&gt;PEs also track down the root cause of an issue and bring the issue up to the teams that can fix it.&lt;/li&gt;
  &lt;li&gt;PEs are aware of all of the current issues that are blocking developers in the studio
    &lt;ul&gt;
      &lt;li&gt;they know how to fix the issue&lt;/li&gt;
      &lt;li&gt;they know how to work around the issue&lt;/li&gt;
      &lt;li&gt;they know who is fixing the issue&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The skill set of a PE is a combination of an Engineer, Tech Artis, Tester, and a Producer&lt;/li&gt;
  &lt;li&gt;PEs look for possible inefficiencies in the workflows of devs that are getting blocked&lt;/li&gt;
  &lt;li&gt;PEs spot workflow automation potential&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;history&quot;&gt;History&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;timestamp: 6 min into the presentation&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the PE role was formed from a need to have a dedicated person help with random technical issues on the development team&lt;/li&gt;
  &lt;li&gt;there were several gaps in the production knowledge base:
    &lt;ul&gt;
      &lt;li&gt;missing tools documentation&lt;/li&gt;
      &lt;li&gt;missing workflow documentation&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;assets/images/posts/Bungie-s-Force-Multipliers-Production/no-docs-for-tools.jpg&quot; alt=&quot;slide: Gap: No Docs for tools&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;when the PE team was formed there were about 3-4 PEs&lt;/li&gt;
  &lt;li&gt;Bungie tries to keep the PE ratio to 1:20 users&lt;/li&gt;
  &lt;li&gt;PEs should have the following traits
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;assets/images/posts/Bungie-s-Force-Multipliers-Production/unique-experiences.jpg&quot; alt=&quot;slide: Unique Experiences&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Diverse Backgrounds
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;assets/images/posts/Bungie-s-Force-Multipliers-Production/diverse-background-sills.jpg&quot; alt=&quot;slide: diverse background sills&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;training--specializations&quot;&gt;Training &amp;amp; Specializations&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;timestamp: 10 min into the presentation&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;PEs have a training regimen for new hires
    &lt;ul&gt;
      &lt;li&gt;a PEs from different teams train the new hire&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;assets/images/posts/Bungie-s-Force-Multipliers-Production/pe-training.jpg&quot; alt=&quot;slide: pe training&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;a PE is a generalist but usually will specialize in a particular area of the game production&lt;/li&gt;
  &lt;li&gt;PEs are also responsible for bringing up to speed new hires in the “users” team&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;day-to-day&quot;&gt;Day-to-Day&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;timestamp: 13 min into the presentation&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;there is usually a PE in walking distance from a Content Creator&lt;/li&gt;
  &lt;li&gt;details on managing Special Email Support list and issue tickets &lt;a href=&quot;https://www.gdcvault.com/play/1025970/Bungie-s-Force-Multipliers-Production&quot;&gt;at min 15&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;about 15% of issues need to be escalated beyond the PE team&lt;/li&gt;
  &lt;li&gt;PEs help Tech-Artists and Engineers focus on their primary work duties, thus maximize the effectiveness of those teams
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;assets/images/posts/Bungie-s-Force-Multipliers-Production/a-tas-time.jpg&quot; alt=&quot;slide: a TA's time&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;PEs can temporarily act as a substitute of a Content Creator and step into that role knowing the process and workflows&lt;/li&gt;
  &lt;li&gt;PEs are in a constant search for the underlying issue
    &lt;ul&gt;
      &lt;li&gt;is it workflow related?&lt;/li&gt;
      &lt;li&gt;is it tool related?&lt;/li&gt;
      &lt;li&gt;is there enough staff?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;20% of a PE’s time is spent in projects that solve small to mid-sized issues that the engineers don’t have time to address
    &lt;ul&gt;
      &lt;li&gt;examples:
        &lt;ul&gt;
          &lt;li&gt;BungieLauncher&lt;/li&gt;
          &lt;li&gt;Cleanup of old and not used content&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;hiring-a-production-engineer&quot;&gt;Hiring a Production Engineer&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;timestamp: 33 min into the presentation&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;key skills
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;assets/images/posts/Bungie-s-Force-Multipliers-Production/what-to-look-for-when-hiring-a-pe.jpg&quot; alt=&quot;slide: what to look for when hiring a pe&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;“foot in the door” type of a position - not a bad thing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;qa&quot;&gt;Q&amp;amp;A&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;timestamp: 38 min into the presentation&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it is part of a PE’s job to drive cultural change
    &lt;ul&gt;
      &lt;li&gt;like documentation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;when the PE team was set up the hiring was done internally&lt;/li&gt;
  &lt;li&gt;PE’s time is organized depending on the situation&lt;/li&gt;
  &lt;li&gt;it is vital for a PE to attend retrospectives&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;background-color:#FFFF94;border-left: 18px solid #ffff48;padding-left: 50px;&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;These notes are just the main ideas of the talk. They don’t contain anecdotes and examples. If you want to learn more, I would advise watching the talk on the &lt;a href=&quot;https://www.gdcvault.com/play/1025969/The-Future-of-Scene-Description&quot;&gt;GDC Vault&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-toolsmiths&quot;&gt;The Toolsmiths&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://thetoolsmiths.org/assets/thetoolsmiths_cover_1000x2881.png&quot; alt=&quot;The Toolsmiths logo&quot; width=&quot;700&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I took these notes as part of our little “Book Club” for GDC Vault Videos &lt;a href=&quot;http://thetoolsmiths.org/vault_club&quot;&gt;The Toolsmiths #vault club&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jo King-Yost&lt;/strong&gt; is a member of the &lt;a href=&quot;http://thetoolsmiths.org/&quot;&gt;Toolsmiths&lt;/a&gt; community. The Toolsmiths are a community of Game Tool Developers that are passionate about improving the way people make games.&lt;/p&gt;

&lt;p&gt;Join us on &lt;a href=&quot;http://thetoolsmiths.org/join_slack_team&quot;&gt;Slack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Join us on &lt;a href=&quot;https://twitter.com/thetoolsmiths&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025970/Bungie-s-Force-Multipliers-Production&quot;&gt;GDC 2019 Bungie’s Force Multipliers: Production Engineers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Slides for &lt;a href=&quot;https://www.gdcvault.com/play/1026530/Bungie-s-Force-Multipliers-Production&quot;&gt;GDC 2019 Bungie’s Force Multipliers: Production Engineers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;related-blog-links&quot;&gt;Related Blog Links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Notes for &lt;a href=&quot;http://victorstepanov.github.io//gdc2019-pipeline-support-for-feature-branches-in-destiny&quot;&gt;GDC 2019 Pipeline Support for Feature Branches in ‘Destiny’&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;related-talks&quot;&gt;Related talks&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025992/Pipeline-Support-for-Feature-Branches&quot;&gt;GDC 2019 Pipeline Support for Feature Branches in ‘Destiny’&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/browse/gdc-19/play/1025807&quot;&gt;GDC 2019 Tools Tutorial Day: Tooling for Small Team Workflows&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/browse/gdc-18/play/1025252/Teams-Are-Stronger-Than-Heroes&quot;&gt;GDC 2018 Teams Are Stronger Than Heroes: Bungie Development Evolved&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/browse/gdc-18/play/1025116/Epic-Sync-Wrangling-the-Work&quot;&gt;GDC 2018 Epic Sync: Wrangling the Work of Highly Interdependent Dev Teams at Bungie&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Victor Stepanov</name></author><category term="GDC" /><category term="Roles" /><category term="Support" /><category term="Production" /><summary type="html">TLDW Summary: How Bungie organized a dedicated task force of engineers to stay on top of production challenges, blocking issues and shielding Tech-Artists and Engineers from random support requests. Keywords Support Tools Role Production Presentation Table of Contents Presentation Timestamps at min 1 What is a Production Engineer (PE)? at min 6 History at min 10 Training &amp;amp; Specializations at min 13 Day-to-Day at min 33 Hiring a Production Engineer at min 37 Conclusion &amp;amp; Takeaways at min 38 Q&amp;amp;A What is a Production Engineer (PE)? timestamp: 1 min into the presentation PE is a dedicated engineering role that comes to the rescue when a content creator hits an issue that blocks his/her work. PEs also track down the root cause of an issue and bring the issue up to the teams that can fix it. PEs are aware of all of the current issues that are blocking developers in the studio they know how to fix the issue they know how to work around the issue they know who is fixing the issue The skill set of a PE is a combination of an Engineer, Tech Artis, Tester, and a Producer PEs look for possible inefficiencies in the workflows of devs that are getting blocked PEs spot workflow automation potential History timestamp: 6 min into the presentation the PE role was formed from a need to have a dedicated person help with random technical issues on the development team there were several gaps in the production knowledge base: missing tools documentation missing workflow documentation when the PE team was formed there were about 3-4 PEs Bungie tries to keep the PE ratio to 1:20 users PEs should have the following traits Diverse Backgrounds Training &amp;amp; Specializations timestamp: 10 min into the presentation PEs have a training regimen for new hires a PEs from different teams train the new hire a PE is a generalist but usually will specialize in a particular area of the game production PEs are also responsible for bringing up to speed new hires in the “users” team Day-to-Day timestamp: 13 min into the presentation there is usually a PE in walking distance from a Content Creator details on managing Special Email Support list and issue tickets at min 15 about 15% of issues need to be escalated beyond the PE team PEs help Tech-Artists and Engineers focus on their primary work duties, thus maximize the effectiveness of those teams PEs can temporarily act as a substitute of a Content Creator and step into that role knowing the process and workflows PEs are in a constant search for the underlying issue is it workflow related? is it tool related? is there enough staff? 20% of a PE’s time is spent in projects that solve small to mid-sized issues that the engineers don’t have time to address examples: BungieLauncher Cleanup of old and not used content Hiring a Production Engineer timestamp: 33 min into the presentation key skills “foot in the door” type of a position - not a bad thing Q&amp;amp;A timestamp: 38 min into the presentation it is part of a PE’s job to drive cultural change like documentation when the PE team was set up the hiring was done internally PE’s time is organized depending on the situation it is vital for a PE to attend retrospectives These notes are just the main ideas of the talk. They don’t contain anecdotes and examples. If you want to learn more, I would advise watching the talk on the GDC Vault. The Toolsmiths I took these notes as part of our little “Book Club” for GDC Vault Videos The Toolsmiths #vault club Jo King-Yost is a member of the Toolsmiths community. The Toolsmiths are a community of Game Tool Developers that are passionate about improving the way people make games. Join us on Slack. Join us on Twitter. Links GDC 2019 Bungie’s Force Multipliers: Production Engineers Slides for GDC 2019 Bungie’s Force Multipliers: Production Engineers Related Blog Links Notes for GDC 2019 Pipeline Support for Feature Branches in ‘Destiny’ Related talks GDC 2019 Pipeline Support for Feature Branches in ‘Destiny’ GDC 2019 Tools Tutorial Day: Tooling for Small Team Workflows GDC 2018 Teams Are Stronger Than Heroes: Bungie Development Evolved GDC 2018 Epic Sync: Wrangling the Work of Highly Interdependent Dev Teams at Bungie</summary></entry><entry><title type="html">Notes for “Pipeline Support for Feature Branches in ‘Destiny’” GDC2019</title><link href="/http://victorstepanov.github.io/gdc2019-pipeline-support-for-feature-branches-in-destiny" rel="alternate" type="text/html" title="Notes for &quot;Pipeline Support for Feature Branches in 'Destiny'&quot; GDC2019" /><published>2019-05-04T18:00:00-07:00</published><updated>2019-05-04T18:00:00-07:00</updated><id>/http://victorstepanov.github.io/gdc2019-pipeline-support-for-feature-branches-in-destiny</id><content type="html" xml:base="/http://victorstepanov.github.io/gdc2019-pipeline-support-for-feature-branches-in-destiny">&lt;h2 id=&quot;tldw-summary&quot;&gt;TLDW Summary:&lt;/h2&gt;
&lt;p&gt;How Bungie created an ecosystem of tools and workflows to allow small teams to quickly iterate on changes without worrying about breaking and blocking other teams.&lt;/p&gt;

&lt;h2 id=&quot;keywords&quot;&gt;Keywords&lt;/h2&gt;
&lt;div class=&quot;keyword-container&quot;&gt;
&lt;ul class=&quot;keyword-container&quot;&gt;
&lt;li&gt;Game Data Merging&lt;/li&gt;
&lt;li&gt;Version Control System&lt;/li&gt;
&lt;li&gt;Branch Integration &lt;/li&gt;
&lt;/ul&gt;
&lt;style&gt;
    .keyword-container &gt; ul
    {
        font-size: 16px;
        list-style-type: none;
        padding:15px;
    }
    .keyword-container &gt; li
    {
        background-color:#f3f3f3;
        display : inline;
        padding:5px;
        margin:2px;
        margin-bottom: 100px;
        border-radius: 5px;
    }
&lt;/style&gt;
&lt;/div&gt;

&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Each P4 branch is about 4 Tb&lt;/li&gt;
  &lt;li&gt;Up to 350 content creators, designers, and engineers working in one branch&lt;/li&gt;
  &lt;li&gt;They use a pre-commit build pipeline - “the Gauntlet”
    &lt;ul&gt;
      &lt;li&gt;Pete Kugler did a talk at &lt;a href=&quot;https://drive.google.com/file/d/1FeZGA-MeuI31Wan9ZVlXmSZ-JrSLgIL2/view?usp=sharing&quot;&gt;GDC2016: Developing a pipeline for managing game stability&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;Pipeline for managing game stability&lt;/li&gt;
          &lt;li&gt;Describes the reason they put the pre-commit system in place&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;They pick stability over iteration speed
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;assets/images/posts/pipeline-support-for-feature-branches/initial-destiny-2-challenges.jpg&quot; alt=&quot;slide: initial Destiny 2 challenges&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Had technical limitations of just simply adding more feature branches
    &lt;ul&gt;
      &lt;li&gt;Not supported by tools&lt;/li&gt;
      &lt;li&gt;More pressure on integration&lt;/li&gt;
      &lt;li&gt;More pressure on build pipeline&lt;/li&gt;
      &lt;li&gt;Couldn’t merge game data&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Definition &lt;strong&gt;“Feature Branch”&lt;/strong&gt; - Branch created for teams to work in without interfering with the stability of the main branch&lt;/li&gt;
  &lt;li&gt;Definition &lt;strong&gt;“Small Team”&lt;/strong&gt; -  group of cross-discipline developer working collaboratively on shared features (strike teams? )&lt;/li&gt;
  &lt;li&gt;The development team was in an environment that would not allow risky feature prototype and development
    &lt;ul&gt;
      &lt;li&gt;Long pre-commit build pipeline throughput&lt;/li&gt;
      &lt;li&gt;Thurow QA testing&lt;/li&gt;
      &lt;li&gt;Fear of creating blockers&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Vision
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;assets/images/posts/pipeline-support-for-feature-branches/auto-integration.jpg&quot; alt=&quot;slide: auto-integration&quot; width=&quot;400&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;assets/images/posts/pipeline-support-for-feature-branches/small-team-development-vision.jpg&quot; alt=&quot;slide: small team development vision&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;QA had the option to use stabilization branch to shield from the auto integrations that were happening&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Had 3 main challenges:
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;assets/images/posts/pipeline-support-for-feature-branches/achieving-the-development-vision.jpg&quot; alt=&quot;slide: achieving the development vision&quot; width=&quot;700&quot; /&gt;
        &lt;ul&gt;
          &lt;li&gt;Focused on semantically merge content to make the lives of content creators easier&lt;/li&gt;
          &lt;li&gt;Focused on making a simple as possible to keep branches in-sync and stable (management tools)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Developers became accustomed to workflow build around having multiple branches per workspace
    &lt;ul&gt;
      &lt;li&gt;Because of the release cycles (having multiple features in progress)&lt;/li&gt;
      &lt;li&gt;Expected to have immediate access to things that are mapped in the workspace&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Source &lt;a href=&quot;http://thetoolsmiths.org/codex/glossary/&quot;&gt;DCC&lt;/a&gt; assets in the same location as the game data
    &lt;ul&gt;
      &lt;li&gt;This made for build branches&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Moving to a streamed depot was a risk that the dev team didn’t want to take
    &lt;ul&gt;
      &lt;li&gt;Compromise by adapting the current system to behave like Streams&lt;/li&gt;
      &lt;li&gt;Had plans to move to Streams for next project&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;scaling-the-infrastructure&quot;&gt;Scaling the Infrastructure&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Needed to implement Centralized Branch Authority
    &lt;ul&gt;
      &lt;li&gt;Which was available as part P4 Stream&lt;/li&gt;
      &lt;li&gt;Used the build farm DB to be the Branch Authority&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Needed to implement a way to make the branches available on the build farm machines&lt;/li&gt;
  &lt;li&gt;Asset pipeline changes
    &lt;ul&gt;
      &lt;li&gt;For details checkout Brandon Moro’s talk: &lt;a href=&quot;https://www.gdcvault.com/play/1025430/Tools-Tutorial-Day-Bungie-s&quot;&gt;GDC 2018 Tools Tutorial Day: Bungie’s Asset Pipeline: ‘Destiny 2’ and Beyond&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Need to enable the scaling of the Asset Cache
        &lt;ul&gt;
          &lt;li&gt;Used to be one/two machine(s) per branch&lt;/li&gt;
          &lt;li&gt;Decoupled storage HW from the service HW&lt;/li&gt;
          &lt;li&gt;The service was made stateless
            &lt;ul&gt;
              &lt;li&gt;So service could handle different branches&lt;/li&gt;
              &lt;li&gt;The state management was moved into Redis&lt;/li&gt;
              &lt;li&gt;Logging was moved into elasticsearch&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;To setup, branch used a lazy copy of that branch
    &lt;ul&gt;
      &lt;li&gt;The branch was 4 Tb&lt;/li&gt;
      &lt;li&gt;On the backend use deduplication to not store the same data&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;implementing-content-merging&quot;&gt;Implementing Content Merging&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Propper game data merging
    &lt;ul&gt;
      &lt;li&gt;Needs to know the semantics of the data&lt;/li&gt;
      &lt;li&gt;Used C# for the content merge tool (some screenshots &lt;a href=&quot;https://www.gdcvault.com/play/1025992/Pipeline-Support-for-Feature-Branches&quot;&gt;at min 40&lt;/a&gt;)
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;assets/images/posts/pipeline-support-for-feature-branches/content-merge-tool.jpg&quot; alt=&quot;slide: content merge tool&quot; width=&quot;400&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Tracked auto-resolve\ conflict ratio&lt;/li&gt;
      &lt;li&gt;Used TDD and recorded mergers that produced conflict to analyze&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025992/Pipeline-Support-for-Feature-Branches&quot;&gt;at min 31&lt;/a&gt; notes on how to implement merging of game data&lt;/li&gt;
  &lt;li&gt;Were able to reach 80% auto-conflict resolution rate&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;flow-of-changes&quot;&gt;Flow of changes&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Created custom tool “Team Sync” to view of a users branch state
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;assets/images/posts/pipeline-support-for-feature-branches/team-sync.jpg&quot; alt=&quot;slide: Team Sync tool&quot; width=&quot;400&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;Shows
        &lt;ul&gt;
          &lt;li&gt;Check-ins&lt;/li&gt;
          &lt;li&gt;Bugs&lt;/li&gt;
          &lt;li&gt;Builds in progress/finished&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;For more info see &lt;a href=&quot;https://www.gdcvault.com/browse/gdc-19/play/1025807&quot;&gt;GDC 2019 Tools Tutorial Day: Tooling for Small Team Workflows&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Had a special process for automatically integrating into the main branch
    &lt;ul&gt;
      &lt;li&gt;Via a build farm worker&lt;/li&gt;
      &lt;li&gt;Had a special local conflict resolution workflow (when conflicts happened during an integration)&lt;/li&gt;
      &lt;li&gt;After conflict resolution, automated testing would occur
        &lt;ul&gt;
          &lt;li&gt;If something was broken, the team had the ability to login to a remote worker and fix the issue
            &lt;ul&gt;
              &lt;li&gt;The worker would have all the dev tools ready&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;All in all, Pete says that this was a great investment for the dev team&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;background-color:#FFFF94;border-left: 18px solid #ffff48;padding-left: 50px;&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;These notes are just the main ideas of the talk. They don’t contain anecdotes and examples. If you want to learn more, I would advise watching the talk on the &lt;a href=&quot;https://www.gdcvault.com/play/1025969/The-Future-of-Scene-Description&quot;&gt;GDC Vault&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-toolsmiths&quot;&gt;The Toolsmiths&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://thetoolsmiths.org/assets/thetoolsmiths_cover_1000x2881.png&quot; alt=&quot;The Toolsmiths logo&quot; width=&quot;700&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I took these notes as part of our little “Book Club” for GDC Vault Videos &lt;a href=&quot;http://thetoolsmiths.org/vault_club&quot;&gt;The Toolsmiths #vault club&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pete Kugler&lt;/strong&gt; is a member of the &lt;a href=&quot;http://thetoolsmiths.org/&quot;&gt;Toolsmiths&lt;/a&gt; community. The Toolsmiths are a community of Game Tool Developers that are passionate about improving the way people make games.&lt;/p&gt;

&lt;p&gt;Join us on &lt;a href=&quot;http://thetoolsmiths.org/join_slack_team&quot;&gt;Slack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Join us on &lt;a href=&quot;https://twitter.com/thetoolsmiths&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025992/Pipeline-Support-for-Feature-Branches&quot;&gt;GDC 2019 Pipeline Support for Feature Branches in ‘Destiny’&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;related-blog-links&quot;&gt;Related Blog Links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Notes for &lt;a href=&quot;http://victorstepanov.github.io//gdc2019-bungie-s-force-multipliers-production-engineers&quot;&gt;GDC 2019 Bungie’s Force Multipliers: Production Engineers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;related-talks&quot;&gt;Related talks&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;2016 talk by Pete Kugler - &lt;a href=&quot;https://drive.google.com/file/d/1FeZGA-MeuI31Wan9ZVlXmSZ-JrSLgIL2/view?usp=sharing&quot;&gt;GDC 2016 Developing a pipeline for managing game stability&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/browse/gdc-19/play/1025807&quot;&gt;GDC 2019 Tools Tutorial Day: Tooling for Small Team Workflows&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025380/Tools-Tutorial-Day-Shipping-Call&quot;&gt;GDC 2018 Tools Tutorial Day: Shipping ‘Call of Duty’&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025430/Tools-Tutorial-Day-Bungie-s&quot;&gt;GDC 2018 Tools Tutorial Day: Bungie’s Asset Pipeline: ‘Destiny 2’ and Beyond&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=7KXVox0-7lU&quot;&gt;HandmadeCon 2016 - Asset Systems and Scalability&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025970/Bungie-s-Force-Multipliers-Production&quot;&gt;GDC 2019 Bungie’s Force Multipliers: Production Engineers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/browse/gdc-18/play/1025252/Teams-Are-Stronger-Than-Heroes&quot;&gt;GDC 2018 Teams Are Stronger Than Heroes: Bungie Development Evolved&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/browse/gdc-18/play/1025116/Epic-Sync-Wrangling-the-Work&quot;&gt;GDC 2018 Epic Sync: Wrangling the Work of Highly Interdependent Dev Teams at Bungie&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Victor Stepanov</name></author><category term="GDC" /><category term="version_control" /><category term="game_data_merging" /><summary type="html">TLDW Summary: How Bungie created an ecosystem of tools and workflows to allow small teams to quickly iterate on changes without worrying about breaking and blocking other teams. Keywords Game Data Merging Version Control System Branch Integration Intro Each P4 branch is about 4 Tb Up to 350 content creators, designers, and engineers working in one branch They use a pre-commit build pipeline - “the Gauntlet” Pete Kugler did a talk at GDC2016: Developing a pipeline for managing game stability Pipeline for managing game stability Describes the reason they put the pre-commit system in place They pick stability over iteration speed Had technical limitations of just simply adding more feature branches Not supported by tools More pressure on integration More pressure on build pipeline Couldn’t merge game data Definition “Feature Branch” - Branch created for teams to work in without interfering with the stability of the main branch Definition “Small Team” - group of cross-discipline developer working collaboratively on shared features (strike teams? ) The development team was in an environment that would not allow risky feature prototype and development Long pre-commit build pipeline throughput Thurow QA testing Fear of creating blockers Vision QA had the option to use stabilization branch to shield from the auto integrations that were happening Had 3 main challenges: Focused on semantically merge content to make the lives of content creators easier Focused on making a simple as possible to keep branches in-sync and stable (management tools) Developers became accustomed to workflow build around having multiple branches per workspace Because of the release cycles (having multiple features in progress) Expected to have immediate access to things that are mapped in the workspace Source DCC assets in the same location as the game data This made for build branches Moving to a streamed depot was a risk that the dev team didn’t want to take Compromise by adapting the current system to behave like Streams Had plans to move to Streams for next project Scaling the Infrastructure Needed to implement Centralized Branch Authority Which was available as part P4 Stream Used the build farm DB to be the Branch Authority Needed to implement a way to make the branches available on the build farm machines Asset pipeline changes For details checkout Brandon Moro’s talk: GDC 2018 Tools Tutorial Day: Bungie’s Asset Pipeline: ‘Destiny 2’ and Beyond Need to enable the scaling of the Asset Cache Used to be one/two machine(s) per branch Decoupled storage HW from the service HW The service was made stateless So service could handle different branches The state management was moved into Redis Logging was moved into elasticsearch To setup, branch used a lazy copy of that branch The branch was 4 Tb On the backend use deduplication to not store the same data Implementing Content Merging Propper game data merging Needs to know the semantics of the data Used C# for the content merge tool (some screenshots at min 40) Tracked auto-resolve\ conflict ratio Used TDD and recorded mergers that produced conflict to analyze at min 31 notes on how to implement merging of game data Were able to reach 80% auto-conflict resolution rate Flow of changes Created custom tool “Team Sync” to view of a users branch state Shows Check-ins Bugs Builds in progress/finished For more info see GDC 2019 Tools Tutorial Day: Tooling for Small Team Workflows Had a special process for automatically integrating into the main branch Via a build farm worker Had a special local conflict resolution workflow (when conflicts happened during an integration) After conflict resolution, automated testing would occur If something was broken, the team had the ability to login to a remote worker and fix the issue The worker would have all the dev tools ready All in all, Pete says that this was a great investment for the dev team These notes are just the main ideas of the talk. They don’t contain anecdotes and examples. If you want to learn more, I would advise watching the talk on the GDC Vault. The Toolsmiths I took these notes as part of our little “Book Club” for GDC Vault Videos The Toolsmiths #vault club Pete Kugler is a member of the Toolsmiths community. The Toolsmiths are a community of Game Tool Developers that are passionate about improving the way people make games. Join us on Slack. Join us on Twitter. Links GDC 2019 Pipeline Support for Feature Branches in ‘Destiny’ Related Blog Links Notes for GDC 2019 Bungie’s Force Multipliers: Production Engineers Related talks 2016 talk by Pete Kugler - GDC 2016 Developing a pipeline for managing game stability GDC 2019 Tools Tutorial Day: Tooling for Small Team Workflows GDC 2018 Tools Tutorial Day: Shipping ‘Call of Duty’ GDC 2018 Tools Tutorial Day: Bungie’s Asset Pipeline: ‘Destiny 2’ and Beyond HandmadeCon 2016 - Asset Systems and Scalability GDC 2019 Bungie’s Force Multipliers: Production Engineers GDC 2018 Teams Are Stronger Than Heroes: Bungie Development Evolved GDC 2018 Epic Sync: Wrangling the Work of Highly Interdependent Dev Teams at Bungie</summary></entry><entry><title type="html">Toolsmiths GDC 2019 Guide</title><link href="/http://victorstepanov.github.io/toolsmiths-gdc-2019-guide" rel="alternate" type="text/html" title="Toolsmiths GDC 2019 Guide" /><published>2019-03-06T02:00:00-08:00</published><updated>2019-03-06T02:00:00-08:00</updated><id>/http://victorstepanov.github.io/toolsmiths-gdc-2019-guide</id><content type="html" xml:base="/http://victorstepanov.github.io/toolsmiths-gdc-2019-guide">&lt;p&gt;I went over many sessions for this year’s GDC and created a list talks that would peek the interest of a Game Tools Developer.&lt;/p&gt;

&lt;p&gt;This guide can be found &lt;a href=&quot;http://thetoolsmiths.org/2019/03/06/gdc-2019-toolsmiths-guide/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name>Victor Stepanov</name></author><summary type="html">There are around 760+ sessions/tutorials/events at GDC 2019, finding the sessions that a tools developer would be interested in takes time. Below you will find a list of sessions that can become the base for your tools developer GDC 2019 experience, whether you plan on attending or you will be viewing post-factum.</summary></entry><entry><title type="html">The origin of the path</title><link href="/http://victorstepanov.github.io/origin-of-the-path" rel="alternate" type="text/html" title="The origin of the path" /><published>2019-02-27T17:00:00-08:00</published><updated>2019-02-27T17:00:00-08:00</updated><id>/http://victorstepanov.github.io/origin-of-the-path</id><content type="html" xml:base="/http://victorstepanov.github.io/origin-of-the-path">&lt;p&gt;After finishing the work on the first draft of the &lt;a href=&quot;http://thetoolsmiths.org/codex/learning_paths/tools_engineer_learning_path&quot;&gt;Tools Engineer Learning Path&lt;/a&gt;, I decided to write a short story behind the learning path and the thought process I went through when I was creating this resource.&lt;/p&gt;

&lt;p&gt;When I got into game development as a TE (Tools Engineer), I didn’t have a special education to suit the needs of this profession. I was hungry for knowledge and trying to find as much information I could, about tools and game development in general. It wasn’t easy to find information about tools in games. Maybe I wasn’t searching for the right things. Anyway, about one or two years into my career in games one of my colleagues introduced me to the &lt;a href=&quot;http://thetoolsmiths.org&quot;&gt;Toolsmiths website&lt;/a&gt; and the &lt;a href=&quot;http://thetoolsmiths.org/join_slack_team&quot;&gt;Toolsmiths Slack channel&lt;/a&gt;. I was thrilled with the amount of information I got from the &lt;a href=&quot;http://thetoolsmiths.org/archive&quot;&gt;Toolsmiths blog archive&lt;/a&gt; and the Slack conversations.&lt;/p&gt;

&lt;p&gt;One day while I was exploring the Toolsmiths website I found out that &lt;a href=&quot;https://twitter.com/gorlak&quot;&gt;Geoff Evans&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/davidlightbown&quot;&gt;David Lightbown&lt;/a&gt; did &lt;a href=&quot;http://thetoolsmiths.org/podcast&quot;&gt;Toolsmiths podcast&lt;/a&gt;. On one of the episodes, Geoff was talking about the GDC Tools Roundtable that he hosted. He talked about starting a number of initiatives for the Toolsmiths community, one which was a Game Tools Development Wiki that would contain information, links to articles and videos about game tools development. To say that I was excited would be an understatement especially knowing that this podcast aired four years ago. I was thinking that someone was working on this treasure trove of information for four years. Not long after I found out that no one executed on starting to gather knowledge into this Wiki. I thought to myself that this would be an excellent opportunity to help the tools community and learn at the same time. Around this time Geoff was porting the Toolsmiths’s website from some other blogging framework (I believe it was WordPress) to the GitHub static pages. Geoff finished the port and published it on &lt;a href=&quot;https://github.com/TheToolsmiths/TheToolsmiths.github.io&quot;&gt;GitHub&lt;/a&gt;. I started to help him with the website. The default theme of the to Toolsmiths website was lost during the port, and I decided to bring back the original look of the site. When I was done with that, I decided to start working on the Toolsmiths Wiki which is now known as the to &lt;a href=&quot;http://thetoolsmiths.org/codex/&quot;&gt;Toolsmiths Codex&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finishing the first version of the &lt;a href=&quot;http://thetoolsmiths.org/2018/03/16/toolsmiths-codex-launch/&quot;&gt;Codex about a year ago&lt;/a&gt;. I wasn’t 100% satisfied with it. I was feeling that something was missing. The Codex was a big collection of interesting articles videos and GDC links, but they were organized only by a couple of categories. While going through the recruiting process at Infinity Ward, I learned of Geoff’s &lt;a href=&quot;http://software.gorlak.org/recruiting/2018/07/13/tools-engineer-faq&quot;&gt;recruiting FAQ&lt;/a&gt; and the &lt;a href=&quot;https://gist.github.com/gorlak/1a0747efe88c5e3998144c5787d090ec&quot;&gt;Tools Engineer Checklist&lt;/a&gt;. Geoff divided the Tool Engineering role into three main disciplines: Content Editing Workflow, Content Build Pipeline, Reliability &amp;amp; Infrastructure. He had also created the Tools Engineering Checklist that contains subjects of interest that TEs should pursue to become masters of their trade. This got me thinking about which parts of the Codex and which parts of the checklist would map to which TE discipline. I started to create a mind map of all of the skills that a TE would need. The main categories  included: core software development skills, core computer science skills, core game developer skills, and core game tools development skills. This list of subjects would make the base of what a TE would need. Connecting all of these dots formed the first draft of the &lt;a href=&quot;http://thetoolsmiths.org/codex/learning_paths/tools_engineer_learning_path&quot;&gt;Tools Engineer Learning Path&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I plan to continue to updated polish it and improve it over the following years to create the ultimate resource for TEs. I’m sure that a TE at any level can find interesting nuggets of information that would help them become a better version of themselves.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://thetoolsmiths.org/codex/learning_paths/tools_engineer_learning_path&quot;&gt;Tools Engineer Learning Path&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://software.gorlak.org/recruiting/2018/07/13/tools-engineer-faq&quot;&gt;Tools Engineer Recruiting FAQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/gorlak/1a0747efe88c5e3998144c5787d090ec&quot;&gt;Tools Engineer Checklist&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thetoolsmiths.org/2018/03/16/toolsmiths-codex-launch/&quot;&gt;The Toolsmiths Codex&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Victor Stepanov</name></author><category term="Game_Tools_Dev" /><summary type="html">After finishing the work on the first draft of the Tools Engineer Learning Path, I decided to write a short story behind the learning path and the thought process I went through when I was creating this resource. When I got into game development as a TE (Tools Engineer), I didn’t have a special education to suit the needs of this profession. I was hungry for knowledge and trying to find as much information I could, about tools and game development in general. It wasn’t easy to find information about tools in games. Maybe I wasn’t searching for the right things. Anyway, about one or two years into my career in games one of my colleagues introduced me to the Toolsmiths website and the Toolsmiths Slack channel. I was thrilled with the amount of information I got from the Toolsmiths blog archive and the Slack conversations. One day while I was exploring the Toolsmiths website I found out that Geoff Evans and David Lightbown did Toolsmiths podcast. On one of the episodes, Geoff was talking about the GDC Tools Roundtable that he hosted. He talked about starting a number of initiatives for the Toolsmiths community, one which was a Game Tools Development Wiki that would contain information, links to articles and videos about game tools development. To say that I was excited would be an understatement especially knowing that this podcast aired four years ago. I was thinking that someone was working on this treasure trove of information for four years. Not long after I found out that no one executed on starting to gather knowledge into this Wiki. I thought to myself that this would be an excellent opportunity to help the tools community and learn at the same time. Around this time Geoff was porting the Toolsmiths’s website from some other blogging framework (I believe it was WordPress) to the GitHub static pages. Geoff finished the port and published it on GitHub. I started to help him with the website. The default theme of the to Toolsmiths website was lost during the port, and I decided to bring back the original look of the site. When I was done with that, I decided to start working on the Toolsmiths Wiki which is now known as the to Toolsmiths Codex. Finishing the first version of the Codex about a year ago. I wasn’t 100% satisfied with it. I was feeling that something was missing. The Codex was a big collection of interesting articles videos and GDC links, but they were organized only by a couple of categories. While going through the recruiting process at Infinity Ward, I learned of Geoff’s recruiting FAQ and the Tools Engineer Checklist. Geoff divided the Tool Engineering role into three main disciplines: Content Editing Workflow, Content Build Pipeline, Reliability &amp;amp; Infrastructure. He had also created the Tools Engineering Checklist that contains subjects of interest that TEs should pursue to become masters of their trade. This got me thinking about which parts of the Codex and which parts of the checklist would map to which TE discipline. I started to create a mind map of all of the skills that a TE would need. The main categories included: core software development skills, core computer science skills, core game developer skills, and core game tools development skills. This list of subjects would make the base of what a TE would need. Connecting all of these dots formed the first draft of the Tools Engineer Learning Path. I plan to continue to updated polish it and improve it over the following years to create the ultimate resource for TEs. I’m sure that a TE at any level can find interesting nuggets of information that would help them become a better version of themselves. Links Tools Engineer Learning Path Tools Engineer Recruiting FAQ Tools Engineer Checklist The Toolsmiths Codex</summary></entry><entry><title type="html">Roles in Game Tools Development</title><link href="/http://victorstepanov.github.io/tool-development-roles" rel="alternate" type="text/html" title="Roles in Game Tools Development" /><published>2019-01-24T17:00:00-08:00</published><updated>2019-01-24T17:00:00-08:00</updated><id>/http://victorstepanov.github.io/tool-development-roles</id><content type="html" xml:base="/http://victorstepanov.github.io/tool-development-roles">&lt;p&gt;Today in Game Development there are several roles that take part in creating new Game Tools and developing the existing ones. Depending on the number of people in a Game Development team multiple roles may be assigned to one responsible person. It would be challenging if not impossible to find a studio/company that has a dedicated person assigned to each of the roles listed. In this post, I will list the main roles and give them a short definition.&lt;/p&gt;

&lt;div style=&quot;background-color:#FFFF94;border-left: 6px solid #ffff48;&quot;&gt; 
DISCLAIMER: definitions in this post were produced from personal experience, GDC talks, blog posts, looking at job postings and talking with experts. They might differ from your own definitions. 
&lt;/div&gt;

&lt;h2 id=&quot;game-tools-engineering&quot;&gt;Game Tools Engineering&lt;/h2&gt;
&lt;p&gt;The roles involved in creating and maintaining the internal implementations of in-house digital content creation (DCC) tools, the content build pipeline, and the studio infrastructure. Usually, the work that these roles do doesn’t leave the studio’s walls.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/tool_development_roles/tool_engineer_roles.jpg&quot; alt=&quot;Tools Engineering Roles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Generalist Engine Programmer&lt;/i&gt; - in a small team setting the Generalist Engine Programmer knows the engine best and this is the best person to know how to integrate DCC tools and set up the pipeline.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Tools Engineer&lt;/i&gt; - dedicated engineering role responsible for maintaining the tools and pipelines that the game development team uses.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Pipeline Engineer&lt;/i&gt; - responsible for maintaining/evolving the tools and technologies part of the content development pipeline. Collaborating with Technical Artists to create the user-facing parts of the pipeline.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Infrastructure Tools Engineer&lt;/i&gt; - responsible for maintaining/evolving studio services part of Continuous Integration, database health, Version Control and workstation configuration.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;DCC Tools Engineer&lt;/i&gt; - responsible for maintaining/evolving the Game Engine Toolset. Working with Content Creators, Tech Artists, Tech Designers, and the Tool UX team to create the most optimal workflows possible.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Tools Support Specialist&lt;/i&gt; / &lt;i&gt;Production Engineer&lt;/i&gt; - first-line support for tool/pipeline user issues. Knowledge base of known issues, best practises and issue workarounds. The firefighter of game development.&lt;/p&gt;

&lt;h2 id=&quot;technical-art&quot;&gt;Technical Art&lt;/h2&gt;
&lt;p&gt;The part of the Game Development Team that bridges the gap between Engineering and Art.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/tool_development_roles/tech_art_team_roles.jpg&quot; alt=&quot;Tech Art Roles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Technical Artist&lt;/i&gt; - Responsible for tackling technical challenges that an art team can come across. Enables the artists to focus on creating art and not solving technical problems. Use great communication skills to bridge the gap between engineering and art.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;VFX Technical Artist&lt;/i&gt; - Technical artist that focuses on helping the VFX team with VFX tools and workflows. Masters of real-time effects, lighting, and shaders. Coordinates with the Tools User Experience team to provide the best experience possible. Provides feedback to the Render Team.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Pipeline Technical Artist&lt;/i&gt; - Works on streamlining the content build pipeline and workflows within the pipeline. Closely coordinates with the Tools Team to set up efficient asset creation processes.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Technical Animator&lt;/i&gt; - Tech Artist that specializes in development and support of rigging and animation technologies. Closely works with the Tools User Experience team to improve workflows and efficiency.&lt;/p&gt;

&lt;h2 id=&quot;technical-design&quot;&gt;Technical Design&lt;/h2&gt;
&lt;p&gt;The part of the Game Development Team that bridges the gap between Engineering and Design.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/tool_development_roles/tech_design_team_roles.jpg&quot; alt=&quot;Tech Design Roles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Tech Designer&lt;/i&gt; - the tech-savvy designer that helps bridge the gap between design and code. Help define pipelines and workflows for developing game mechanic related content. Talor tool feature request to better suit the non-technical designers.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Tech UI/UX Designer&lt;/i&gt; - Technical Designer that focuses on helping the UI team tackle technical problems of creating menus, navigation, and HUD.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Tech Audio Designer&lt;/i&gt; - Technical Designer that is focused on helping the audio team maintain and develop the audio system of the game engine. Coordinates with the Tools User Experience team to provide the best experience in the audio tools.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Tech Level Designer&lt;/i&gt; - work closely with the Level Design, Tools and Tools UX Teams to create a sublime level editing experience in the engine level editor.&lt;/p&gt;

&lt;h2 id=&quot;game-tools-uiux-and-design&quot;&gt;Game Tools UI/UX and Design&lt;/h2&gt;

&lt;p&gt;The part of the Tools Team that make the Engineers/ Tech Designers/Tech Artists more efficient, the Artist/Designers happier and budget have fewer drains.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/tool_development_roles/ux_team_roles.jpg&quot; alt=&quot;UI/UX and Design Roles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Tools Designer&lt;/i&gt; - Helping the Tools Team concentrate on the engineering side of the tools and pipeline. Spending time at users desks analyzing workflows and pointing out the “best bang for the buck” improvements to the Tools Engineers, Tech Designers, and Tech Artists.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;User Experience Designer&lt;/i&gt; - create and design UI/Workflows for in-house tools. Collaborate with Users and Tech Artists/Tech Designers/Tools Engineers to make the best UX possible.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;User Researcher&lt;/i&gt; - design and conduct research studies on experience and workflow for in-house tools. Outline, communicate research results and provide recommendations.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Tools UI Designer&lt;/i&gt; - responsibilities include: work on the design of Tool UIs; Maintain the Tools UI style guide; Verify that the style guide is properly implemented;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Tech Writer&lt;/i&gt; - the keeper of the studios knowledge base. Enabling quick new hire ramp ups.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Data Analytics Engineer / Tools Analytics&lt;/i&gt; - responsible for setting up Tool statistic gathering and statistical data analysis of tool usage. Coordinates with User Researcher to understand the reasons behind the user’s behaviors and actions.&lt;/p&gt;

&lt;h2 id=&quot;ad-hoc-tool-development&quot;&gt;Ad-hoc Tool Development&lt;/h2&gt;
&lt;p&gt;There is always a lot of work to go around when it comes to tools. When there aren’t enough resources in the Tools/Tech Design/Tech Art Teams other programmers come to help. 
&lt;img src=&quot;assets/images/posts/tool_development_roles/ad_hoc_team_roles.jpg&quot; alt=&quot;Ad-hoc Tools Roles&quot; /&gt;&lt;/p&gt;

&lt;div style=&quot;background-color:#FFFF94;border-left: 6px solid #ffff48;&quot;&gt; 
 Some might think Ad-hoc Tool Development is always a bad thing with issues like coordination/communication, redundant work, bus factor, new tool frameworks to support... But I would disagree. If this is done &lt;b&gt;right&lt;/b&gt; these issues can be avoided and this can be a &lt;b&gt;big help&lt;/b&gt; to the Tools/Tech Design/Tech Art Teams. 
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;This turned out a bit of a laundry list. Anyway, this is a good high-level overview of the game development roles that are involved in creating tools for building amazing interactive experiences. I believe this could be an excellent reference for people that are just starting out in the industry.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gorlak.dev/recruiting/2018/07/13/tools-engineer-faq&quot;&gt;Tools Engineer Recruiting FAQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wiki.polycount.com/wiki/Technical_Art&quot;&gt;Polycount wiki - Technical Art&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1022337/Tools-Development-at-Ubisoft-Building&quot;&gt;GDC 2015: Tools Development at Ubisoft: Building a Shared Vision to Improve the User Experience&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thetoolsmiths.org/2009/02/03/the-problem-with-ad-hoc-tools-teams/&quot;&gt;The Problem With Ad-Hoc Tools Teams&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thetoolsmiths.org/2009/02/16/best-of-comments-ad-hoc-and-gdc/&quot;&gt;Best of Comments: Ad-hoc and GDC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1014087/How-to-Train-your-Technical&quot;&gt;GDC 2010: How to Train your Technical Artist&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://technicalgamedesign.blogspot.com/2012/07/what-is-technical-game-designer.html&quot;&gt;What is a technical game designer?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ps&quot;&gt;P.S.&lt;/h2&gt;

&lt;p&gt;If you have a better definition to any of the above or you think I missed a role. Please feel free to DM me on &lt;a href=&quot;https://twitter.com/VictorStepanov&quot;&gt;twitter&lt;/a&gt; or leave a commnet here.&lt;/p&gt;</content><author><name>Victor Stepanov</name></author><category term="Game_Tools_Dev" /><category term="Roles" /><summary type="html">Today in Game Development there are several roles that take part in creating new Game Tools and developing the existing ones. Depending on the number of people in a Game Development team multiple roles may be assigned to one responsible person. It would be challenging if not impossible to find a studio/company that has a dedicated person assigned to each of the roles listed. In this post, I will list the main roles and give them a short definition. DISCLAIMER: definitions in this post were produced from personal experience, GDC talks, blog posts, looking at job postings and talking with experts. They might differ from your own definitions. Game Tools Engineering The roles involved in creating and maintaining the internal implementations of in-house digital content creation (DCC) tools, the content build pipeline, and the studio infrastructure. Usually, the work that these roles do doesn’t leave the studio’s walls. Generalist Engine Programmer - in a small team setting the Generalist Engine Programmer knows the engine best and this is the best person to know how to integrate DCC tools and set up the pipeline. Tools Engineer - dedicated engineering role responsible for maintaining the tools and pipelines that the game development team uses. Pipeline Engineer - responsible for maintaining/evolving the tools and technologies part of the content development pipeline. Collaborating with Technical Artists to create the user-facing parts of the pipeline. Infrastructure Tools Engineer - responsible for maintaining/evolving studio services part of Continuous Integration, database health, Version Control and workstation configuration. DCC Tools Engineer - responsible for maintaining/evolving the Game Engine Toolset. Working with Content Creators, Tech Artists, Tech Designers, and the Tool UX team to create the most optimal workflows possible. Tools Support Specialist / Production Engineer - first-line support for tool/pipeline user issues. Knowledge base of known issues, best practises and issue workarounds. The firefighter of game development. Technical Art The part of the Game Development Team that bridges the gap between Engineering and Art. Technical Artist - Responsible for tackling technical challenges that an art team can come across. Enables the artists to focus on creating art and not solving technical problems. Use great communication skills to bridge the gap between engineering and art. VFX Technical Artist - Technical artist that focuses on helping the VFX team with VFX tools and workflows. Masters of real-time effects, lighting, and shaders. Coordinates with the Tools User Experience team to provide the best experience possible. Provides feedback to the Render Team. Pipeline Technical Artist - Works on streamlining the content build pipeline and workflows within the pipeline. Closely coordinates with the Tools Team to set up efficient asset creation processes. Technical Animator - Tech Artist that specializes in development and support of rigging and animation technologies. Closely works with the Tools User Experience team to improve workflows and efficiency. Technical Design The part of the Game Development Team that bridges the gap between Engineering and Design. Tech Designer - the tech-savvy designer that helps bridge the gap between design and code. Help define pipelines and workflows for developing game mechanic related content. Talor tool feature request to better suit the non-technical designers. Tech UI/UX Designer - Technical Designer that focuses on helping the UI team tackle technical problems of creating menus, navigation, and HUD. Tech Audio Designer - Technical Designer that is focused on helping the audio team maintain and develop the audio system of the game engine. Coordinates with the Tools User Experience team to provide the best experience in the audio tools. Tech Level Designer - work closely with the Level Design, Tools and Tools UX Teams to create a sublime level editing experience in the engine level editor. Game Tools UI/UX and Design The part of the Tools Team that make the Engineers/ Tech Designers/Tech Artists more efficient, the Artist/Designers happier and budget have fewer drains. Tools Designer - Helping the Tools Team concentrate on the engineering side of the tools and pipeline. Spending time at users desks analyzing workflows and pointing out the “best bang for the buck” improvements to the Tools Engineers, Tech Designers, and Tech Artists. User Experience Designer - create and design UI/Workflows for in-house tools. Collaborate with Users and Tech Artists/Tech Designers/Tools Engineers to make the best UX possible. User Researcher - design and conduct research studies on experience and workflow for in-house tools. Outline, communicate research results and provide recommendations. Tools UI Designer - responsibilities include: work on the design of Tool UIs; Maintain the Tools UI style guide; Verify that the style guide is properly implemented; Tech Writer - the keeper of the studios knowledge base. Enabling quick new hire ramp ups. Data Analytics Engineer / Tools Analytics - responsible for setting up Tool statistic gathering and statistical data analysis of tool usage. Coordinates with User Researcher to understand the reasons behind the user’s behaviors and actions. Ad-hoc Tool Development There is always a lot of work to go around when it comes to tools. When there aren’t enough resources in the Tools/Tech Design/Tech Art Teams other programmers come to help.  Some might think Ad-hoc Tool Development is always a bad thing with issues like coordination/communication, redundant work, bus factor, new tool frameworks to support... But I would disagree. If this is done right these issues can be avoided and this can be a big help to the Tools/Tech Design/Tech Art Teams. Summary This turned out a bit of a laundry list. Anyway, this is a good high-level overview of the game development roles that are involved in creating tools for building amazing interactive experiences. I believe this could be an excellent reference for people that are just starting out in the industry. Links Tools Engineer Recruiting FAQ Polycount wiki - Technical Art GDC 2015: Tools Development at Ubisoft: Building a Shared Vision to Improve the User Experience The Problem With Ad-Hoc Tools Teams Best of Comments: Ad-hoc and GDC GDC 2010: How to Train your Technical Artist What is a technical game designer? P.S. If you have a better definition to any of the above or you think I missed a role. Please feel free to DM me on twitter or leave a commnet here.</summary></entry><entry><title type="html">Notes for “A Tale of Three Data Schemas”</title><link href="/http://victorstepanov.github.io/tools-tutorial-day-a-tale-of-three-data-schemas" rel="alternate" type="text/html" title="Notes for &quot;A Tale of Three Data Schemas&quot;" /><published>2018-10-06T18:00:00-07:00</published><updated>2018-10-06T18:00:00-07:00</updated><id>/http://victorstepanov.github.io/tools-tutorial-day-a-tale-of-three-data-schemas</id><content type="html" xml:base="/http://victorstepanov.github.io/tools-tutorial-day-a-tale-of-three-data-schemas">&lt;p&gt;GDC 2018, Tools Tutorial Day, Ludovic Chabant, Senior Software Engineer @ Electronic Arts Vancouver shared the know-how of the Frostbite engine team when it comes to designing the game’s data.&lt;/p&gt;

&lt;div style=&quot;background-color:#FFFF94;border-left: 6px solid #ffff48;&quot;&gt;
These are my notes that I wrote down from watching Ludovic's presentation. If you like what you read I hight recommend getting a GDC Vault subscription and watching the full talk &lt;a href=&quot;https://www.gdcvault.com/play/1025284/Tools-Tutorial-Day-A-Tale&quot;&gt;link to talk&lt;/a&gt;.
&lt;/div&gt;
&lt;p style=&quot;margin-bottom: 1em;&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;main-takeaway&quot;&gt;Main Takeaway&lt;/h2&gt;
&lt;p&gt;The same data is used in different ways. Optimizing the data’s logical representation for different usage scenarios is key in achieving great performance, efficient use of storage and a sublime user experience. The way that an artist thinks of the data that he or she sees in the editor window might not be the best way to represent the data to load it as fast as possible into the game or might not be the best way to store it on disk. Different data consumption scenarios demand different optimization. Off course maintaining more than one data layout isn’t free but it is worth the investment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/tale_of_3_data_schemas/different_data_schemas_different_problems.png&quot; alt=&quot;different data schemas to solve different problems&quot; /&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;i&gt;&lt;small&gt;a picture of a side from Ludovic Chabant's GDC 2018 presentation&lt;/small&gt;&lt;/i&gt;
&lt;/div&gt;
&lt;p style=&quot;margin-bottom: 1em;&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;data-schema&quot;&gt;Data Schema&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt; a data schema is the formal description of the structures a system is working with.&lt;/p&gt;

&lt;h3 id=&quot;examples-of-data-schemas&quot;&gt;Examples of data schemas&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Public properties of script components in Unity&lt;/li&gt;
  &lt;li&gt;Decorated public properties of a UClass in Unreal Engine&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://knowledge.autodesk.com/support/maya/downloads/caas/CloudHelp/cloudhelp/2018/ENU/Maya-Modeling/files/GUID-6B2E2B87-C990-416F-B772-D0CED101F5E6-htm.html&quot;&gt;Blind Data&lt;/a&gt; in Maya&lt;/li&gt;
  &lt;li&gt;Table columns in a database management system&lt;/li&gt;
  &lt;li&gt;Frostbite DDF (Data Definition Format)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;basic-idea&quot;&gt;Basic idea&lt;/h3&gt;

&lt;p style=&quot;margin-bottom: 0;&quot;&gt;A data schema is a for communicating about the existence of a &lt;i&gt;type of something&lt;/i&gt; which has:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;properties like
    &lt;ul&gt;
      &lt;li&gt;ints&lt;/li&gt;
      &lt;li&gt;floats&lt;/li&gt;
      &lt;li&gt;etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;references to other types&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;usage-scenarios&quot;&gt;Usage scenarios&lt;/h3&gt;

&lt;p style=&quot;margin-bottom: 0;&quot;&gt;A data schema is used to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;display a type’s properties in an editor context.&lt;/li&gt;
  &lt;li&gt;store the type on disk.&lt;/li&gt;
  &lt;li&gt;load the type at runtime.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;designing-a-data-schema&quot;&gt;Designing a data schema&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;assets/images/posts/tale_of_3_data_schemas/designing_data_schemas.png&quot; alt=&quot;Designing data schemas requires consideration&quot; /&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;i&gt;&lt;small&gt;a picture of a side from Ludovic Chabant's GDC 2018 presentation&lt;/small&gt;&lt;/i&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
If you design a data schema with a &lt;strong&gt;programmer bias&lt;/strong&gt; you will get a data schema that will be great for loading at runtime.&lt;/p&gt;

&lt;p style=&quot;margin-bottom: 0;&quot;&gt;It will be:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;flat and packed&lt;/li&gt;
  &lt;li&gt;optimized for loading&lt;/li&gt;
  &lt;li&gt;unintelligible for designers and artists&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you design a data schema with a &lt;strong&gt;content creator bias&lt;/strong&gt; you will get a data schema that will be great for human understanding and iteration.&lt;/p&gt;

&lt;p style=&quot;margin-bottom: 0;&quot;&gt;It will be:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;easy to use and edit by multiple people&lt;/li&gt;
  &lt;li&gt;not cache friendly&lt;/li&gt;
  &lt;li&gt;not efficiently laid out in memory&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;three-different-data-schemas&quot;&gt;Three different data schemas&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;assets/images/posts/tale_of_3_data_schemas/not_just_one_data_schema.png&quot; alt=&quot;Not just one data schema&quot; /&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;i&gt;&lt;small&gt;a picture of a side from Ludovic Chabant's GDC 2018 presentation&lt;/small&gt;&lt;/i&gt;
&lt;/div&gt;
&lt;p style=&quot;margin-bottom: 1em;&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;runtime-data-schema&quot;&gt;Runtime data schema&lt;/h3&gt;
&lt;p style=&quot;margin-bottom: 0;&quot;&gt;&lt;strong&gt;used by&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the game for loading the data into memory&lt;/li&gt;
  &lt;li&gt;the programmers in the code&lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;margin-bottom: 0;&quot;&gt;&lt;strong&gt;purpose&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;performance&lt;/li&gt;
  &lt;li&gt;patching&lt;/li&gt;
  &lt;li&gt;loading&lt;/li&gt;
  &lt;li&gt;nicely packed in memory&lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;margin-bottom: 0;&quot;&gt;&lt;strong&gt; optimized for&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;reading&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;storage-data-schema&quot;&gt;Storage data schema&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;the tools backend&lt;/em&gt;
&lt;strong&gt;a.k.a disk version&lt;/strong&gt;&lt;/p&gt;

&lt;div style=&quot;background-color:#FFFF94;border-left: 6px solid #ffff48;&quot;&gt;
Tools usually use this to save what the user is working on (the logical peace of data).
Not to be confused with a data format like XML, JSON or YAML.
&lt;/div&gt;
&lt;p style=&quot;margin-bottom: 1em;&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;margin-bottom: 0;&quot;&gt;&lt;strong&gt;used by&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;tools to save users work on some form of persistent storage&lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;margin-bottom: 0;&quot;&gt;&lt;strong&gt;purpose&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;can be versioned and easily merged in revision control&lt;/li&gt;
  &lt;li&gt;can be used by tools for automation&lt;/li&gt;
  &lt;li&gt;supports multi-user editing (splitting into different parts)
    &lt;ul&gt;
      &lt;li&gt;for example, the runtime data schema doesn’t need this&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;margin-bottom: 0;&quot;&gt;&lt;strong&gt; optimized for&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;writing to disk&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tool-data-schema&quot;&gt;Tool data schema&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;the tools frontend&lt;/em&gt;&lt;/p&gt;

&lt;div style=&quot;background-color:#FFFF94;border-left: 6px solid #ffff48;&quot;&gt;
How the content creators see it in their minds. How the game data is displayed in an editor as a graph, property grid or a gizmo.
You can think of this as a subset of UX. Usually, very Object Oriented.
&lt;/div&gt;
&lt;p style=&quot;margin-bottom: 1em;&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;margin-bottom: 0;&quot;&gt;&lt;strong&gt;used by&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;content creators for content creation&lt;/li&gt;
  &lt;li&gt;engineers for analysis and decision making&lt;/li&gt;
  &lt;li&gt;tools developers for creating a great editing experience&lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;margin-bottom: 0;&quot;&gt;&lt;strong&gt;purpose&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;better understanding by humans&lt;/li&gt;
  &lt;li&gt;better UX&lt;/li&gt;
  &lt;li&gt;workflow and iteration oriented&lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;margin-bottom: 0;&quot;&gt;&lt;strong&gt; optimized for&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;editing&lt;/li&gt;
  &lt;li&gt;iteration&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;frostbite-engine-tails&quot;&gt;Frostbite Engine tails&lt;/h3&gt;

&lt;p&gt;Ludovic brings up 4 tails about how the 3 data schemas are used in the Frostbite Engine.&lt;/p&gt;

&lt;p style=&quot;margin-bottom: 0;&quot;&gt;The main points of the tails:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Use a more user-friendly data schema for user editing, but keep an eye out for where you do the conversion from one data schema to another.&lt;/li&gt;
  &lt;li&gt;Use different data schemas to solve different problems, and optimize for different use cases.&lt;/li&gt;
  &lt;li&gt;UX and Data Schemas have a strong relationship. Changing one might affect the other.&lt;/li&gt;
  &lt;li&gt;Use conditional compilation to include tools/storage data schemas in the runtime data schemas. Conditionally include appropriate pipeline code in the runtime to transform data on the fly during live-edit.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;the-most-important-data-schema&quot;&gt;The most important Data Schema&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;Storage Data Schema&lt;/strong&gt; is the most important Data Schema.
It is only Data Schema that is persistent.&lt;/p&gt;
&lt;div style=&quot;background-color:#FFFF94;border-left: 6px solid #ffff48;&quot;&gt;
it the most expensive to change, because it is persistent
&lt;/div&gt;
&lt;p style=&quot;margin-bottom: 1em;&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;designing-data-schemas&quot;&gt;Designing Data Schemas&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Start with designing the Storage Data Schema&lt;/li&gt;
  &lt;li&gt;Build your Tools around the Storage Data Schema&lt;/li&gt;
  &lt;li&gt;Implement your Runtime Code around the Storage Data Schema
    &lt;ul&gt;
      &lt;li&gt;if it is obvious that the Storage Schema is not performant enough go to the next subsection to find out how to deal with it&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;dealing-with-performance-issues&quot;&gt;Dealing with performance issues&lt;/h4&gt;
&lt;p style=&quot;margin-bottom: 0;&quot;&gt;If the Runtime Data Schema is not performant enough&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Adjust the Runtime Data Schema and the code&lt;/li&gt;
  &lt;li&gt;Write the pipeline code to convert from the Storage Schema to the Runtime Schema&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;mixing-data-schemas&quot;&gt;Mixing Data Schemas&lt;/h4&gt;
&lt;p&gt;If your engine does not formally support different types of data schemas, use conditional compilation to have ways to remove the Tools/Storage Data Schemas from the production build.&lt;/p&gt;

&lt;h3 id=&quot;what-we-have-learned&quot;&gt;What we have learned&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;There are different ways to organize the same logical data (Tools, Storage, Runtime)&lt;/li&gt;
  &lt;li&gt;Use more user-friendly data organization for the users of your Tools and a more performant way of data organization for your Runtime&lt;/li&gt;
  &lt;li&gt;With this way of organizing data, you can solve different problems without a lot of sacrifices&lt;/li&gt;
  &lt;li&gt;Always remember that a change in a Data Schema can lead to a change in the UX of a tool and vice versa&lt;/li&gt;
  &lt;li&gt;Have a pipeline in place to convert from the Storage Schema to the Runtime Schema&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;personal-notes&quot;&gt;Personal notes&lt;/h3&gt;
&lt;p&gt;This reminded me of &lt;a href=&quot;https://youtu.be/rX0ItVEVjHc?t=1394&quot;&gt;Mike Acton’s Data-Oriented Design talk&lt;/a&gt; where every problem in programming is a data transformation problem.&lt;/p&gt;

&lt;h2 id=&quot;mindmap--mental-representation&quot;&gt;Mindmap / Mental Representation&lt;/h2&gt;

&lt;iframe src=&quot;https://www.xmind.net/embed/THiC/&quot; width=&quot;750px&quot; height=&quot;450px&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href=&quot;https://www.xmind.net/m/THiC/&quot;&gt;Click to see it in fullscreen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.dropbox.com/s/v9o5opk5llrqmvp/Data%20Schemas.xmind?dl=0&quot;&gt;Link to mindmap source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can open the file with &lt;a href=&quot;https://github.com/xmindltd/xmind&quot;&gt;XMind&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-toolsmiths&quot;&gt;The Toolsmiths&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://thetoolsmiths.org/assets/thetoolsmiths_cover_1000x2881.png&quot; alt=&quot;The Toolsmiths logo&quot; /&gt;
&lt;strong&gt;Ludovic Chabant&lt;/strong&gt; is a member of the &lt;a href=&quot;http://thetoolsmiths.org/&quot;&gt;Toolsmiths&lt;/a&gt; community. The Toolsmiths are a community of Game Tool Developers that are passionate about improving the way people make games.&lt;/p&gt;

&lt;p&gt;Join us on &lt;a href=&quot;http://thetoolsmiths.org/join_slack_team&quot;&gt;Slack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Join us on &lt;a href=&quot;https://twitter.com/thetoolsmiths&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ea.com/frostbite/news/a-tale-of-three-data-schemas&quot;&gt;Slides: A Tale of Three Data Schemas&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025284/Tools-Tutorial-Day-A-Tale&quot;&gt;GDC Vault Video: A Tale of Three Data Schemas&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/ludovicchabant?lang=en&quot;&gt;Ludovic Chabant on Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;related-blog-links&quot;&gt;Related Blog Links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Notes for &lt;a href=&quot;http://victorstepanov.github.io//2019-06-16-gdc2019-the-future-of-scene-description-on-god-of-war&quot;&gt;GDC2019 “The Future of Scene Description on ‘God of War’”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Victor Stepanov</name></author><category term="GDC" /><category term="Tools_Tutorial_Day" /><category term="data" /><summary type="html">GDC 2018, Tools Tutorial Day, Ludovic Chabant, Senior Software Engineer @ Electronic Arts Vancouver shared the know-how of the Frostbite engine team when it comes to designing the game’s data. These are my notes that I wrote down from watching Ludovic's presentation. If you like what you read I hight recommend getting a GDC Vault subscription and watching the full talk link to talk. Main Takeaway The same data is used in different ways. Optimizing the data’s logical representation for different usage scenarios is key in achieving great performance, efficient use of storage and a sublime user experience. The way that an artist thinks of the data that he or she sees in the editor window might not be the best way to represent the data to load it as fast as possible into the game or might not be the best way to store it on disk. Different data consumption scenarios demand different optimization. Off course maintaining more than one data layout isn’t free but it is worth the investment. a picture of a side from Ludovic Chabant's GDC 2018 presentation Data Schema Definition: a data schema is the formal description of the structures a system is working with. Examples of data schemas Public properties of script components in Unity Decorated public properties of a UClass in Unreal Engine Blind Data in Maya Table columns in a database management system Frostbite DDF (Data Definition Format) Basic idea A data schema is a for communicating about the existence of a type of something which has: properties like ints floats etc. references to other types Usage scenarios A data schema is used to: display a type’s properties in an editor context. store the type on disk. load the type at runtime. Designing a data schema a picture of a side from Ludovic Chabant's GDC 2018 presentation If you design a data schema with a programmer bias you will get a data schema that will be great for loading at runtime. It will be: flat and packed optimized for loading unintelligible for designers and artists If you design a data schema with a content creator bias you will get a data schema that will be great for human understanding and iteration. It will be: easy to use and edit by multiple people not cache friendly not efficiently laid out in memory Three different data schemas a picture of a side from Ludovic Chabant's GDC 2018 presentation Runtime data schema used by the game for loading the data into memory the programmers in the code purpose performance patching loading nicely packed in memory optimized for reading Storage data schema the tools backend a.k.a disk version Tools usually use this to save what the user is working on (the logical peace of data). Not to be confused with a data format like XML, JSON or YAML. used by tools to save users work on some form of persistent storage purpose can be versioned and easily merged in revision control can be used by tools for automation supports multi-user editing (splitting into different parts) for example, the runtime data schema doesn’t need this optimized for writing to disk Tool data schema the tools frontend How the content creators see it in their minds. How the game data is displayed in an editor as a graph, property grid or a gizmo. You can think of this as a subset of UX. Usually, very Object Oriented. used by content creators for content creation engineers for analysis and decision making tools developers for creating a great editing experience purpose better understanding by humans better UX workflow and iteration oriented optimized for editing iteration Frostbite Engine tails Ludovic brings up 4 tails about how the 3 data schemas are used in the Frostbite Engine. The main points of the tails: Use a more user-friendly data schema for user editing, but keep an eye out for where you do the conversion from one data schema to another. Use different data schemas to solve different problems, and optimize for different use cases. UX and Data Schemas have a strong relationship. Changing one might affect the other. Use conditional compilation to include tools/storage data schemas in the runtime data schemas. Conditionally include appropriate pipeline code in the runtime to transform data on the fly during live-edit. The most important Data Schema The Storage Data Schema is the most important Data Schema. It is only Data Schema that is persistent. it the most expensive to change, because it is persistent Designing Data Schemas Start with designing the Storage Data Schema Build your Tools around the Storage Data Schema Implement your Runtime Code around the Storage Data Schema if it is obvious that the Storage Schema is not performant enough go to the next subsection to find out how to deal with it Dealing with performance issues If the Runtime Data Schema is not performant enough Adjust the Runtime Data Schema and the code Write the pipeline code to convert from the Storage Schema to the Runtime Schema Mixing Data Schemas If your engine does not formally support different types of data schemas, use conditional compilation to have ways to remove the Tools/Storage Data Schemas from the production build. What we have learned There are different ways to organize the same logical data (Tools, Storage, Runtime) Use more user-friendly data organization for the users of your Tools and a more performant way of data organization for your Runtime With this way of organizing data, you can solve different problems without a lot of sacrifices Always remember that a change in a Data Schema can lead to a change in the UX of a tool and vice versa Have a pipeline in place to convert from the Storage Schema to the Runtime Schema Personal notes This reminded me of Mike Acton’s Data-Oriented Design talk where every problem in programming is a data transformation problem. Mindmap / Mental Representation Click to see it in fullscreen Link to mindmap source You can open the file with XMind The Toolsmiths Ludovic Chabant is a member of the Toolsmiths community. The Toolsmiths are a community of Game Tool Developers that are passionate about improving the way people make games. Join us on Slack. Join us on Twitter. Links Slides: A Tale of Three Data Schemas GDC Vault Video: A Tale of Three Data Schemas Ludovic Chabant on Twitter Related Blog Links Notes for GDC2019 “The Future of Scene Description on ‘God of War’”</summary></entry><entry><title type="html">The efficiency ratio for game tools improvements</title><link href="/http://victorstepanov.github.io/the-efficiency-ratio-for-game-tools-improvements" rel="alternate" type="text/html" title="The efficiency ratio for game tools improvements" /><published>2018-07-17T18:00:00-07:00</published><updated>2018-07-17T18:00:00-07:00</updated><id>/http://victorstepanov.github.io/the-efficiency-ratio-for-game-tools-improvements</id><content type="html" xml:base="/http://victorstepanov.github.io/the-efficiency-ratio-for-game-tools-improvements">&lt;p&gt;&lt;em&gt;Last Update on July 22nd, 2018&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;game-tools-as-an-investment&quot;&gt;Game Tools as an investment&lt;/h2&gt;

&lt;p&gt;Having a Game Tools Development Team (GTDT) is an investment and when you are investing you want to get as much Return On Investment (ROI) as you possibly can. This means the GTDT should be working on the “right” issues of the production pipeline. It is not always clear what the “right” issues are.&lt;/p&gt;

&lt;p&gt;The GTDT investment is made by the time resource that the team has. Apart from the time spent on bug fixes the GTDT spends a significant portion of its resource on improving the production pipeline. We need some way to measure the efficiency of the time spent on improving different parts of the pipeline.&lt;/p&gt;

&lt;h2 id=&quot;is-it-worth-the-time&quot;&gt;“Is it worth the time”&lt;/h2&gt;

&lt;p&gt;As a young programmer, I used to have a mindset of “I can write a program for this” at almost any problem that I would encounter. Automating things is great but automating every single task I would encounter would be a waste of time, especially if the task that I wanted to automate would need to be done only once a year or so. A number of years ago I found an excellent resource that could answer the question should I automate this. This resource was an &lt;a href=&quot;https://xkcd.com/1205/&quot;&gt;xkcd “Is it worth the time” comic&lt;/a&gt; [1]. I usually reference it to stop myself from automating everything with Python.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://imgs.xkcd.com/comics/is_it_worth_the_time.png&quot; alt=&quot;Is It Worth the Time?&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;mapping-the-table-to-game-tools-development&quot;&gt;Mapping the table to Game Tools Development&lt;/h2&gt;

&lt;p&gt;When you are in a GTDT most of your work is aimed at improving the workflows of others on the production team. Projecting the table onto the work of a GTDT and you get a table that can be used to calculate the efficiency ratio of the Tool Developers.&lt;/p&gt;

&lt;p&gt;The original table is used for saving the time of the single person that is using the table. When working on an improvement for a tool, the Tool Developer is improving the workflow of multiple people. Meaning that the time saved is multiplied by the number of users that will benefit from the improvement to the tool.&lt;/p&gt;

&lt;p&gt;Here are some examples of how the efficiency table can look like:&lt;/p&gt;
&lt;div style=&quot;background-color:#FFFF94;border-left: 6px solid #ffff48;&quot;&gt;
I'll make some assumptions:
&lt;ul&gt;
  &lt;li&gt;a 3-year game production;  &lt;/li&gt;
  &lt;li&gt;5-day work week; 8-hour work day;  &lt;/li&gt;
  &lt;li&gt;260 work days in a year;  &lt;/li&gt;
  &lt;li&gt;52 work weeks;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h3 id=&quot;how-long-can-you-work-on-an-improvement-of-a-tool-that-will-benefit-2-users&quot;&gt;How long can you work on an improvement of a tool that will benefit 2 users:&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;assets/images/roi_for_tool_impruvment_2_users.png&quot; alt=&quot;Table for 2&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;how-long-can-you-work-on-an-improvement-of-a-tool-that-will-benefit-10-users&quot;&gt;How long can you work on an improvement of a tool that will benefit 10 users:&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;assets/images/roi_for_tool_impruvment_10_users.png&quot; alt=&quot;Table for 10&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-use-the-efficiency-table&quot;&gt;How to use the efficiency table&lt;/h2&gt;

&lt;p&gt;The ratio of the time that it will take to implement the improvement, to the time savings can be used to determine how efficient the usage of the GTDT resources will be. The calculated ratio can determine how efficient it would be to implement this improvement to the tool. The smaller the ratio the better.&lt;/p&gt;

&lt;p&gt;Depending on the process used for developing improvements in the tools the ratio can look like this:
&lt;img src=&quot;assets/images/game_tool_efficienct_ratio.png&quot; alt=&quot;the efficiency ratio&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If an improvement will take longer to implement than the total time saved - it doesn’t mean that the improvement isn’t worth implementing. It just means that there might be another improvement that will be more efficient to implement in the current circumstance. This might be due to the fact that there are not enough users that can benefit from the improvement.&lt;/p&gt;

&lt;p&gt;Another thing to consider is the sanity of the user of the tool. &lt;a href=&quot;https://twitter.com/srekel&quot;&gt;Anders Elfgren&lt;/a&gt; brought up this point in one of the many interesting conversations in the &lt;a href=&quot;http://thetoolsmiths.org/join_slack_team&quot;&gt;Toolsmiths Slack&lt;/a&gt;. &lt;img src=&quot;assets/images/sanity.png&quot; alt=&quot;don't forget about the sanity&quot; /&gt; Even if it isn’t efficient to implement the improvement, helping save the user’s mental state is something to keep in mind when deciding what to do.&lt;/p&gt;

&lt;h2 id=&quot;game-tools-ux-angle&quot;&gt;Game Tools UX angle&lt;/h2&gt;

&lt;p&gt;It may seem that saving a second or two is not that much. However, when an operation is performed by many users a hundred times per day the savings can be significant over the lifetime of the production or tool. &lt;a href=&quot;https://twitter.com/RYStorm&quot;&gt;Robin-Yann Storm&lt;/a&gt; touches on this point at his &lt;a href=&quot;https://www.gdcvault.com/play/1025287/Tools-Tutorial-Day-UX-Microtalks&quot;&gt;GDC UX micro talk&lt;/a&gt;[3], where he explores the UX features of an editor Gizmo. The Gizmo is one of the most day-to-day used features of any Level Editor.&lt;/p&gt;

&lt;p&gt;Every second counts when it comes to optimizing commonly used tool functionality. If you don’t believe me, you can use the Human Factors &lt;a href=&quot;http://www.humanfactors.com/coolstuff/roi_increase_productivity.asp&quot;&gt;“Increased productivity ROI calculator”&lt;/a&gt;[2, 4] where you can see how even the smallest savings in time can save a lot of money for the production.&lt;/p&gt;

&lt;p&gt;If you are interested in topics like these, I would recommend reading &lt;a href=&quot;https://www.crcpress.com/Designing-the-User-Experience-of-Game-Development-Tools/Lightbown/p/book/9781482240191&quot;&gt;David Lightbown’s book&lt;/a&gt;[2]. David covers a range of topics about how to improve game development tools from the UX point of view. Here is an example of how focusing on the right users can maximize the improvement while keeping the investment to a minimum.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/Fig3_3page_31_Designing_the_User_Experience_of_Game_Development_Tools.png&quot; alt=&quot;Designing the User Experience of Game Development Tools, (p. 31, Figure 3.3), David Lightbown&quot; /&gt;
&lt;em&gt;A figure about maximizing the improvement while keeping the investment to a minimum from the “Designing the User Experience of Game Development Tools” book [2.1]. Used with permission from David Lightbown.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;Of course, the tool and the improvement in the tool will live longer than the project production time. However, this ratio is more of measuring how efficient are the GTDT resources spent during the production life cycle of a game.&lt;/p&gt;

&lt;p&gt;It is important to note that this table can only be used for a part of the GTDT responsibilities. There are other essential maintenance and validation tasks that can’t be simply measured in terms of how efficient the tools team is used. We will need to think of some other way to measure those Tool Team activities. I’ll write down some thoughts on maintenance and validation improvements in a future post.&lt;/p&gt;

&lt;h2 id=&quot;make-your-own-table&quot;&gt;Make your own table&lt;/h2&gt;
&lt;p&gt;If you want to make your own table for estimating the profits that you can reap from optimizing the development process you can go ahead and punch in your own numbers:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.dropbox.com/s/eg1yy26dmi9b12v/Tool%20Team%20efficiency%20%2810%20Users%29.xlsx?dl=0&quot;&gt;link to spreadsheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The primary variables in the spreadsheet are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the number of years the project will be worked on&lt;/li&gt;
  &lt;li&gt;the number of users that will reap the benefits from the improvements to the tool&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/editing_the_roi_table.png&quot; alt=&quot;Location on the spreadsheet that can be edited&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;update-07222018&quot;&gt;Update 07/22/2018&lt;/h2&gt;
&lt;p&gt;Some insightful comments from the &lt;a href=&quot;http://thetoolsmiths.org/join_slack_team&quot;&gt;Toolsmiths&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/srekel&quot;&gt;Anders Elfgren&lt;/a&gt; writes:
&lt;img src=&quot;assets/images/efficiency_ratio_comment1.png&quot; alt=&quot;Toolsmiths Slack post comment 1&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/RYStorm&quot;&gt;Robin-Yann Storm&lt;/a&gt; writes:
&lt;img src=&quot;assets/images/efficiency_ratio_comment2.png&quot; alt=&quot;Toolsmiths Slack post comment 2&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://xkcd.com/1205/?utm_source=feedly&quot;&gt;Is It Worth the Time?, xkcd, Randall Munroe&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.crcpress.com/Designing-the-User-Experience-of-Game-Development-Tools/Lightbown/p/book/9781482240191&quot;&gt;Designing the User Experience of Game Development Tools, David Lightbown&lt;/a&gt;
2.1 &lt;a href=&quot;https://www.crcpress.com/Designing-the-User-Experience-of-Game-Development-Tools/Lightbown/p/book/9781482240191&quot;&gt;Designing the User Experience of Game Development Tools, (pp. 30-32), David Lightbown&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025287/Tools-Tutorial-Day-UX-Microtalks&quot;&gt;Tools Tutorial Day: UX Microtalks, Part 1, GDC 2018, David Lightbown, Nikoline Høgh, Robin-Yann Storm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.humanfactors.com/coolstuff/roi_increase_productivity.asp&quot;&gt;Increased productivity ROI calculator, Human Factors International&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Victor Stepanov</name></author><summary type="html">Last Update on July 22nd, 2018 Game Tools as an investment Having a Game Tools Development Team (GTDT) is an investment and when you are investing you want to get as much Return On Investment (ROI) as you possibly can. This means the GTDT should be working on the “right” issues of the production pipeline. It is not always clear what the “right” issues are. The GTDT investment is made by the time resource that the team has. Apart from the time spent on bug fixes the GTDT spends a significant portion of its resource on improving the production pipeline. We need some way to measure the efficiency of the time spent on improving different parts of the pipeline. “Is it worth the time” As a young programmer, I used to have a mindset of “I can write a program for this” at almost any problem that I would encounter. Automating things is great but automating every single task I would encounter would be a waste of time, especially if the task that I wanted to automate would need to be done only once a year or so. A number of years ago I found an excellent resource that could answer the question should I automate this. This resource was an xkcd “Is it worth the time” comic [1]. I usually reference it to stop myself from automating everything with Python. Mapping the table to Game Tools Development When you are in a GTDT most of your work is aimed at improving the workflows of others on the production team. Projecting the table onto the work of a GTDT and you get a table that can be used to calculate the efficiency ratio of the Tool Developers. The original table is used for saving the time of the single person that is using the table. When working on an improvement for a tool, the Tool Developer is improving the workflow of multiple people. Meaning that the time saved is multiplied by the number of users that will benefit from the improvement to the tool. Here are some examples of how the efficiency table can look like: I'll make some assumptions: a 3-year game production; 5-day work week; 8-hour work day; 260 work days in a year; 52 work weeks; How long can you work on an improvement of a tool that will benefit 2 users: How long can you work on an improvement of a tool that will benefit 10 users: How to use the efficiency table The ratio of the time that it will take to implement the improvement, to the time savings can be used to determine how efficient the usage of the GTDT resources will be. The calculated ratio can determine how efficient it would be to implement this improvement to the tool. The smaller the ratio the better. Depending on the process used for developing improvements in the tools the ratio can look like this: If an improvement will take longer to implement than the total time saved - it doesn’t mean that the improvement isn’t worth implementing. It just means that there might be another improvement that will be more efficient to implement in the current circumstance. This might be due to the fact that there are not enough users that can benefit from the improvement. Another thing to consider is the sanity of the user of the tool. Anders Elfgren brought up this point in one of the many interesting conversations in the Toolsmiths Slack. Even if it isn’t efficient to implement the improvement, helping save the user’s mental state is something to keep in mind when deciding what to do. Game Tools UX angle It may seem that saving a second or two is not that much. However, when an operation is performed by many users a hundred times per day the savings can be significant over the lifetime of the production or tool. Robin-Yann Storm touches on this point at his GDC UX micro talk[3], where he explores the UX features of an editor Gizmo. The Gizmo is one of the most day-to-day used features of any Level Editor. Every second counts when it comes to optimizing commonly used tool functionality. If you don’t believe me, you can use the Human Factors “Increased productivity ROI calculator”[2, 4] where you can see how even the smallest savings in time can save a lot of money for the production. If you are interested in topics like these, I would recommend reading David Lightbown’s book[2]. David covers a range of topics about how to improve game development tools from the UX point of view. Here is an example of how focusing on the right users can maximize the improvement while keeping the investment to a minimum. A figure about maximizing the improvement while keeping the investment to a minimum from the “Designing the User Experience of Game Development Tools” book [2.1]. Used with permission from David Lightbown. Final thoughts Of course, the tool and the improvement in the tool will live longer than the project production time. However, this ratio is more of measuring how efficient are the GTDT resources spent during the production life cycle of a game. It is important to note that this table can only be used for a part of the GTDT responsibilities. There are other essential maintenance and validation tasks that can’t be simply measured in terms of how efficient the tools team is used. We will need to think of some other way to measure those Tool Team activities. I’ll write down some thoughts on maintenance and validation improvements in a future post. Make your own table If you want to make your own table for estimating the profits that you can reap from optimizing the development process you can go ahead and punch in your own numbers: link to spreadsheet The primary variables in the spreadsheet are: the number of years the project will be worked on the number of users that will reap the benefits from the improvements to the tool Update 07/22/2018 Some insightful comments from the Toolsmiths: Anders Elfgren writes: Robin-Yann Storm writes: References Is It Worth the Time?, xkcd, Randall Munroe Designing the User Experience of Game Development Tools, David Lightbown 2.1 Designing the User Experience of Game Development Tools, (pp. 30-32), David Lightbown Tools Tutorial Day: UX Microtalks, Part 1, GDC 2018, David Lightbown, Nikoline Høgh, Robin-Yann Storm Increased productivity ROI calculator, Human Factors International</summary></entry></feed>