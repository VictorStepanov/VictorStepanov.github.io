<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="/https://victorstepanov.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="/https://victorstepanov.github.io/" rel="alternate" type="text/html" /><updated>2019-05-05T12:20:47-07:00</updated><id>/https://victorstepanov.github.io/</id><title type="html">Victor Stepanov</title><subtitle>Passionate about making game developers more productive</subtitle><entry><title type="html">Notes for “Pipeline Support for Feature Branches in ‘Destiny’” GDC2019</title><link href="/https://victorstepanov.github.io/gdc2019-pipeline-support-for-feature-branches-in-destiny" rel="alternate" type="text/html" title="Notes for &quot;Pipeline Support for Feature Branches in 'Destiny'&quot; GDC2019" /><published>2019-05-04T18:00:00-07:00</published><updated>2019-05-04T18:00:00-07:00</updated><id>/https://victorstepanov.github.io/gdc2019-pipeline-support-for-feature-branches-in-destiny</id><content type="html" xml:base="/https://victorstepanov.github.io/gdc2019-pipeline-support-for-feature-branches-in-destiny">&lt;h2 id=&quot;tldw-summary&quot;&gt;TLDW Summary:&lt;/h2&gt;
&lt;p&gt;How Bungie created an ecosystem of tools and workflows to allow small teams to quickly iterate on changes without worrying about breaking and blocking other teams.&lt;/p&gt;

&lt;h2 id=&quot;topics&quot;&gt;Topics&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Game data merging&lt;/li&gt;
  &lt;li&gt;Version control system&lt;/li&gt;
  &lt;li&gt;Integration between branches&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Each P4 branch is about 4 Tb&lt;/li&gt;
  &lt;li&gt;Up to 350 content creators, designers, and engineers working in one branch&lt;/li&gt;
  &lt;li&gt;They use a pre-commit build pipeline - “the Gauntlet”
    &lt;ul&gt;
      &lt;li&gt;Pete Kugler did a talk at &lt;a href=&quot;https://drive.google.com/file/d/1FeZGA-MeuI31Wan9ZVlXmSZ-JrSLgIL2/view?usp=sharing&quot;&gt;GDC2016: Developing a pipeline for managing game stability&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;Pipeline for managing game stability&lt;/li&gt;
          &lt;li&gt;Describes the reason they put the pre-commit system in place&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;They pick stability over iteration speed
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;assets/images/posts/pipeline-support-for-feature-branches/initial-destiny-2-challenges.jpg&quot; alt=&quot;slide: initial Destiny 2 challenges&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Had technical limitations of just simply adding more feature branches
    &lt;ul&gt;
      &lt;li&gt;Not supported by tools&lt;/li&gt;
      &lt;li&gt;More pressure on integration&lt;/li&gt;
      &lt;li&gt;More pressure on build pipeline&lt;/li&gt;
      &lt;li&gt;Couldn’t merge game data&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Definition &lt;strong&gt;“Feature Branch”&lt;/strong&gt; - Branch created for teams to work in without interfering with the stability of the main branch&lt;/li&gt;
  &lt;li&gt;Definition &lt;strong&gt;“Small Team”&lt;/strong&gt; -  group of cross-discipline developer working collaboratively on shared features (strike teams? )&lt;/li&gt;
  &lt;li&gt;The development team was in an environment that would not allow risky feature prototype and development
    &lt;ul&gt;
      &lt;li&gt;Long pre-commit build pipeline throughput&lt;/li&gt;
      &lt;li&gt;Thurow QA testing&lt;/li&gt;
      &lt;li&gt;Fear of creating blockers&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Vision
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;assets/images/posts/pipeline-support-for-feature-branches/auto-integration.jpg&quot; alt=&quot;slide: auto-integration&quot; width=&quot;400&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;img src=&quot;assets/images/posts/pipeline-support-for-feature-branches/small-team-development-vision.jpg&quot; alt=&quot;slide: small team development vision&quot; width=&quot;700&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;QA had the option to use stabilization branch to shield from the auto integrations that were happening&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Had 3 main challenges:
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;assets/images/posts/pipeline-support-for-feature-branches/achieving-the-development-vision.jpg&quot; alt=&quot;slide: achieving the development vision&quot; width=&quot;700&quot; /&gt;
        &lt;ul&gt;
          &lt;li&gt;Focused on semantically merge content to make the lives of content creators easier&lt;/li&gt;
          &lt;li&gt;Focused on making a simple as possible to keep branches in-sync and stable (management tools)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Developers became accustomed to workflow build around having multiple branches per workspace
    &lt;ul&gt;
      &lt;li&gt;Because of the release cycles (having multiple features in progress)&lt;/li&gt;
      &lt;li&gt;Expected to have immediate access to things that are mapped in the workspace&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Source &lt;a href=&quot;http://thetoolsmiths.org/codex/glossary/&quot;&gt;DCC&lt;/a&gt; assets in the same location as the game data
    &lt;ul&gt;
      &lt;li&gt;This made for build branches&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Moving to a streamed depot was a risk that the dev team didn’t want to take
    &lt;ul&gt;
      &lt;li&gt;Compromise by adapting the current system to behave like Streams&lt;/li&gt;
      &lt;li&gt;Had plans to move to Streams for next project&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;scaling-the-infrastructure&quot;&gt;Scaling the Infrastructure&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Needed to implement Centralized Branch Authority
    &lt;ul&gt;
      &lt;li&gt;Which was available as part P4 Stream&lt;/li&gt;
      &lt;li&gt;Used the build farm DB to be the Branch Authority&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Needed to implement a way to make the branches available on the build farm machines&lt;/li&gt;
  &lt;li&gt;Asset pipeline changes
    &lt;ul&gt;
      &lt;li&gt;For details checkout Brandon Moro’s talk: &lt;a href=&quot;https://www.gdcvault.com/play/1025430/Tools-Tutorial-Day-Bungie-s&quot;&gt;GDC 2018 Tools Tutorial Day: Bungie’s Asset Pipeline: ‘Destiny 2’ and Beyond&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Need to enable the scaling of the Asset Cache
        &lt;ul&gt;
          &lt;li&gt;Used to be one/two machine(s) per branch&lt;/li&gt;
          &lt;li&gt;Decoupled storage HW from the service HW&lt;/li&gt;
          &lt;li&gt;The service was made stateless
            &lt;ul&gt;
              &lt;li&gt;So service could handle different branches&lt;/li&gt;
              &lt;li&gt;The state management was moved into Redis&lt;/li&gt;
              &lt;li&gt;Logging was moved into elasticsearch&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;To setup, branch used a lazy copy of that branch
    &lt;ul&gt;
      &lt;li&gt;The branch was 4 Tb&lt;/li&gt;
      &lt;li&gt;On the backend use deduplication to not store the same data&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;implementing-content-merging&quot;&gt;Implementing Content Merging&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Propper game data merging
    &lt;ul&gt;
      &lt;li&gt;Needs to know the semantics of the data&lt;/li&gt;
      &lt;li&gt;Used C# for the content merge tool (some screenshots &lt;a href=&quot;https://www.gdcvault.com/play/1025992/Pipeline-Support-for-Feature-Branches&quot;&gt;at min 40&lt;/a&gt;)
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;assets/images/posts/pipeline-support-for-feature-branches/content-merge-tool.jpg&quot; alt=&quot;slide: content merge tool&quot; width=&quot;400&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Tracked auto-resolve\ conflict ratio&lt;/li&gt;
      &lt;li&gt;Used TDD and recorded mergers that produced conflict to analyze&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025992/Pipeline-Support-for-Feature-Branches&quot;&gt;at min 31&lt;/a&gt; notes on how to implement merging of game data&lt;/li&gt;
  &lt;li&gt;Were able to reach 80% auto-conflict resolution rate&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;flow-of-changes&quot;&gt;Flow of changes&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Created custom tool “Team Sync” to view of a users branch state
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;assets/images/posts/pipeline-support-for-feature-branches/team-sync.jpg&quot; alt=&quot;slide: Team Sync tool&quot; width=&quot;400&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;Shows
        &lt;ul&gt;
          &lt;li&gt;Check-ins&lt;/li&gt;
          &lt;li&gt;Bugs&lt;/li&gt;
          &lt;li&gt;Builds in progress/finished&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;For more info see &lt;a href=&quot;https://www.gdcvault.com/browse/gdc-19/play/1025807&quot;&gt;GDC 2019 Tools Tutorial Day: Tooling for Small Team Workflows&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Had a special process for automatically integrating into the main branch
    &lt;ul&gt;
      &lt;li&gt;Via a build farm worker&lt;/li&gt;
      &lt;li&gt;Had a special local conflict resolution workflow (when conflicts happened during an integration)&lt;/li&gt;
      &lt;li&gt;After conflict resolution, automated testing would occur
        &lt;ul&gt;
          &lt;li&gt;If something was broken, the team had the ability to login to a remote worker and fix the issue
            &lt;ul&gt;
              &lt;li&gt;The worker would have all the dev tools ready&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;All in all, Pete says that this was a great investment for the dev team&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;background-color:#FFFF94;border-left: 6px solid #ffff48;&quot;&gt;
&lt;p&gt;&lt;/p&gt;
These notes are just the main ideas of the talk. They don’t contain anecdotes and examples. If you like these ideas, I would advise watching the talk on the &lt;a href=&quot;https://www.gdcvault.com/play/1025992/Pipeline-Support-for-Feature-Branches&quot;&gt;GDC Vault&lt;/a&gt;.
&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-toolsmiths&quot;&gt;The Toolsmiths&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://thetoolsmiths.org/assets/thetoolsmiths_cover_1000x2881.png&quot; alt=&quot;The Toolsmiths logo&quot; width=&quot;700&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I took these notes as part of our little “Book Club” for GDC Vault Videos &lt;a href=&quot;http://thetoolsmiths.org/vault_club&quot;&gt;The Toolsmiths #vault club&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pete Kugler&lt;/strong&gt; is a member of the &lt;a href=&quot;http://thetoolsmiths.org/&quot;&gt;Toolsmiths&lt;/a&gt; community. The Toolsmiths are a community of Game Tool Developers that are passionate about improving the way people make games.&lt;/p&gt;

&lt;p&gt;Join us on &lt;a href=&quot;http://thetoolsmiths.org/join_slack_team&quot;&gt;Slack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Join us on &lt;a href=&quot;https://twitter.com/thetoolsmiths&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025992/Pipeline-Support-for-Feature-Branches&quot;&gt;GDC 2019 Pipeline Support for Feature Branches in ‘Destiny’&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;2016 talk by Pete Kugler - &lt;a href=&quot;https://drive.google.com/file/d/1FeZGA-MeuI31Wan9ZVlXmSZ-JrSLgIL2/view?usp=sharing&quot;&gt;GDC 2016 Developing a pipeline for managing game stability&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/browse/gdc-19/play/1025807&quot;&gt;GDC 2019 Tools Tutorial Day: Tooling for Small Team Workflows&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025380/Tools-Tutorial-Day-Shipping-Call&quot;&gt;GDC 2018 Tools Tutorial Day: Shipping ‘Call of Duty’&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025430/Tools-Tutorial-Day-Bungie-s&quot;&gt;GDC 2018 Tools Tutorial Day: Bungie’s Asset Pipeline: ‘Destiny 2’ and Beyond&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=7KXVox0-7lU&quot;&gt;HandmadeCon 2016 - Asset Systems and Scalability&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025970/Bungie-s-Force-Multipliers-Production&quot;&gt;GDC 2019 Bungie’s Force Multipliers: Production Engineers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/browse/gdc-18/play/1025252/Teams-Are-Stronger-Than-Heroes&quot;&gt;GDC 2018 Teams Are Stronger Than Heroes: Bungie Development Evolved&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/browse/gdc-18/play/1025116/Epic-Sync-Wrangling-the-Work&quot;&gt;GDC 2018 Epic Sync: Wrangling the Work of Highly Interdependent Dev Teams at Bungie&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Victor Stepanov</name></author><category term="GDC" /><category term="version_control" /><category term="game_data_merging" /><summary type="html">TLDW Summary: How Bungie created an ecosystem of tools and workflows to allow small teams to quickly iterate on changes without worrying about breaking and blocking other teams. Topics Game data merging Version control system Integration between branches Intro Each P4 branch is about 4 Tb Up to 350 content creators, designers, and engineers working in one branch They use a pre-commit build pipeline - “the Gauntlet” Pete Kugler did a talk at GDC2016: Developing a pipeline for managing game stability Pipeline for managing game stability Describes the reason they put the pre-commit system in place They pick stability over iteration speed Had technical limitations of just simply adding more feature branches Not supported by tools More pressure on integration More pressure on build pipeline Couldn’t merge game data Definition “Feature Branch” - Branch created for teams to work in without interfering with the stability of the main branch Definition “Small Team” - group of cross-discipline developer working collaboratively on shared features (strike teams? ) The development team was in an environment that would not allow risky feature prototype and development Long pre-commit build pipeline throughput Thurow QA testing Fear of creating blockers Vision QA had the option to use stabilization branch to shield from the auto integrations that were happening Had 3 main challenges: Focused on semantically merge content to make the lives of content creators easier Focused on making a simple as possible to keep branches in-sync and stable (management tools) Developers became accustomed to workflow build around having multiple branches per workspace Because of the release cycles (having multiple features in progress) Expected to have immediate access to things that are mapped in the workspace Source DCC assets in the same location as the game data This made for build branches Moving to a streamed depot was a risk that the dev team didn’t want to take Compromise by adapting the current system to behave like Streams Had plans to move to Streams for next project Scaling the Infrastructure Needed to implement Centralized Branch Authority Which was available as part P4 Stream Used the build farm DB to be the Branch Authority Needed to implement a way to make the branches available on the build farm machines Asset pipeline changes For details checkout Brandon Moro’s talk: GDC 2018 Tools Tutorial Day: Bungie’s Asset Pipeline: ‘Destiny 2’ and Beyond Need to enable the scaling of the Asset Cache Used to be one/two machine(s) per branch Decoupled storage HW from the service HW The service was made stateless So service could handle different branches The state management was moved into Redis Logging was moved into elasticsearch To setup, branch used a lazy copy of that branch The branch was 4 Tb On the backend use deduplication to not store the same data Implementing Content Merging Propper game data merging Needs to know the semantics of the data Used C# for the content merge tool (some screenshots at min 40) Tracked auto-resolve\ conflict ratio Used TDD and recorded mergers that produced conflict to analyze at min 31 notes on how to implement merging of game data Were able to reach 80% auto-conflict resolution rate Flow of changes Created custom tool “Team Sync” to view of a users branch state Shows Check-ins Bugs Builds in progress/finished For more info see GDC 2019 Tools Tutorial Day: Tooling for Small Team Workflows Had a special process for automatically integrating into the main branch Via a build farm worker Had a special local conflict resolution workflow (when conflicts happened during an integration) After conflict resolution, automated testing would occur If something was broken, the team had the ability to login to a remote worker and fix the issue The worker would have all the dev tools ready All in all, Pete says that this was a great investment for the dev team These notes are just the main ideas of the talk. They don’t contain anecdotes and examples. If you like these ideas, I would advise watching the talk on the GDC Vault. The Toolsmiths I took these notes as part of our little “Book Club” for GDC Vault Videos The Toolsmiths #vault club Pete Kugler is a member of the Toolsmiths community. The Toolsmiths are a community of Game Tool Developers that are passionate about improving the way people make games. Join us on Slack. Join us on Twitter. Links GDC 2019 Pipeline Support for Feature Branches in ‘Destiny’ 2016 talk by Pete Kugler - GDC 2016 Developing a pipeline for managing game stability GDC 2019 Tools Tutorial Day: Tooling for Small Team Workflows GDC 2018 Tools Tutorial Day: Shipping ‘Call of Duty’ GDC 2018 Tools Tutorial Day: Bungie’s Asset Pipeline: ‘Destiny 2’ and Beyond HandmadeCon 2016 - Asset Systems and Scalability GDC 2019 Bungie’s Force Multipliers: Production Engineers GDC 2018 Teams Are Stronger Than Heroes: Bungie Development Evolved GDC 2018 Epic Sync: Wrangling the Work of Highly Interdependent Dev Teams at Bungie</summary></entry><entry><title type="html">Toolsmiths GDC 2019 Guide</title><link href="/https://victorstepanov.github.io/toolsmiths-gdc-2019-guide" rel="alternate" type="text/html" title="Toolsmiths GDC 2019 Guide" /><published>2019-03-06T02:00:00-08:00</published><updated>2019-03-06T02:00:00-08:00</updated><id>/https://victorstepanov.github.io/toolsmiths-gdc-2019-guide</id><content type="html" xml:base="/https://victorstepanov.github.io/toolsmiths-gdc-2019-guide">&lt;p&gt;I went over many sessions for this year’s GDC and created a list talks that would peek the interest of a Game Tools Developer.&lt;/p&gt;

&lt;p&gt;This guide can be found &lt;a href=&quot;http://thetoolsmiths.org/2019/03/06/gdc-2019-toolsmiths-guide/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name>Victor Stepanov</name></author><summary type="html">There are around 760+ sessions/tutorials/events at GDC 2019, finding the sessions that a tools developer would be interested in takes time. Below you will find a list of sessions that can become the base for your tools developer GDC 2019 experience, whether you plan on attending or you will be viewing post-factum.</summary></entry><entry><title type="html">The origin of the path</title><link href="/https://victorstepanov.github.io/origin-of-the-path" rel="alternate" type="text/html" title="The origin of the path" /><published>2019-02-27T17:00:00-08:00</published><updated>2019-02-27T17:00:00-08:00</updated><id>/https://victorstepanov.github.io/origin-of-the-path</id><content type="html" xml:base="/https://victorstepanov.github.io/origin-of-the-path">&lt;p&gt;After finishing the work on the first draft of the &lt;a href=&quot;http://thetoolsmiths.org/codex/learning_paths/tools_engineer_learning_path&quot;&gt;Tools Engineer Learning Path&lt;/a&gt;, I decided to write a short story behind the learning path and the thought process I went through when I was creating this resource.&lt;/p&gt;

&lt;p&gt;When I got into game development as a TE (Tools Engineer), I didn’t have a special education to suit the needs of this profession. I was hungry for knowledge and trying to find as much information I could, about tools and game development in general. It wasn’t easy to find information about tools in games. Maybe I wasn’t searching for the right things. Anyway, about one or two years into my career in games one of my colleagues introduced me to the &lt;a href=&quot;http://thetoolsmiths.org&quot;&gt;Toolsmiths website&lt;/a&gt; and the &lt;a href=&quot;http://thetoolsmiths.org/join_slack_team&quot;&gt;Toolsmiths Slack channel&lt;/a&gt;. I was thrilled with the amount of information I got from the &lt;a href=&quot;http://thetoolsmiths.org/archive&quot;&gt;Toolsmiths blog archive&lt;/a&gt; and the Slack conversations.&lt;/p&gt;

&lt;p&gt;One day while I was exploring the Toolsmiths website I found out that &lt;a href=&quot;https://twitter.com/gorlak&quot;&gt;Geoff Evans&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/davidlightbown&quot;&gt;David Lightbown&lt;/a&gt; did &lt;a href=&quot;http://thetoolsmiths.org/podcast&quot;&gt;Toolsmiths podcast&lt;/a&gt;. On one of the episodes, Geoff was talking about the GDC Tools Roundtable that he hosted. He talked about starting a number of initiatives for the Toolsmiths community, one which was a Game Tools Development Wiki that would contain information, links to articles and videos about game tools development. To say that I was excited would be an understatement especially knowing that this podcast aired four years ago. I was thinking that someone was working on this treasure trove of information for four years. Not long after I found out that no one executed on starting to gather knowledge into this Wiki. I thought to myself that this would be an excellent opportunity to help the tools community and learn at the same time. Around this time Geoff was porting the Toolsmiths’s website from some other blogging framework (I believe it was WordPress) to the GitHub static pages. Geoff finished the port and published it on &lt;a href=&quot;https://github.com/TheToolsmiths/TheToolsmiths.github.io&quot;&gt;GitHub&lt;/a&gt;. I started to help him with the website. The default theme of the to Toolsmiths website was lost during the port, and I decided to bring back the original look of the site. When I was done with that, I decided to start working on the Toolsmiths Wiki which is now known as the to &lt;a href=&quot;http://thetoolsmiths.org/codex/&quot;&gt;Toolsmiths Codex&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finishing the first version of the &lt;a href=&quot;http://thetoolsmiths.org/2018/03/16/toolsmiths-codex-launch/&quot;&gt;Codex about a year ago&lt;/a&gt;. I wasn’t 100% satisfied with it. I was feeling that something was missing. The Codex was a big collection of interesting articles videos and GDC links, but they were organized only by a couple of categories. While going through the recruiting process at Infinity Ward, I learned of Geoff’s &lt;a href=&quot;http://software.gorlak.org/recruiting/2018/07/13/tools-engineer-faq&quot;&gt;recruiting FAQ&lt;/a&gt; and the &lt;a href=&quot;https://gist.github.com/gorlak/1a0747efe88c5e3998144c5787d090ec&quot;&gt;Tools Engineer Checklist&lt;/a&gt;. Geoff divided the Tool Engineering role into three main disciplines: Content Editing Workflow, Content Build Pipeline, Reliability &amp;amp; Infrastructure. He had also created the Tools Engineering Checklist that contains subjects of interest that TEs should pursue to become masters of their trade. This got me thinking about which parts of the Codex and which parts of the checklist would map to which TE discipline. I started to create a mind map of all of the skills that a TE would need. The main categories  included: core software development skills, core computer science skills, core game developer skills, and core game tools development skills. This list of subjects would make the base of what a TE would need. Connecting all of these dots formed the first draft of the &lt;a href=&quot;http://thetoolsmiths.org/codex/learning_paths/tools_engineer_learning_path&quot;&gt;Tools Engineer Learning Path&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I plan to continue to updated polish it and improve it over the following years to create the ultimate resource for TEs. I’m sure that a TE at any level can find interesting nuggets of information that would help them become a better version of themselves.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://thetoolsmiths.org/codex/learning_paths/tools_engineer_learning_path&quot;&gt;Tools Engineer Learning Path&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://software.gorlak.org/recruiting/2018/07/13/tools-engineer-faq&quot;&gt;Tools Engineer Recruiting FAQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/gorlak/1a0747efe88c5e3998144c5787d090ec&quot;&gt;Tools Engineer Checklist&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thetoolsmiths.org/2018/03/16/toolsmiths-codex-launch/&quot;&gt;The Toolsmiths Codex&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Victor Stepanov</name></author><category term="Game_Tools_Dev" /><summary type="html">After finishing the work on the first draft of the Tools Engineer Learning Path, I decided to write a short story behind the learning path and the thought process I went through when I was creating this resource. When I got into game development as a TE (Tools Engineer), I didn’t have a special education to suit the needs of this profession. I was hungry for knowledge and trying to find as much information I could, about tools and game development in general. It wasn’t easy to find information about tools in games. Maybe I wasn’t searching for the right things. Anyway, about one or two years into my career in games one of my colleagues introduced me to the Toolsmiths website and the Toolsmiths Slack channel. I was thrilled with the amount of information I got from the Toolsmiths blog archive and the Slack conversations. One day while I was exploring the Toolsmiths website I found out that Geoff Evans and David Lightbown did Toolsmiths podcast. On one of the episodes, Geoff was talking about the GDC Tools Roundtable that he hosted. He talked about starting a number of initiatives for the Toolsmiths community, one which was a Game Tools Development Wiki that would contain information, links to articles and videos about game tools development. To say that I was excited would be an understatement especially knowing that this podcast aired four years ago. I was thinking that someone was working on this treasure trove of information for four years. Not long after I found out that no one executed on starting to gather knowledge into this Wiki. I thought to myself that this would be an excellent opportunity to help the tools community and learn at the same time. Around this time Geoff was porting the Toolsmiths’s website from some other blogging framework (I believe it was WordPress) to the GitHub static pages. Geoff finished the port and published it on GitHub. I started to help him with the website. The default theme of the to Toolsmiths website was lost during the port, and I decided to bring back the original look of the site. When I was done with that, I decided to start working on the Toolsmiths Wiki which is now known as the to Toolsmiths Codex. Finishing the first version of the Codex about a year ago. I wasn’t 100% satisfied with it. I was feeling that something was missing. The Codex was a big collection of interesting articles videos and GDC links, but they were organized only by a couple of categories. While going through the recruiting process at Infinity Ward, I learned of Geoff’s recruiting FAQ and the Tools Engineer Checklist. Geoff divided the Tool Engineering role into three main disciplines: Content Editing Workflow, Content Build Pipeline, Reliability &amp;amp; Infrastructure. He had also created the Tools Engineering Checklist that contains subjects of interest that TEs should pursue to become masters of their trade. This got me thinking about which parts of the Codex and which parts of the checklist would map to which TE discipline. I started to create a mind map of all of the skills that a TE would need. The main categories included: core software development skills, core computer science skills, core game developer skills, and core game tools development skills. This list of subjects would make the base of what a TE would need. Connecting all of these dots formed the first draft of the Tools Engineer Learning Path. I plan to continue to updated polish it and improve it over the following years to create the ultimate resource for TEs. I’m sure that a TE at any level can find interesting nuggets of information that would help them become a better version of themselves. Links Tools Engineer Learning Path Tools Engineer Recruiting FAQ Tools Engineer Checklist The Toolsmiths Codex</summary></entry><entry><title type="html">Roles in Game Tools Development</title><link href="/https://victorstepanov.github.io/tool-development-roles" rel="alternate" type="text/html" title="Roles in Game Tools Development" /><published>2019-01-24T17:00:00-08:00</published><updated>2019-01-24T17:00:00-08:00</updated><id>/https://victorstepanov.github.io/tool-development-roles</id><content type="html" xml:base="/https://victorstepanov.github.io/tool-development-roles">&lt;p&gt;Today in Game Development there are several roles that take part in creating new Game Tools and developing the existing ones. Depending on the number of people in a Game Development team multiple roles may be assigned to one responsible person. It would be challenging if not impossible to find a studio/company that has a dedicated person assigned to each of the roles listed. In this post, I will list the main roles and give them a short definition.&lt;/p&gt;

&lt;div style=&quot;background-color:#FFFF94;border-left: 6px solid #ffff48;&quot;&gt; 
DISCLAIMER: definitions in this post were produced from personal experience, GDC talks, blog posts, looking at job postings and talking with experts. They might differ from your own definitions. 
&lt;/div&gt;

&lt;h2 id=&quot;game-tools-engineering&quot;&gt;Game Tools Engineering&lt;/h2&gt;
&lt;p&gt;The roles involved in creating and maintaining the internal implementations of in-house digital content creation (DCC) tools, the content build pipeline, and the studio infrastructure. Usually, the work that these roles do doesn’t leave the studio’s walls.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/tool_development_roles/tool_engineer_roles.jpg&quot; alt=&quot;Tools Engineering Roles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Generalist Engine Programmer&lt;/i&gt; - in a small team setting the Generalist Engine Programmer knows the engine best and this is the best person to know how to integrate DCC tools and set up the pipeline.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Tools Engineer&lt;/i&gt; - dedicated engineering role responsible for maintaining the tools and pipelines that the game development team uses.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Pipeline Engineer&lt;/i&gt; - responsible for maintaining/evolving the tools and technologies part of the content development pipeline. Collaborating with Technical Artists to create the user-facing parts of the pipeline.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Infrastructure Tools Engineer&lt;/i&gt; - responsible for maintaining/evolving studio services part of Continuous Integration, database health, Version Control and workstation configuration.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;DCC Tools Engineer&lt;/i&gt; - responsible for maintaining/evolving the Game Engine Toolset. Working with Content Creators, Tech Artists, Tech Designers, and the Tool UX team to create the most optimal workflows possible.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Tools Support Specialist&lt;/i&gt; / &lt;i&gt;Production Engineer&lt;/i&gt; - first-line support for tool/pipeline user issues. Knowledge base of known issues, best practises and issue workarounds. The firefighter of game development.&lt;/p&gt;

&lt;h2 id=&quot;technical-art&quot;&gt;Technical Art&lt;/h2&gt;
&lt;p&gt;The part of the Game Development Team that bridges the gap between Engineering and Art.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/tool_development_roles/tech_art_team_roles.jpg&quot; alt=&quot;Tech Art Roles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Technical Artist&lt;/i&gt; - Responsible for tackling technical challenges that an art team can come across. Enables the artists to focus on creating art and not solving technical problems. Use great communication skills to bridge the gap between engineering and art.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;VFX Technical Artist&lt;/i&gt; - Technical artist that focuses on helping the VFX team with VFX tools and workflows. Masters of real-time effects, lighting, and shaders. Coordinates with the Tools User Experience team to provide the best experience possible. Provides feedback to the Render Team.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Pipeline Technical Artist&lt;/i&gt; - Works on streamlining the content build pipeline and workflows within the pipeline. Closely coordinates with the Tools Team to set up efficient asset creation processes.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Technical Animator&lt;/i&gt; - Tech Artist that specializes in development and support of rigging and animation technologies. Closely works with the Tools User Experience team to improve workflows and efficiency.&lt;/p&gt;

&lt;h2 id=&quot;technical-design&quot;&gt;Technical Design&lt;/h2&gt;
&lt;p&gt;The part of the Game Development Team that bridges the gap between Engineering and Design.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/tool_development_roles/tech_design_team_roles.jpg&quot; alt=&quot;Tech Design Roles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Tech Designer&lt;/i&gt; - the tech-savvy designer that helps bridge the gap between design and code. Help define pipelines and workflows for developing game mechanic related content. Talor tool feature request to better suit the non-technical designers.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Tech UI/UX Designer&lt;/i&gt; - Technical Designer that focuses on helping the UI team tackle technical problems of creating menus, navigation, and HUD.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Tech Audio Designer&lt;/i&gt; - Technical Designer that is focused on helping the audio team maintain and develop the audio system of the game engine. Coordinates with the Tools User Experience team to provide the best experience in the audio tools.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Tech Level Designer&lt;/i&gt; - work closely with the Level Design, Tools and Tools UX Teams to create a sublime level editing experience in the engine level editor.&lt;/p&gt;

&lt;h2 id=&quot;game-tools-uiux-and-design&quot;&gt;Game Tools UI/UX and Design&lt;/h2&gt;

&lt;p&gt;The part of the Tools Team that make the Engineers/ Tech Designers/Tech Artists more efficient, the Artist/Designers happier and budget have fewer drains.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/tool_development_roles/ux_team_roles.jpg&quot; alt=&quot;UI/UX and Design Roles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Tools Designer&lt;/i&gt; - Helping the Tools Team concentrate on the engineering side of the tools and pipeline. Spending time at users desks analyzing workflows and pointing out the “best bang for the buck” improvements to the Tools Engineers, Tech Designers, and Tech Artists.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;User Experience Designer&lt;/i&gt; - create and design UI/Workflows for in-house tools. Collaborate with Users and Tech Artists/Tech Designers/Tools Engineers to make the best UX possible.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;User Researcher&lt;/i&gt; - design and conduct research studies on experience and workflow for in-house tools. Outline, communicate research results and provide recommendations.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Tools UI Designer&lt;/i&gt; - responsibilities include: work on the design of Tool UIs; Maintain the Tools UI style guide; Verify that the style guide is properly implemented;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Tech Writer&lt;/i&gt; - the keeper of the studios knowledge base. Enabling quick new hire ramp ups.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Data Analytics Engineer / Tools Analytics&lt;/i&gt; - responsible for setting up Tool statistic gathering and statistical data analysis of tool usage. Coordinates with User Researcher to understand the reasons behind the user’s behaviors and actions.&lt;/p&gt;

&lt;h2 id=&quot;ad-hoc-tool-development&quot;&gt;Ad-hoc Tool Development&lt;/h2&gt;
&lt;p&gt;There is always a lot of work to go around when it comes to tools. When there aren’t enough resources in the Tools/Tech Design/Tech Art Teams other programmers come to help. 
&lt;img src=&quot;assets/images/posts/tool_development_roles/ad_hoc_team_roles.jpg&quot; alt=&quot;Ad-hoc Tools Roles&quot; /&gt;&lt;/p&gt;

&lt;div style=&quot;background-color:#FFFF94;border-left: 6px solid #ffff48;&quot;&gt; 
 Some might think Ad-hoc Tool Development is always a bad thing with issues like coordination/communication, redundant work, bus factor, new tool frameworks to support... But I would disagree. If this is done &lt;b&gt;right&lt;/b&gt; these issues can be avoided and this can be a &lt;b&gt;big help&lt;/b&gt; to the Tools/Tech Design/Tech Art Teams. 
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;This turned out a bit of a laundry list. Anyway, this is a good high-level overview of the game development roles that are involved in creating tools for building amazing interactive experiences. I believe this could be an excellent reference for people that are just starting out in the industry.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gorlak.dev/recruiting/2018/07/13/tools-engineer-faq&quot;&gt;Tools Engineer Recruiting FAQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wiki.polycount.com/wiki/Technical_Art&quot;&gt;Polycount wiki - Technical Art&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1022337/Tools-Development-at-Ubisoft-Building&quot;&gt;GDC 2015: Tools Development at Ubisoft: Building a Shared Vision to Improve the User Experience&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thetoolsmiths.org/2009/02/03/the-problem-with-ad-hoc-tools-teams/&quot;&gt;The Problem With Ad-Hoc Tools Teams&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thetoolsmiths.org/2009/02/16/best-of-comments-ad-hoc-and-gdc/&quot;&gt;Best of Comments: Ad-hoc and GDC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1014087/How-to-Train-your-Technical&quot;&gt;GDC 2010: How to Train your Technical Artist&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://technicalgamedesign.blogspot.com/2012/07/what-is-technical-game-designer.html&quot;&gt;What is a technical game designer?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ps&quot;&gt;P.S.&lt;/h2&gt;

&lt;p&gt;If you have a better definition to any of the above or you think I missed a role. Please feel free to DM me on &lt;a href=&quot;https://twitter.com/VictorStepanov&quot;&gt;twitter&lt;/a&gt; or leave a commnet here.&lt;/p&gt;</content><author><name>Victor Stepanov</name></author><category term="Game_Tools_Dev" /><category term="Roles" /><summary type="html">Today in Game Development there are several roles that take part in creating new Game Tools and developing the existing ones. Depending on the number of people in a Game Development team multiple roles may be assigned to one responsible person. It would be challenging if not impossible to find a studio/company that has a dedicated person assigned to each of the roles listed. In this post, I will list the main roles and give them a short definition. DISCLAIMER: definitions in this post were produced from personal experience, GDC talks, blog posts, looking at job postings and talking with experts. They might differ from your own definitions. Game Tools Engineering The roles involved in creating and maintaining the internal implementations of in-house digital content creation (DCC) tools, the content build pipeline, and the studio infrastructure. Usually, the work that these roles do doesn’t leave the studio’s walls. Generalist Engine Programmer - in a small team setting the Generalist Engine Programmer knows the engine best and this is the best person to know how to integrate DCC tools and set up the pipeline. Tools Engineer - dedicated engineering role responsible for maintaining the tools and pipelines that the game development team uses. Pipeline Engineer - responsible for maintaining/evolving the tools and technologies part of the content development pipeline. Collaborating with Technical Artists to create the user-facing parts of the pipeline. Infrastructure Tools Engineer - responsible for maintaining/evolving studio services part of Continuous Integration, database health, Version Control and workstation configuration. DCC Tools Engineer - responsible for maintaining/evolving the Game Engine Toolset. Working with Content Creators, Tech Artists, Tech Designers, and the Tool UX team to create the most optimal workflows possible. Tools Support Specialist / Production Engineer - first-line support for tool/pipeline user issues. Knowledge base of known issues, best practises and issue workarounds. The firefighter of game development. Technical Art The part of the Game Development Team that bridges the gap between Engineering and Art. Technical Artist - Responsible for tackling technical challenges that an art team can come across. Enables the artists to focus on creating art and not solving technical problems. Use great communication skills to bridge the gap between engineering and art. VFX Technical Artist - Technical artist that focuses on helping the VFX team with VFX tools and workflows. Masters of real-time effects, lighting, and shaders. Coordinates with the Tools User Experience team to provide the best experience possible. Provides feedback to the Render Team. Pipeline Technical Artist - Works on streamlining the content build pipeline and workflows within the pipeline. Closely coordinates with the Tools Team to set up efficient asset creation processes. Technical Animator - Tech Artist that specializes in development and support of rigging and animation technologies. Closely works with the Tools User Experience team to improve workflows and efficiency. Technical Design The part of the Game Development Team that bridges the gap between Engineering and Design. Tech Designer - the tech-savvy designer that helps bridge the gap between design and code. Help define pipelines and workflows for developing game mechanic related content. Talor tool feature request to better suit the non-technical designers. Tech UI/UX Designer - Technical Designer that focuses on helping the UI team tackle technical problems of creating menus, navigation, and HUD. Tech Audio Designer - Technical Designer that is focused on helping the audio team maintain and develop the audio system of the game engine. Coordinates with the Tools User Experience team to provide the best experience in the audio tools. Tech Level Designer - work closely with the Level Design, Tools and Tools UX Teams to create a sublime level editing experience in the engine level editor. Game Tools UI/UX and Design The part of the Tools Team that make the Engineers/ Tech Designers/Tech Artists more efficient, the Artist/Designers happier and budget have fewer drains. Tools Designer - Helping the Tools Team concentrate on the engineering side of the tools and pipeline. Spending time at users desks analyzing workflows and pointing out the “best bang for the buck” improvements to the Tools Engineers, Tech Designers, and Tech Artists. User Experience Designer - create and design UI/Workflows for in-house tools. Collaborate with Users and Tech Artists/Tech Designers/Tools Engineers to make the best UX possible. User Researcher - design and conduct research studies on experience and workflow for in-house tools. Outline, communicate research results and provide recommendations. Tools UI Designer - responsibilities include: work on the design of Tool UIs; Maintain the Tools UI style guide; Verify that the style guide is properly implemented; Tech Writer - the keeper of the studios knowledge base. Enabling quick new hire ramp ups. Data Analytics Engineer / Tools Analytics - responsible for setting up Tool statistic gathering and statistical data analysis of tool usage. Coordinates with User Researcher to understand the reasons behind the user’s behaviors and actions. Ad-hoc Tool Development There is always a lot of work to go around when it comes to tools. When there aren’t enough resources in the Tools/Tech Design/Tech Art Teams other programmers come to help.  Some might think Ad-hoc Tool Development is always a bad thing with issues like coordination/communication, redundant work, bus factor, new tool frameworks to support... But I would disagree. If this is done right these issues can be avoided and this can be a big help to the Tools/Tech Design/Tech Art Teams. Summary This turned out a bit of a laundry list. Anyway, this is a good high-level overview of the game development roles that are involved in creating tools for building amazing interactive experiences. I believe this could be an excellent reference for people that are just starting out in the industry. Links Tools Engineer Recruiting FAQ Polycount wiki - Technical Art GDC 2015: Tools Development at Ubisoft: Building a Shared Vision to Improve the User Experience The Problem With Ad-Hoc Tools Teams Best of Comments: Ad-hoc and GDC GDC 2010: How to Train your Technical Artist What is a technical game designer? P.S. If you have a better definition to any of the above or you think I missed a role. Please feel free to DM me on twitter or leave a commnet here.</summary></entry><entry><title type="html">Notes for “A Tale of Three Data Schemas”</title><link href="/https://victorstepanov.github.io/tools-tutorial-day-a-tale-of-three-data-schemas" rel="alternate" type="text/html" title="Notes for &quot;A Tale of Three Data Schemas&quot;" /><published>2018-10-06T18:00:00-07:00</published><updated>2018-10-06T18:00:00-07:00</updated><id>/https://victorstepanov.github.io/tools-tutorial-day-a-tale-of-three-data-schemas</id><content type="html" xml:base="/https://victorstepanov.github.io/tools-tutorial-day-a-tale-of-three-data-schemas">&lt;p&gt;GDC 2018, Tools Tutorial Day, Ludovic Chabant, Senior Software Engineer @ Electronic Arts Vancouver shared the know-how of the Frostbite engine team when it comes to designing the game’s data.&lt;/p&gt;

&lt;div style=&quot;background-color:#FFFF94;border-left: 6px solid #ffff48;&quot;&gt;
These are my notes that I wrote down from watching Ludovic's presentation. If you like what you read I hight recommend getting a GDC Vault subscription and watching the full talk &lt;a href=&quot;https://www.gdcvault.com/play/1025284/Tools-Tutorial-Day-A-Tale&quot;&gt;link to talk&lt;/a&gt;.
&lt;/div&gt;
&lt;p style=&quot;margin-bottom: 1em;&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;main-takeaway&quot;&gt;Main Takeaway&lt;/h2&gt;
&lt;p&gt;The same data is used in different ways. Optimizing the data’s logical representation for different usage scenarios is key in achieving great performance, efficient use of storage and a sublime user experience. The way that an artist thinks of the data that he or she sees in the editor window might not be the best way to represent the data to load it as fast as possible into the game or might not be the best way to store it on disk. Different data consumption scenarios demand different optimization. Off course maintaining more than one data layout isn’t free but it is worth the investment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/posts/tale_of_3_data_schemas/different_data_schemas_different_problems.png&quot; alt=&quot;different data schemas to solve different problems&quot; /&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;i&gt;&lt;small&gt;a picture of a side from Ludovic Chabant's GDC 2018 presentation&lt;/small&gt;&lt;/i&gt;
&lt;/div&gt;
&lt;p style=&quot;margin-bottom: 1em;&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;data-schema&quot;&gt;Data Schema&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt; a data schema is the formal description of the structures a system is working with.&lt;/p&gt;

&lt;h3 id=&quot;examples-of-data-schemas&quot;&gt;Examples of data schemas&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Public properties of script components in Unity&lt;/li&gt;
  &lt;li&gt;Decorated public properties of a UClass in Unreal Engine&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://knowledge.autodesk.com/support/maya/downloads/caas/CloudHelp/cloudhelp/2018/ENU/Maya-Modeling/files/GUID-6B2E2B87-C990-416F-B772-D0CED101F5E6-htm.html&quot;&gt;Blind Data&lt;/a&gt; in Maya&lt;/li&gt;
  &lt;li&gt;Table columns in a database management system&lt;/li&gt;
  &lt;li&gt;Frostbite DDF (Data Definition Format)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;basic-idea&quot;&gt;Basic idea&lt;/h3&gt;

&lt;p style=&quot;margin-bottom: 0;&quot;&gt;A data schema is a for communicating about the existence of a &lt;i&gt;type of something&lt;/i&gt; which has:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;properties like
    &lt;ul&gt;
      &lt;li&gt;ints&lt;/li&gt;
      &lt;li&gt;floats&lt;/li&gt;
      &lt;li&gt;etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;references to other types&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;usage-scenarios&quot;&gt;Usage scenarios&lt;/h3&gt;

&lt;p style=&quot;margin-bottom: 0;&quot;&gt;A data schema is used to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;display a type’s properties in an editor context.&lt;/li&gt;
  &lt;li&gt;store the type on disk.&lt;/li&gt;
  &lt;li&gt;load the type at runtime.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;designing-a-data-schema&quot;&gt;Designing a data schema&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;assets/images/posts/tale_of_3_data_schemas/designing_data_schemas.png&quot; alt=&quot;Designing data schemas requires consideration&quot; /&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;i&gt;&lt;small&gt;a picture of a side from Ludovic Chabant's GDC 2018 presentation&lt;/small&gt;&lt;/i&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
If you design a data schema with a &lt;strong&gt;programmer bias&lt;/strong&gt; you will get a data schema that will be great for loading at runtime.&lt;/p&gt;

&lt;p style=&quot;margin-bottom: 0;&quot;&gt;It will be:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;flat and packed&lt;/li&gt;
  &lt;li&gt;optimized for loading&lt;/li&gt;
  &lt;li&gt;unintelligible for designers and artists&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you design a data schema with a &lt;strong&gt;content creator bias&lt;/strong&gt; you will get a data schema that will be great for human understanding and iteration.&lt;/p&gt;

&lt;p style=&quot;margin-bottom: 0;&quot;&gt;It will be:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;easy to use and edit by multiple people&lt;/li&gt;
  &lt;li&gt;not cache friendly&lt;/li&gt;
  &lt;li&gt;not efficiently laid out in memory&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;three-different-data-schemas&quot;&gt;Three different data schemas&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;assets/images/posts/tale_of_3_data_schemas/not_just_one_data_schema.png&quot; alt=&quot;Not just one data schema&quot; /&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;i&gt;&lt;small&gt;a picture of a side from Ludovic Chabant's GDC 2018 presentation&lt;/small&gt;&lt;/i&gt;
&lt;/div&gt;
&lt;p style=&quot;margin-bottom: 1em;&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;runtime-data-schema&quot;&gt;Runtime data schema&lt;/h3&gt;
&lt;p style=&quot;margin-bottom: 0;&quot;&gt;&lt;strong&gt;used by&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the game for loading the data into memory&lt;/li&gt;
  &lt;li&gt;the programmers in the code&lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;margin-bottom: 0;&quot;&gt;&lt;strong&gt;purpose&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;performance&lt;/li&gt;
  &lt;li&gt;patching&lt;/li&gt;
  &lt;li&gt;loading&lt;/li&gt;
  &lt;li&gt;nicely packed in memory&lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;margin-bottom: 0;&quot;&gt;&lt;strong&gt; optimized for&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;reading&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;storage-data-schema&quot;&gt;Storage data schema&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;the tools backend&lt;/em&gt;
&lt;strong&gt;a.k.a disk version&lt;/strong&gt;&lt;/p&gt;

&lt;div style=&quot;background-color:#FFFF94;border-left: 6px solid #ffff48;&quot;&gt;
Tools usually use this to save what the user is working on (the logical peace of data).
Not to be confused with a data format like XML, JSON or YAML.
&lt;/div&gt;
&lt;p style=&quot;margin-bottom: 1em;&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;margin-bottom: 0;&quot;&gt;&lt;strong&gt;used by&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;tools to save users work on some form of persistent storage&lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;margin-bottom: 0;&quot;&gt;&lt;strong&gt;purpose&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;can be versioned and easily merged in revision control&lt;/li&gt;
  &lt;li&gt;can be used by tools for automation&lt;/li&gt;
  &lt;li&gt;supports multi-user editing (splitting into different parts)
    &lt;ul&gt;
      &lt;li&gt;for example, the runtime data schema doesn’t need this&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;margin-bottom: 0;&quot;&gt;&lt;strong&gt; optimized for&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;writing to disk&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tool-data-schema&quot;&gt;Tool data schema&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;the tools frontend&lt;/em&gt;&lt;/p&gt;

&lt;div style=&quot;background-color:#FFFF94;border-left: 6px solid #ffff48;&quot;&gt;
How the content creators see it in their minds. How the game data is displayed in an editor as a graph, property grid or a gizmo.
You can think of this as a subset of UX. Usually, very Object Oriented.
&lt;/div&gt;
&lt;p style=&quot;margin-bottom: 1em;&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;margin-bottom: 0;&quot;&gt;&lt;strong&gt;used by&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;content creators for content creation&lt;/li&gt;
  &lt;li&gt;engineers for analysis and decision making&lt;/li&gt;
  &lt;li&gt;tools developers for creating a great editing experience&lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;margin-bottom: 0;&quot;&gt;&lt;strong&gt;purpose&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;better understanding by humans&lt;/li&gt;
  &lt;li&gt;better UX&lt;/li&gt;
  &lt;li&gt;workflow and iteration oriented&lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;margin-bottom: 0;&quot;&gt;&lt;strong&gt; optimized for&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;editing&lt;/li&gt;
  &lt;li&gt;iteration&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;frostbite-engine-tails&quot;&gt;Frostbite Engine tails&lt;/h3&gt;

&lt;p&gt;Ludovic brings up 4 tails about how the 3 data schemas are used in the Frostbite Engine.&lt;/p&gt;

&lt;p style=&quot;margin-bottom: 0;&quot;&gt;The main points of the tails:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Use a more user-friendly data schema for user editing, but keep an eye out for where you do the conversion from one data schema to another.&lt;/li&gt;
  &lt;li&gt;Use different data schemas to solve different problems, and optimize for different use cases.&lt;/li&gt;
  &lt;li&gt;UX and Data Schemas have a strong relationship. Changing one might affect the other.&lt;/li&gt;
  &lt;li&gt;Use conditional compilation to include tools/storage data schemas in the runtime data schemas. Conditionally include appropriate pipeline code in the runtime to transform data on the fly during live-edit.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;the-most-important-data-schema&quot;&gt;The most important Data Schema&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;Storage Data Schema&lt;/strong&gt; is the most important Data Schema.
It is only Data Schema that is persistent.&lt;/p&gt;
&lt;div style=&quot;background-color:#FFFF94;border-left: 6px solid #ffff48;&quot;&gt;
it the most expensive to change, because it is persistent
&lt;/div&gt;
&lt;p style=&quot;margin-bottom: 1em;&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;designing-data-schemas&quot;&gt;Designing Data Schemas&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Start with designing the Storage Data Schema&lt;/li&gt;
  &lt;li&gt;Build your Tools around the Storage Data Schema&lt;/li&gt;
  &lt;li&gt;Implement your Runtime Code around the Storage Data Schema
    &lt;ul&gt;
      &lt;li&gt;if it is obvious that the Storage Schema is not performant enough go to the next subsection to find out how to deal with it&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;dealing-with-performance-issues&quot;&gt;Dealing with performance issues&lt;/h4&gt;
&lt;p style=&quot;margin-bottom: 0;&quot;&gt;If the Runtime Data Schema is not performant enough&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Adjust the Runtime Data Schema and the code&lt;/li&gt;
  &lt;li&gt;Write the pipeline code to convert from the Storage Schema to the Runtime Schema&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;mixing-data-schemas&quot;&gt;Mixing Data Schemas&lt;/h4&gt;
&lt;p&gt;If your engine does not formally support different types of data schemas, use conditional compilation to have ways to remove the Tools/Storage Data Schemas from the production build.&lt;/p&gt;

&lt;h3 id=&quot;what-we-have-learned&quot;&gt;What we have learned&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;There are different ways to organize the same logical data (Tools, Storage, Runtime)&lt;/li&gt;
  &lt;li&gt;Use more user-friendly data organization for the users of your Tools and a more performant way of data organization for your Runtime&lt;/li&gt;
  &lt;li&gt;With this way of organizing data, you can solve different problems without a lot of sacrifices&lt;/li&gt;
  &lt;li&gt;Always remember that a change in a Data Schema can lead to a change in the UX of a tool and vice versa&lt;/li&gt;
  &lt;li&gt;Have a pipeline in place to convert from the Storage Schema to the Runtime Schema&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;personal-notes&quot;&gt;Personal notes&lt;/h3&gt;
&lt;p&gt;This reminded me of &lt;a href=&quot;https://youtu.be/rX0ItVEVjHc?t=1394&quot;&gt;Mike Acton’s Data-Oriented Design talk&lt;/a&gt; where every problem in programming is a data transformation problem.&lt;/p&gt;

&lt;h2 id=&quot;mindmap--mental-representation&quot;&gt;Mindmap / Mental Representation&lt;/h2&gt;

&lt;iframe src=&quot;https://www.xmind.net/embed/THiC/&quot; width=&quot;750px&quot; height=&quot;450px&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href=&quot;https://www.xmind.net/m/THiC/&quot;&gt;Click to see it in fullscreen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.dropbox.com/s/v9o5opk5llrqmvp/Data%20Schemas.xmind?dl=0&quot;&gt;Link to mindmap source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can open the file with &lt;a href=&quot;https://github.com/xmindltd/xmind&quot;&gt;XMind&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-toolsmiths&quot;&gt;The Toolsmiths&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://thetoolsmiths.org/assets/thetoolsmiths_cover_1000x2881.png&quot; alt=&quot;The Toolsmiths logo&quot; /&gt;
&lt;strong&gt;Ludovic Chabant&lt;/strong&gt; is a member of the &lt;a href=&quot;http://thetoolsmiths.org/&quot;&gt;Toolsmiths&lt;/a&gt; community. The Toolsmiths are a community of Game Tool Developers that are passionate about improving the way people make games.&lt;/p&gt;

&lt;p&gt;Join us on &lt;a href=&quot;http://thetoolsmiths.org/join_slack_team&quot;&gt;Slack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Join us on &lt;a href=&quot;https://twitter.com/thetoolsmiths&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ea.com/frostbite/news/a-tale-of-three-data-schemas&quot;&gt;Slides: A Tale of Three Data Schemas&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025284/Tools-Tutorial-Day-A-Tale&quot;&gt;GDC Vault Video: A Tale of Three Data Schemas&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/ludovicchabant?lang=en&quot;&gt;Ludovic Chabant on Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Victor Stepanov</name></author><category term="GDC" /><category term="Tools_Tutorial_Day" /><category term="data" /><summary type="html">GDC 2018, Tools Tutorial Day, Ludovic Chabant, Senior Software Engineer @ Electronic Arts Vancouver shared the know-how of the Frostbite engine team when it comes to designing the game’s data. These are my notes that I wrote down from watching Ludovic's presentation. If you like what you read I hight recommend getting a GDC Vault subscription and watching the full talk link to talk. Main Takeaway The same data is used in different ways. Optimizing the data’s logical representation for different usage scenarios is key in achieving great performance, efficient use of storage and a sublime user experience. The way that an artist thinks of the data that he or she sees in the editor window might not be the best way to represent the data to load it as fast as possible into the game or might not be the best way to store it on disk. Different data consumption scenarios demand different optimization. Off course maintaining more than one data layout isn’t free but it is worth the investment. a picture of a side from Ludovic Chabant's GDC 2018 presentation Data Schema Definition: a data schema is the formal description of the structures a system is working with. Examples of data schemas Public properties of script components in Unity Decorated public properties of a UClass in Unreal Engine Blind Data in Maya Table columns in a database management system Frostbite DDF (Data Definition Format) Basic idea A data schema is a for communicating about the existence of a type of something which has: properties like ints floats etc. references to other types Usage scenarios A data schema is used to: display a type’s properties in an editor context. store the type on disk. load the type at runtime. Designing a data schema a picture of a side from Ludovic Chabant's GDC 2018 presentation If you design a data schema with a programmer bias you will get a data schema that will be great for loading at runtime. It will be: flat and packed optimized for loading unintelligible for designers and artists If you design a data schema with a content creator bias you will get a data schema that will be great for human understanding and iteration. It will be: easy to use and edit by multiple people not cache friendly not efficiently laid out in memory Three different data schemas a picture of a side from Ludovic Chabant's GDC 2018 presentation Runtime data schema used by the game for loading the data into memory the programmers in the code purpose performance patching loading nicely packed in memory optimized for reading Storage data schema the tools backend a.k.a disk version Tools usually use this to save what the user is working on (the logical peace of data). Not to be confused with a data format like XML, JSON or YAML. used by tools to save users work on some form of persistent storage purpose can be versioned and easily merged in revision control can be used by tools for automation supports multi-user editing (splitting into different parts) for example, the runtime data schema doesn’t need this optimized for writing to disk Tool data schema the tools frontend How the content creators see it in their minds. How the game data is displayed in an editor as a graph, property grid or a gizmo. You can think of this as a subset of UX. Usually, very Object Oriented. used by content creators for content creation engineers for analysis and decision making tools developers for creating a great editing experience purpose better understanding by humans better UX workflow and iteration oriented optimized for editing iteration Frostbite Engine tails Ludovic brings up 4 tails about how the 3 data schemas are used in the Frostbite Engine. The main points of the tails: Use a more user-friendly data schema for user editing, but keep an eye out for where you do the conversion from one data schema to another. Use different data schemas to solve different problems, and optimize for different use cases. UX and Data Schemas have a strong relationship. Changing one might affect the other. Use conditional compilation to include tools/storage data schemas in the runtime data schemas. Conditionally include appropriate pipeline code in the runtime to transform data on the fly during live-edit. The most important Data Schema The Storage Data Schema is the most important Data Schema. It is only Data Schema that is persistent. it the most expensive to change, because it is persistent Designing Data Schemas Start with designing the Storage Data Schema Build your Tools around the Storage Data Schema Implement your Runtime Code around the Storage Data Schema if it is obvious that the Storage Schema is not performant enough go to the next subsection to find out how to deal with it Dealing with performance issues If the Runtime Data Schema is not performant enough Adjust the Runtime Data Schema and the code Write the pipeline code to convert from the Storage Schema to the Runtime Schema Mixing Data Schemas If your engine does not formally support different types of data schemas, use conditional compilation to have ways to remove the Tools/Storage Data Schemas from the production build. What we have learned There are different ways to organize the same logical data (Tools, Storage, Runtime) Use more user-friendly data organization for the users of your Tools and a more performant way of data organization for your Runtime With this way of organizing data, you can solve different problems without a lot of sacrifices Always remember that a change in a Data Schema can lead to a change in the UX of a tool and vice versa Have a pipeline in place to convert from the Storage Schema to the Runtime Schema Personal notes This reminded me of Mike Acton’s Data-Oriented Design talk where every problem in programming is a data transformation problem. Mindmap / Mental Representation Click to see it in fullscreen Link to mindmap source You can open the file with XMind The Toolsmiths Ludovic Chabant is a member of the Toolsmiths community. The Toolsmiths are a community of Game Tool Developers that are passionate about improving the way people make games. Join us on Slack. Join us on Twitter. Links Slides: A Tale of Three Data Schemas GDC Vault Video: A Tale of Three Data Schemas Ludovic Chabant on Twitter</summary></entry><entry><title type="html">The efficiency ratio for game tools improvements</title><link href="/https://victorstepanov.github.io/the-efficiency-ratio-for-game-tools-improvements" rel="alternate" type="text/html" title="The efficiency ratio for game tools improvements" /><published>2018-07-17T18:00:00-07:00</published><updated>2018-07-17T18:00:00-07:00</updated><id>/https://victorstepanov.github.io/the-efficiency-ratio-for-game-tools-improvements</id><content type="html" xml:base="/https://victorstepanov.github.io/the-efficiency-ratio-for-game-tools-improvements">&lt;p&gt;&lt;em&gt;Last Update on July 22nd, 2018&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;game-tools-as-an-investment&quot;&gt;Game Tools as an investment&lt;/h2&gt;

&lt;p&gt;Having a Game Tools Development Team (GTDT) is an investment and when you are investing you want to get as much Return On Investment (ROI) as you possibly can. This means the GTDT should be working on the “right” issues of the production pipeline. It is not always clear what the “right” issues are.&lt;/p&gt;

&lt;p&gt;The GTDT investment is made by the time resource that the team has. Apart from the time spent on bug fixes the GTDT spends a significant portion of its resource on improving the production pipeline. We need some way to measure the efficiency of the time spent on improving different parts of the pipeline.&lt;/p&gt;

&lt;h2 id=&quot;is-it-worth-the-time&quot;&gt;“Is it worth the time”&lt;/h2&gt;

&lt;p&gt;As a young programmer, I used to have a mindset of “I can write a program for this” at almost any problem that I would encounter. Automating things is great but automating every single task I would encounter would be a waste of time, especially if the task that I wanted to automate would need to be done only once a year or so. A number of years ago I found an excellent resource that could answer the question should I automate this. This resource was an &lt;a href=&quot;https://xkcd.com/1205/&quot;&gt;xkcd “Is it worth the time” comic&lt;/a&gt; [1]. I usually reference it to stop myself from automating everything with Python.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://imgs.xkcd.com/comics/is_it_worth_the_time.png&quot; alt=&quot;Is It Worth the Time?&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;mapping-the-table-to-game-tools-development&quot;&gt;Mapping the table to Game Tools Development&lt;/h2&gt;

&lt;p&gt;When you are in a GTDT most of your work is aimed at improving the workflows of others on the production team. Projecting the table onto the work of a GTDT and you get a table that can be used to calculate the efficiency ratio of the Tool Developers.&lt;/p&gt;

&lt;p&gt;The original table is used for saving the time of the single person that is using the table. When working on an improvement for a tool, the Tool Developer is improving the workflow of multiple people. Meaning that the time saved is multiplied by the number of users that will benefit from the improvement to the tool.&lt;/p&gt;

&lt;p&gt;Here are some examples of how the efficiency table can look like:&lt;/p&gt;
&lt;div style=&quot;background-color:#FFFF94;border-left: 6px solid #ffff48;&quot;&gt;
I'll make some assumptions:
&lt;ul&gt;
  &lt;li&gt;a 3-year game production;  &lt;/li&gt;
  &lt;li&gt;5-day work week; 8-hour work day;  &lt;/li&gt;
  &lt;li&gt;260 work days in a year;  &lt;/li&gt;
  &lt;li&gt;52 work weeks;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;h3 id=&quot;how-long-can-you-work-on-an-improvement-of-a-tool-that-will-benefit-2-users&quot;&gt;How long can you work on an improvement of a tool that will benefit 2 users:&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;assets/images/roi_for_tool_impruvment_2_users.png&quot; alt=&quot;Table for 2&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;how-long-can-you-work-on-an-improvement-of-a-tool-that-will-benefit-10-users&quot;&gt;How long can you work on an improvement of a tool that will benefit 10 users:&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;assets/images/roi_for_tool_impruvment_10_users.png&quot; alt=&quot;Table for 10&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-use-the-efficiency-table&quot;&gt;How to use the efficiency table&lt;/h2&gt;

&lt;p&gt;The ratio of the time that it will take to implement the improvement, to the time savings can be used to determine how efficient the usage of the GTDT resources will be. The calculated ratio can determine how efficient it would be to implement this improvement to the tool. The smaller the ratio the better.&lt;/p&gt;

&lt;p&gt;Depending on the process used for developing improvements in the tools the ratio can look like this:
&lt;img src=&quot;assets/images/game_tool_efficienct_ratio.png&quot; alt=&quot;the efficiency ratio&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If an improvement will take longer to implement than the total time saved - it doesn’t mean that the improvement isn’t worth implementing. It just means that there might be another improvement that will be more efficient to implement in the current circumstance. This might be due to the fact that there are not enough users that can benefit from the improvement.&lt;/p&gt;

&lt;p&gt;Another thing to consider is the sanity of the user of the tool. &lt;a href=&quot;https://twitter.com/srekel&quot;&gt;Anders Elfgren&lt;/a&gt; brought up this point in one of the many interesting conversations in the &lt;a href=&quot;http://thetoolsmiths.org/join_slack_team&quot;&gt;Toolsmiths Slack&lt;/a&gt;. &lt;img src=&quot;assets/images/sanity.png&quot; alt=&quot;don't forget about the sanity&quot; /&gt; Even if it isn’t efficient to implement the improvement, helping save the user’s mental state is something to keep in mind when deciding what to do.&lt;/p&gt;

&lt;h2 id=&quot;game-tools-ux-angle&quot;&gt;Game Tools UX angle&lt;/h2&gt;

&lt;p&gt;It may seem that saving a second or two is not that much. However, when an operation is performed by many users a hundred times per day the savings can be significant over the lifetime of the production or tool. &lt;a href=&quot;https://twitter.com/RYStorm&quot;&gt;Robin-Yann Storm&lt;/a&gt; touches on this point at his &lt;a href=&quot;https://www.gdcvault.com/play/1025287/Tools-Tutorial-Day-UX-Microtalks&quot;&gt;GDC UX micro talk&lt;/a&gt;[3], where he explores the UX features of an editor Gizmo. The Gizmo is one of the most day-to-day used features of any Level Editor.&lt;/p&gt;

&lt;p&gt;Every second counts when it comes to optimizing commonly used tool functionality. If you don’t believe me, you can use the Human Factors &lt;a href=&quot;http://www.humanfactors.com/coolstuff/roi_increase_productivity.asp&quot;&gt;“Increased productivity ROI calculator”&lt;/a&gt;[2, 4] where you can see how even the smallest savings in time can save a lot of money for the production.&lt;/p&gt;

&lt;p&gt;If you are interested in topics like these, I would recommend reading &lt;a href=&quot;https://www.crcpress.com/Designing-the-User-Experience-of-Game-Development-Tools/Lightbown/p/book/9781482240191&quot;&gt;David Lightbown’s book&lt;/a&gt;[2]. David covers a range of topics about how to improve game development tools from the UX point of view. Here is an example of how focusing on the right users can maximize the improvement while keeping the investment to a minimum.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/Fig3_3page_31_Designing_the_User_Experience_of_Game_Development_Tools.png&quot; alt=&quot;Designing the User Experience of Game Development Tools, (p. 31, Figure 3.3), David Lightbown&quot; /&gt;
&lt;em&gt;A figure about maximizing the improvement while keeping the investment to a minimum from the “Designing the User Experience of Game Development Tools” book [2.1]. Used with permission from David Lightbown.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;Of course, the tool and the improvement in the tool will live longer than the project production time. However, this ratio is more of measuring how efficient are the GTDT resources spent during the production life cycle of a game.&lt;/p&gt;

&lt;p&gt;It is important to note that this table can only be used for a part of the GTDT responsibilities. There are other essential maintenance and validation tasks that can’t be simply measured in terms of how efficient the tools team is used. We will need to think of some other way to measure those Tool Team activities. I’ll write down some thoughts on maintenance and validation improvements in a future post.&lt;/p&gt;

&lt;h2 id=&quot;make-your-own-table&quot;&gt;Make your own table&lt;/h2&gt;
&lt;p&gt;If you want to make your own table for estimating the profits that you can reap from optimizing the development process you can go ahead and punch in your own numbers:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.dropbox.com/s/eg1yy26dmi9b12v/Tool%20Team%20efficiency%20%2810%20Users%29.xlsx?dl=0&quot;&gt;link to spreadsheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The primary variables in the spreadsheet are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the number of years the project will be worked on&lt;/li&gt;
  &lt;li&gt;the number of users that will reap the benefits from the improvements to the tool&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/editing_the_roi_table.png&quot; alt=&quot;Location on the spreadsheet that can be edited&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;update-07222018&quot;&gt;Update 07/22/2018&lt;/h2&gt;
&lt;p&gt;Some insightful comments from the &lt;a href=&quot;http://thetoolsmiths.org/join_slack_team&quot;&gt;Toolsmiths&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/srekel&quot;&gt;Anders Elfgren&lt;/a&gt; writes:
&lt;img src=&quot;assets/images/efficiency_ratio_comment1.png&quot; alt=&quot;Toolsmiths Slack post comment 1&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://twitter.com/RYStorm&quot;&gt;Robin-Yann Storm&lt;/a&gt; writes:
&lt;img src=&quot;assets/images/efficiency_ratio_comment2.png&quot; alt=&quot;Toolsmiths Slack post comment 2&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://xkcd.com/1205/?utm_source=feedly&quot;&gt;Is It Worth the Time?, xkcd, Randall Munroe&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.crcpress.com/Designing-the-User-Experience-of-Game-Development-Tools/Lightbown/p/book/9781482240191&quot;&gt;Designing the User Experience of Game Development Tools, David Lightbown&lt;/a&gt;
2.1 &lt;a href=&quot;https://www.crcpress.com/Designing-the-User-Experience-of-Game-Development-Tools/Lightbown/p/book/9781482240191&quot;&gt;Designing the User Experience of Game Development Tools, (pp. 30-32), David Lightbown&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gdcvault.com/play/1025287/Tools-Tutorial-Day-UX-Microtalks&quot;&gt;Tools Tutorial Day: UX Microtalks, Part 1, GDC 2018, David Lightbown, Nikoline Høgh, Robin-Yann Storm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.humanfactors.com/coolstuff/roi_increase_productivity.asp&quot;&gt;Increased productivity ROI calculator, Human Factors International&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Victor Stepanov</name></author><summary type="html">Last Update on July 22nd, 2018 Game Tools as an investment Having a Game Tools Development Team (GTDT) is an investment and when you are investing you want to get as much Return On Investment (ROI) as you possibly can. This means the GTDT should be working on the “right” issues of the production pipeline. It is not always clear what the “right” issues are. The GTDT investment is made by the time resource that the team has. Apart from the time spent on bug fixes the GTDT spends a significant portion of its resource on improving the production pipeline. We need some way to measure the efficiency of the time spent on improving different parts of the pipeline. “Is it worth the time” As a young programmer, I used to have a mindset of “I can write a program for this” at almost any problem that I would encounter. Automating things is great but automating every single task I would encounter would be a waste of time, especially if the task that I wanted to automate would need to be done only once a year or so. A number of years ago I found an excellent resource that could answer the question should I automate this. This resource was an xkcd “Is it worth the time” comic [1]. I usually reference it to stop myself from automating everything with Python. Mapping the table to Game Tools Development When you are in a GTDT most of your work is aimed at improving the workflows of others on the production team. Projecting the table onto the work of a GTDT and you get a table that can be used to calculate the efficiency ratio of the Tool Developers. The original table is used for saving the time of the single person that is using the table. When working on an improvement for a tool, the Tool Developer is improving the workflow of multiple people. Meaning that the time saved is multiplied by the number of users that will benefit from the improvement to the tool. Here are some examples of how the efficiency table can look like: I'll make some assumptions: a 3-year game production; 5-day work week; 8-hour work day; 260 work days in a year; 52 work weeks; How long can you work on an improvement of a tool that will benefit 2 users: How long can you work on an improvement of a tool that will benefit 10 users: How to use the efficiency table The ratio of the time that it will take to implement the improvement, to the time savings can be used to determine how efficient the usage of the GTDT resources will be. The calculated ratio can determine how efficient it would be to implement this improvement to the tool. The smaller the ratio the better. Depending on the process used for developing improvements in the tools the ratio can look like this: If an improvement will take longer to implement than the total time saved - it doesn’t mean that the improvement isn’t worth implementing. It just means that there might be another improvement that will be more efficient to implement in the current circumstance. This might be due to the fact that there are not enough users that can benefit from the improvement. Another thing to consider is the sanity of the user of the tool. Anders Elfgren brought up this point in one of the many interesting conversations in the Toolsmiths Slack. Even if it isn’t efficient to implement the improvement, helping save the user’s mental state is something to keep in mind when deciding what to do. Game Tools UX angle It may seem that saving a second or two is not that much. However, when an operation is performed by many users a hundred times per day the savings can be significant over the lifetime of the production or tool. Robin-Yann Storm touches on this point at his GDC UX micro talk[3], where he explores the UX features of an editor Gizmo. The Gizmo is one of the most day-to-day used features of any Level Editor. Every second counts when it comes to optimizing commonly used tool functionality. If you don’t believe me, you can use the Human Factors “Increased productivity ROI calculator”[2, 4] where you can see how even the smallest savings in time can save a lot of money for the production. If you are interested in topics like these, I would recommend reading David Lightbown’s book[2]. David covers a range of topics about how to improve game development tools from the UX point of view. Here is an example of how focusing on the right users can maximize the improvement while keeping the investment to a minimum. A figure about maximizing the improvement while keeping the investment to a minimum from the “Designing the User Experience of Game Development Tools” book [2.1]. Used with permission from David Lightbown. Final thoughts Of course, the tool and the improvement in the tool will live longer than the project production time. However, this ratio is more of measuring how efficient are the GTDT resources spent during the production life cycle of a game. It is important to note that this table can only be used for a part of the GTDT responsibilities. There are other essential maintenance and validation tasks that can’t be simply measured in terms of how efficient the tools team is used. We will need to think of some other way to measure those Tool Team activities. I’ll write down some thoughts on maintenance and validation improvements in a future post. Make your own table If you want to make your own table for estimating the profits that you can reap from optimizing the development process you can go ahead and punch in your own numbers: link to spreadsheet The primary variables in the spreadsheet are: the number of years the project will be worked on the number of users that will reap the benefits from the improvements to the tool Update 07/22/2018 Some insightful comments from the Toolsmiths: Anders Elfgren writes: Robin-Yann Storm writes: References Is It Worth the Time?, xkcd, Randall Munroe Designing the User Experience of Game Development Tools, David Lightbown 2.1 Designing the User Experience of Game Development Tools, (pp. 30-32), David Lightbown Tools Tutorial Day: UX Microtalks, Part 1, GDC 2018, David Lightbown, Nikoline Høgh, Robin-Yann Storm Increased productivity ROI calculator, Human Factors International</summary></entry><entry><title type="html">The Toolsmiths Codex Launch</title><link href="/https://victorstepanov.github.io/toolsmiths-codex-launch" rel="alternate" type="text/html" title="The Toolsmiths Codex Launch" /><published>2018-03-15T18:00:00-07:00</published><updated>2018-03-15T18:00:00-07:00</updated><id>/https://victorstepanov.github.io/toolsmiths-codex-launch</id><content type="html" xml:base="/https://victorstepanov.github.io/toolsmiths-codex-launch">&lt;p&gt;The Toolsmiths Codex is a treasure trove of information regarding Game Tools Development. The Codex will continuously be curated and updated by the Toolsmiths Slack Team.&lt;/p&gt;

&lt;p&gt;Link to blog post on the Toolsmiths website can be found &lt;a href=&quot;http://thetoolsmiths.org/2018/03/16/toolsmiths-codex-launch&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This codex can be found &lt;a href=&quot;http://thetoolsmiths.org/codex/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name>Victor Stepanov</name></author><summary type="html">It’s not always easy to find information regarding Game Tools Development on the Internet. There isn't just one place where you can go and find information regarding a particular topic. With the insight and knowledge of The Toolsmiths Community, with developers from around the world, we have made an excellent online resource for Game Tools Developers, and it is called The Toolsmiths Codex.</summary></entry><entry><title type="html">Toolsmiths GDC 2018 Guide</title><link href="/https://victorstepanov.github.io/toolsmiths-gdc-2018-guide" rel="alternate" type="text/html" title="Toolsmiths GDC 2018 Guide" /><published>2018-02-25T02:00:00-08:00</published><updated>2018-02-25T02:00:00-08:00</updated><id>/https://victorstepanov.github.io/toolsmiths-gdc-2018-guide</id><content type="html" xml:base="/https://victorstepanov.github.io/toolsmiths-gdc-2018-guide">&lt;p&gt;I went over many sessions for this year’s GDC and created a list talks that would peek the interest of a Game Tools Developer.&lt;/p&gt;

&lt;p&gt;This guide can be found &lt;a href=&quot;http://thetoolsmiths.org/2018/02/26/gdc-2018-toolsmiths-guide/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name>Victor Stepanov</name></author><summary type="html">There are around 650+ sessions at this year's GDC, and it isn't easy to find sessions that you as a tools developer might enjoy. I have tried to find and collect most of the talks that a tools developer would be interested in attending or watching after the fact.</summary></entry></feed>