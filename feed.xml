<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="/https://tools.engineer/feed.xml" rel="self" type="application/atom+xml" /><link href="/https://tools.engineer/" rel="alternate" type="text/html" /><updated>2025-08-27T08:15:37+00:00</updated><id>/https://tools.engineer/feed.xml</id><title type="html">Victor Stepanov</title><subtitle>Passionate about making game developers more productive</subtitle><entry><title type="html">GDC 2025: Game Tools Developer Guide</title><link href="/https://tools.engineer/gdc-2025-toolsmiths-guide" rel="alternate" type="text/html" title="GDC 2025: Game Tools Developer Guide" /><published>2025-02-12T10:00:00+00:00</published><updated>2025-02-12T10:00:00+00:00</updated><id>/https://tools.engineer/gdc-2025-toolsmiths-guide</id><content type="html" xml:base="/https://tools.engineer/gdc-2025-toolsmiths-guide"><![CDATA[<p>I went over many sessions for this year’s GDC and created a list talks that would peek the interest of a Game Tools Developer.</p>

<p>This guide can be found <a href="https://thetoolsmiths.org/2025/03/12/gdc-2025-toolsmiths-guide/">here</a>.</p>]]></content><author><name>Victor Stepanov</name></author><summary type="html"><![CDATA[At GDC 2025, you’ll be able to explore more than 730 sessions, tutorials, and events. Since 340 of them mention “tool” or related terms, narrowing down the right ones can feel daunting.]]></summary></entry><entry><title type="html">GDC 2024: Game Tools Developer Guide</title><link href="/https://tools.engineer/gdc-2024-toolsmiths-guide" rel="alternate" type="text/html" title="GDC 2024: Game Tools Developer Guide" /><published>2024-02-24T10:00:00+00:00</published><updated>2024-02-24T10:00:00+00:00</updated><id>/https://tools.engineer/gdc-2024-toolsmiths-guide</id><content type="html" xml:base="/https://tools.engineer/gdc-2024-toolsmiths-guide"><![CDATA[<p>I went over many sessions for this year’s GDC and created a list talks that would peek the interest of a Game Tools Developer.</p>

<p>This guide can be found <a href="https://thetoolsmiths.org/2024/02/24/gdc-2024-toolsmiths-guide/">here</a>.</p>]]></content><author><name>Victor Stepanov</name></author><summary type="html"><![CDATA[The GDC 2024 agenda spans more than 650 sessions, tutorials, and events. Of these, 350 highlight “tool” or similar concepts, which can make finding the ones that match your expertise a demanding task.]]></summary></entry><entry><title type="html">GDC 2023: Game Tools Developer Guide</title><link href="/https://tools.engineer/gdc-2023-toolsmiths-guide" rel="alternate" type="text/html" title="GDC 2023: Game Tools Developer Guide" /><published>2023-03-17T10:00:00+00:00</published><updated>2023-03-17T10:00:00+00:00</updated><id>/https://tools.engineer/gdc-2023-toolsmiths-guide</id><content type="html" xml:base="/https://tools.engineer/gdc-2023-toolsmiths-guide"><![CDATA[<p>I went over many sessions for this year’s GDC and created a list talks that would peek the interest of a Game Tools Developer.</p>

<p>This guide can be found <a href="https://thetoolsmiths.org/2023/03/17/gdc-2023-toolsmiths-guide/">here</a>.</p>]]></content><author><name>Victor Stepanov</name></author><summary type="html"><![CDATA[With more than 700 sessions, tutorials, and events at GDC 2023 and 386 centered on “tool” or related topics it’s easy to feel adrift while searching for the right ones.]]></summary></entry><entry><title type="html">GDC 2022: Game Tools Developer Guide</title><link href="/https://tools.engineer/gdc-2022-toolsmiths-guide" rel="alternate" type="text/html" title="GDC 2022: Game Tools Developer Guide" /><published>2022-03-18T10:00:00+00:00</published><updated>2022-03-18T10:00:00+00:00</updated><id>/https://tools.engineer/gdc-2022-toolsmiths-guide</id><content type="html" xml:base="/https://tools.engineer/gdc-2022-toolsmiths-guide"><![CDATA[<p>I went over many sessions for this year’s GDC and created a list talks that would peek the interest of a Game Tools Developer.</p>

<p>This guide can be found <a href="https://thetoolsmiths.org/2022/03/18/gdc-2022-toolsmiths-guide/">here</a>.</p>]]></content><author><name>Victor Stepanov</name></author><summary type="html"><![CDATA[There are around 600+ sessions/tutorials/events at GDC 2022, finding the sessions that a tools developer would be interested in takes time. Below you will find a list of sessions that can be used as a guide for your tools developer GDC 2022 experience, whether you plan on attending or you will be viewing after the fact.]]></summary></entry><entry><title type="html">Notes for ‘What is USD: A Primer’ SIGGRAPH 2019</title><link href="/https://tools.engineer/siggraph2019-what-is-usd-a-primer" rel="alternate" type="text/html" title="Notes for ‘What is USD: A Primer’ SIGGRAPH 2019" /><published>2020-09-30T01:00:00+00:00</published><updated>2020-09-30T01:00:00+00:00</updated><id>/https://tools.engineer/siggraph2019-what-is-usd-a-primer</id><content type="html" xml:base="/https://tools.engineer/siggraph2019-what-is-usd-a-primer"><![CDATA[<p><strong>TLDW Summary</strong>: This talk is an intro to the key concepts and terminology of Universal Scene Description. The presentation shows examples of how USD is integrated into SideFX products.</p>

<h2 id="key-terms">Key Terms</h2>
<div class="keyword-container">
<ul class="keyword-container">
<li>Universal Scene Description</li>
<li>Scene Graph</li>
<li>Layer</li>
<li>Hydra</li>
<li>DCC</li>
</ul>
<style>
    .keyword-container > ul
    {
        font-size: 16px;
        list-style-type: none;
        padding:15px;
    }
    .keyword-container > li
    {
        background-color:#f3f3f3;
        display : inline;
        padding:5px;
        margin:2px;
        margin-bottom: 100px;
        border-radius: 5px;
    }
</style>
</div>

<h2 id="presentation-time-stamps">Presentation Time Stamps</h2>

<p><a href="https://www.youtube.com/watch?v=Yp_TRVD3wjQ" target="_blank">Link</a> to the talk on YouTube.</p>

<ul>
  <li><a href="https://youtu.be/Yp_TRVD3wjQ?t=41" target="_blank">at minute 1</a> What is USD?</li>
  <li><a href="https://youtu.be/Yp_TRVD3wjQ?t=237" target="_blank">at minute 4</a> “Layer” term</li>
  <li><a href="https://youtu.be/Yp_TRVD3wjQ?t=253" target="_blank">at minute 4</a> “Stage” term</li>
  <li><a href="https://youtu.be/Yp_TRVD3wjQ?t=285" target="_blank">at minute 4</a> “Composition Arcs” term</li>
  <li><a href="https://youtu.be/Yp_TRVD3wjQ?t=339" target="_blank">at minute 5</a> “SubLayers” term</li>
  <li><a href="https://youtu.be/Yp_TRVD3wjQ?t=434" target="_blank">at minute 7</a> “Namespace” term</li>
  <li><a href="https://youtu.be/Yp_TRVD3wjQ?t=542" target="_blank">at minute 9</a> “Opinions” term</li>
  <li><a href="https://youtu.be/Yp_TRVD3wjQ?t=694" target="_blank">at minute 11</a> “Sublayering” term</li>
  <li><a href="https://youtu.be/Yp_TRVD3wjQ?t=749" target="_blank">at minute 12</a> “References” term</li>
  <li><a href="https://youtu.be/Yp_TRVD3wjQ?t=879" target="_blank">at minute 14</a> “Payload” term</li>
  <li><a href="https://youtu.be/Yp_TRVD3wjQ?t=1017" target="_blank">at minute 16</a> “Instancing” term</li>
  <li><a href="https://youtu.be/Yp_TRVD3wjQ?t=1105" target="_blank">at minute 18</a> “VariantSet” term</li>
  <li><a href="https://youtu.be/Yp_TRVD3wjQ?t=1318" target="_blank">at minute 22</a> “Hydra” term</li>
  <li><a href="https://youtu.be/Yp_TRVD3wjQ?t=1429" target="_blank">at minute 23</a> Q&amp;A</li>
</ul>

<h2 id="key-concepts">Key Concepts</h2>

<p><em>the ‘more’ link will take you to the USD glossary</em></p>

<ul>
  <li><strong>Layer</strong>: a <em>file</em> on disk (<a href="https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Layer">find out more</a>)</li>
  <li><strong>Stage</strong>: the resulting composition of the <em>layers</em> (<a href="https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Stage">find out more</a>)</li>
  <li><strong>Composition Arcs</strong>: different ways to combine layers into a <em>stage</em> (<a href="https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-CompositionArcs">find out more</a>)</li>
  <li><strong>SubLayers</strong>: the way to refer to other layers within a <em>layer</em> (<a href="https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-SubLayers">find out more</a>)</li>
  <li><strong>Opinions</strong>: a system for resolving conflicts when combining <em>layers</em> (<a href="https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Opinions">find out more</a>)</li>
  <li><strong>Namespace</strong>: path to the primitives in the <em>scene graph</em> (<a href="https://graphics.pixar.com/usd/docs/USD-Glossary.html#USDGlossary-Namespace">find out more</a>)</li>
</ul>

<h1 id="the-problemschallenges">The Problems/Challenges</h1>

<ul>
  <li>Have a single standardized format for describing a 3D scene</li>
  <li>The format needs to be open for multiple parties to use and extend</li>
  <li>The format should be easy to implement</li>
</ul>

<h1 id="propositions">Propositions</h1>

<ul>
  <li>Start learning and using USD in your pipelines to take advantage of the built-in integration into popular DDC tools, commercial rendering engines, and commercial game engines.</li>
  <li>You will need a tool to visualize how USD composes the scene graphs to get the final result.</li>
</ul>

<h1 id="arguments">Arguments</h1>

<ul>
  <li>Pixar developed USD</li>
  <li>USD is becoming an industry standard</li>
  <li>USD is open and actively developed</li>
</ul>

<h1 id="key-points">Key Points</h1>

<ul>
  <li>USD is for assembling scene and editing 3D data</li>
  <li>USD is about enhancing the communication between Digital Content Creation tools</li>
  <li>Layer == Scene Graph == USD File</li>
  <li>USD can enable non-destructive editing of data from lower layers</li>
  <li>The concept of splitting the scene into multiple files allows the artist not to load the whole resulting scene, a.k.a. “Stage”</li>
  <li>Compositing USD files (referencing other USD files in a USD file) works like PhotoShop layers</li>
  <li>“opinions” are used to resolve scene graph composition conflicts. Layer on top will have a stronger “opinion” then the layer below that</li>
  <li>Need a standalone viewer/tool to understand how the scene is created
    <ul>
      <li>“This can get super confusing.”</li>
      <li>“This can get very complicated.”</li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="notable-parts-of-the-talk">Notable parts of the talk</h1>

<h2 id="enabling-multiple-artist-work">Enabling multiple artist work</h2>
<p><em>timestamp: 2 minutes into the presentation</em></p>

<ul>
  <li>It allows multiple artists to work on the same scene
    <ul>
      <li>Every department can have its own USD file</li>
    </ul>
  </li>
</ul>

<p><img src="https://tools.engineer/assets/images/posts/siggraph2019-what-is-usd-a-primer/Screen_Shot_at_3-51.png" alt="Presentation Timestamp 3:53 USD basic structure" width="700" style="margin: .1em auto" />
  <span style="font-size:50%;text-align:center;display:block">Rob Stauffer. <i>What is USD: A Primer</i>. July 2019, SIGGRAPH, <a target="_blank" href="https://youtu.be/Yp_TRVD3wjQ?t=233"> YouTube</a>. Presentation Timestamp 3:53.</span></p>

<h2 id="composing-multiple-usd-files">Composing multiple USD files</h2>
<p><em>timestamp: 4 minutes into the presentation</em></p>

<p><img src="https://tools.engineer/assets/images/posts/siggraph2019-what-is-usd-a-primer/Screen_Shot_at_4-23.png" alt="Presentation Timestamp 4:23 term stage" width="700" style="margin: .1em auto" />
  <span style="font-size:50%;text-align:center;display:block">Rob Stauffer. <i>What is USD: A Primer</i>. July 2019, SIGGRAPH, <a target="_blank" href="https://youtu.be/Yp_TRVD3wjQ?t=267"> YouTube</a>. Presentation Timestamp 4:23.</span></p>

<h2 id="sublayering">Sublayering</h2>
<p><em>timestamp: 5 minutes into the presentation</em></p>

<ul>
  <li>An empty root layer creates an empty stage</li>
  <li>USD composition works by combining scene graphs (USD files/Layers)
    <ul>
      <li>a.k.a. sublayering</li>
    </ul>
  </li>
</ul>

<p><img src="https://tools.engineer/assets/images/posts/siggraph2019-what-is-usd-a-primer/Screen_Shot_at_5-53.png" alt="Presentation Timestamp 5:53 two USD files" width="700" style="margin: .1em auto" />
  <span style="font-size:50%;text-align:center;display:block">Rob Stauffer. <i>What is USD: A Primer</i>. July 2019, SIGGRAPH, <a target="_blank" href="https://youtu.be/Yp_TRVD3wjQ?t=353"> YouTube</a>. Presentation Timestamp 5:53.</span></p>

<p><img src="https://tools.engineer/assets/images/posts/siggraph2019-what-is-usd-a-primer/Screen_Shot_at_8-00.png" alt="Presentation Timestamp 8:00 two usd files" width="700" style="margin: .1em auto" />
  <span style="font-size:50%;text-align:center;display:block">Rob Stauffer. <i>What is USD: A Primer</i>. July 2019, SIGGRAPH, <a target="_blank" href="https://youtu.be/Yp_TRVD3wjQ?t=480"> YouTube</a>. Presentation Timestamp 8:00.</span></p>

<ul>
  <li><em>opinions</em> are used to resolve conflicts between scene graphs</li>
</ul>

<p><img src="https://tools.engineer/assets/images/posts/siggraph2019-what-is-usd-a-primer/Screen_Shot_at_11-25.png" alt="Presentation Timestamp 11:25 composing USD files" width="700" style="margin: .1em auto" />
  <span style="font-size:50%;text-align:center;display:block">Rob Stauffer. <i>What is USD: A Primer</i>. July 2019, SIGGRAPH, <a target="_blank" href="https://youtu.be/Yp_TRVD3wjQ?t=662"> YouTube</a>. Presentation Timestamp 11:25.</span></p>

<h2 id="references">References</h2>
<p><em>timestamp: 12 minutes into the presentation</em></p>

<ul>
  <li>“You reference one primitive from one file into the namespace of an existing primitive of a referencing scene graph”
    <ul>
      <li>You can make a primitive into a reference to a scene graph in another file</li>
      <li>You can define root primitives as default primitives
        <ul>
          <li>USD will look for default primitives</li>
        </ul>
      </li>
      <li>The idea is not to just graft a scene graph on top of the existing scene graph. The idea is to specify the location wherein the existing scene graph USD inserts the source scene graph.
<img src="https://tools.engineer/assets/images/posts/siggraph2019-what-is-usd-a-primer/Screen_Shot_at_14-14.png" alt="Presentation Timestamp 14:14 referencing example" width="700" style="margin: .1em auto" />
<span style="font-size:50%;text-align:center;display:block">Rob Stauffer. <i>What is USD: A Primer</i>. July 2019, SIGGRAPH, <a target="_blank" href="https://youtu.be/Yp_TRVD3wjQ?t=854"> YouTube</a>. Presentation Timestamp 14:14.</span></li>
    </ul>
  </li>
</ul>

<h2 id="payloads">Payloads</h2>
<p><em>timestamp: 14 minutes into the presentation</em></p>

<ul>
  <li>Only load what you want
<img src="https://tools.engineer/assets/images/posts/siggraph2019-what-is-usd-a-primer/Screen_Shot_at_15-54.png" alt="Presentation Timestamp 15-54 payload example full scene" width="700" style="margin: .1em auto" />
<span style="font-size:50%;text-align:center;display:block">Rob Stauffer. <i>What is USD: A Primer</i>. July 2019, SIGGRAPH, <a target="_blank" href="https://youtu.be/Yp_TRVD3wjQ?t=954"> YouTube</a>. Presentation Timestamp 15-54.</span></li>
</ul>

<p><img src="https://tools.engineer/assets/images/posts/siggraph2019-what-is-usd-a-primer/Screen_Shot_at_15-57.png" alt="Presentation Timestamp 15-57 payload example full scene" width="700" style="margin: .1em auto" />
  <span style="font-size:50%;text-align:center;display:block">Rob Stauffer. <i>What is USD: A Primer</i>. July 2019, SIGGRAPH, <a target="_blank" href="https://youtu.be/Yp_TRVD3wjQ?t=957"> YouTube</a>. Presentation Timestamp 15-57.</span></p>

<h2 id="3-ways-to-compose">3 ways to compose</h2>

<ul>
  <li>There are 3 principal ways to bring a USD file into a scene graph
    <ul>
      <li>Layers
        <ul>
          <li>adding a USD file on top of an existing USD file</li>
        </ul>
      </li>
      <li>Referencing
        <ul>
          <li>adding a select primitive of another USD file into a specific location in the base USD file</li>
        </ul>
      </li>
      <li>Payload
        <ul>
          <li>a reference that you can load or not
            <ul>
              <li>done for memory management and processing time</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="variantset">Variantset</h2>
<p><em>timestamp: 18 minutes into the presentation</em></p>

<ul>
  <li>a non-destructive set of alternatives
    <ul>
      <li>examples:
        <ul>
          <li>dented models that are dented</li>
          <li>models with different textures materials applied</li>
          <li>models ageing over time</li>
          <li>storing LODs</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>The alternatives are chosen non-destructively by using the “opinion” layer stack</li>
</ul>

<h2 id="hydra">Hydra</h2>
<p><em>timestamp: 22 minutes into the presentation</em></p>

<p><img src="https://tools.engineer/assets/images/posts/siggraph2019-what-is-usd-a-primer/Screen_Shot_at_23-08.png" alt="Presentation Timestamp 23-08 what is Hydra" width="700" style="margin: .1em auto" />
  <span style="font-size:50%;text-align:center;display:block">Rob Stauffer. <i>What is USD: A Primer</i>. July 2019, SIGGRAPH, <a target="_blank" href="https://youtu.be/Yp_TRVD3wjQ?t=1388"> YouTube</a>. Presentation Timestamp 23-08.</span></p>

<h2 id="notes-from-the-qa">Notes from the Q&amp;A</h2>
<p><em>timestamp: 23 minutes into the presentation</em></p>

<ul>
  <li>in theory USD should make the interop between different DCC tools easier
    <ul>
      <li>it all depends on the way the given DCC supports USD</li>
    </ul>
  </li>
  <li>
    <p><em>previz</em> in Virtual Production can be defined as a USD layer</p>
  </li>
  <li>USD can hold geometry
    <ul>
      <li>You can set up a USD scene in a way where:
        <ul>
          <li>Some USD files will contain the Scene Description and some USD files will contain the geometry
            <ul>
              <li>example: <a href="https://graphics.pixar.com/usd/downloads.html">Pixar USD Kitchen set</a></li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>currently missing support for skeletal animation rigs</p>
  </li>
  <li>
    <p>it is possible to define your own types to store different metadata</p>
  </li>
  <li>there isn’t a standard way to organize the USD layer files
    <ul>
      <li>some studios organize per department</li>
      <li>some organize everything in a flat file</li>
    </ul>
  </li>
  <li>
    <p>you can support multiple renderers, but you might need to store multiple material definitions</p>
  </li>
  <li>Future work:
    <ul>
      <li>Making it easier to work with materials for different renderers
        <ul>
          <li>MaterialX</li>
          <li>MDL Material</li>
        </ul>
      </li>
      <li>Supporting shaders</li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="thoughts">Thoughts</h1>

<h2 id="applications-in-game-dev">Applications in Game dev</h2>

<ul>
  <li>The possibility of leveraging third-party DCCs tools that will use the same format to save levels
    <ul>
      <li>a seamless workflow between proprietary studio technologies and third-party tools</li>
    </ul>
  </li>
  <li>From what I understand you can use USD in 3 different ways:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">interchange</code> - intermediate format to communicate between tools (buffer/temp files)
        <ul>
          <li><code class="language-plaintext highlighter-rouge">low</code> commitment to USD</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">store</code> - the authoritative persistent format that all the tools use and save (all your proprietary tools save into a USD file)
        <ul>
          <li><code class="language-plaintext highlighter-rouge">medium</code> commitment to USD</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">render</code> - implement the Hydra API to render from USD
        <ul>
          <li><code class="language-plaintext highlighter-rouge">high</code> commitment to USD</li>
          <li>a third-party DCC, that supports USD, can render using your proprietary render engine ( see <a href="http://www.cgchannel.com/2020/07/see-blenders-cycles-renderer-running-in-the-houdini-viewport" target="_blank">Blender’s Cycles renderer running in the Houdini viewport</a> )</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="practical-truths">Practical Truths</h2>

<p><em>General Tools Development Wisdom</em></p>

<ul>
  <li><strong>Layers can power non-destructive workflows.</strong> - layers are key for implementing non-destructive workflows.</li>
  <li><strong>Communicating hierarchies is hard.</strong> - it can be a challenge for a non-technical user to grasp hierarchies, especially if merging of hierarchies is a feature.</li>
  <li><strong>Visualization is paramount.</strong> - getting the visualization “right” can make all the difference.</li>
</ul>

<h2 id="practical-principles">Practical Principles</h2>

<p><em>General Tools Development Principles</em></p>

<ul>
  <li>
    <p>Make it easy for your users to visualize the internal data. Don’t just render the underlying data and call it a day. (see <a href="https://tools.engineer//tools-tutorial-day-a-tale-of-three-data-schemas" target="_blank">GDC 2018 Notes for “A Tale of Three Data Schemas”</a> )</p>
  </li>
  <li>
    <p><em>Layers</em> are great for separating artists and department work.</p>
  </li>
</ul>

<h2 id="questions-that-came-to-mind">Questions that came to mind</h2>

<ul>
  <li>Is there a good comparison of scene description file formats (open and not)?
    <ul>
      <li><a href="http://nickporcino.com/posts/last_mile_interchange.html" target="_blank">Article “Last mile interchange” by Nick Porcino</a></li>
      <li><a href="https://all3dp.com/3d-file-format-3d-files-3d-printer-3d-cad-vrml-stl-obj/" target="_blank">The Most Common 3D File Formats (don’t have USD)</a></li>
    </ul>
  </li>
  <li>Who supports USD?
    <ul>
      <li><a href="https://docs.blender.org/manual/en/latest/files/import_export/usd.html">Blender</a></li>
      <li><a href="https://docs.unrealengine.com/en-US/Support/Builds/ReleaseNotes/4_24/index.html#new:liveuniversalscenedescriptionstage_beta_">Unreal</a></li>
      <li><a href="https://blogs.unity3d.com/2019/03/28/pixars-universal-scene-description-for-unity-out-in-preview/">Unity</a></li>
      <li><a href="https://github.com/Autodesk/maya-usd">Maya</a></li>
    </ul>
  </li>
  <li>Why the “payload” functionality can’t be done via “composition arcs”?
    <ul>
      <li><a href="https://twitter.com/meshula" target="_blank">Nick Porcino</a> answered:
  Composition arcs is just a graph nomenclature. The “arc” expresses the relationship.
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  level3 -&gt; is_active_in -&gt; world
  lighting -&gt; is_referenced_by -&gt; level3
  night_lighting -&gt; overrides -&gt; lighting
  grunt -&gt; extends -&gt; player
  red_costume -&gt; is_referenced_by -&gt; grunt
</code></pre></div>        </div>
        <p>The mesh in the costume is a payload. The lights in the night_lighting scene might be a payload. etc….</p>
      </li>
    </ul>
  </li>
</ul>

<h2 id="notes-from-the-vault-club">Notes from the Vault Club</h2>

<p>During the discussion in the <a href="http://thetoolsmiths.org/vault_club" target="_blank">Vault Club</a>, I learned a lot. Here are some highlights.</p>

<ul>
  <li>some game dev studios are experimenting with proof-of-concept level editor that saves the scene graph as USD</li>
  <li>
    <p><a href="https://twitter.com/eskilsteenberg" target="_blank">Eskil Steenberg</a> pointed out that USD is more about managing interdepartmental workflows, then about what graphics engineer would look for in a format (polygons, pixels, shaders). “USD, assumes that its part of a pipeline of large DCC applications that supports formats like Alembic, OpenEXR, OpenVDB, OpenShadingLanguage to store the actual data.”</p>
  </li>
  <li><a href="https://twitter.com/meshula" target="_blank">Nick Porcino</a> mentioned that one of the possible names for USD was “Layered Scene Description”. :)</li>
  <li>The name “Hydra” - comes from the idea that you would implement your own rendering “head”.</li>
  <li>There might be an issue with the coupling between <code class="language-plaintext highlighter-rouge">blind data</code> and <code class="language-plaintext highlighter-rouge">known data</code>. Meaning that if an application creates custom data that is based on the USD data, we might break that custom data by modifying the USD data outside the current application.</li>
</ul>

<div style="background-color:#FFFF94;border-left: 18px solid #ffff48;padding-left: 50px;">
<p></p>
<p>These notes are just the main ideas of the talk. They don’t contain anecdotes and examples. If you want to learn more, I would advise watching the talk on <a target="_blank" href="https://youtu.be/Yp_TRVD3wjQ">YouTube</a>.</p>
<p></p>
</div>

<h2 id="the-toolsmiths">The Toolsmiths</h2>
<p><img src="https://tools.engineer/assets/images/thetoolsmiths_cover_1000x2881.png" alt="The Toolsmiths logo" width="700" /></p>

<p>I took these notes as part of our little “Book Club” for Game Tools related videos <a href="http://thetoolsmiths.org/vault_club" target="_blank">The Toolsmiths #vault club</a></p>

<p>Join us on <a href="http://thetoolsmiths.org/join_slack_team" target="_blank">Slack</a>.</p>

<p>Join us on <a href="https://twitter.com/thetoolsmiths" target="_blank">Twitter</a>.</p>

<h2 id="links">Links</h2>
<ul>
  <li><a href="https://youtu.be/Yp_TRVD3wjQ" target="_blank">What is USD: A Primer, Rob Stauffer, SIGGRAPH 2019</a></li>
</ul>

<h2 id="related-blog-links">Related Blog Links</h2>
<ul>
  <li>Notes for <a href="https://tools.engineer//tools-tutorial-day-a-tale-of-three-data-schemas">GDC 2018 Notes for “A Tale of Three Data Schemas”</a></li>
</ul>

<h2 id="related-talksvideos">Related Talks\Videos</h2>
<ul>
  <li><a href="https://www.youtube.com/watch?v=x9ikzGQW0ys" target="_blank">SIGGRAPH 2016 Real-Time Graphics in Pixar Film Production</a></li>
  <li><a href="https://developer.apple.com/videos/play/wwdc2017/610/" target="_blank">WWDC 2017 From Art to Engine with Model I/O</a></li>
  <li><a href="https://www.gdcvault.com/play/1026345/The-Future-of-Scene-Description" target="_blank">GDC 2019 The Future of Scene Description on ‘God of War’</a></li>
  <li><a href="https://www.youtube.com/playlist?list=PLNUaMVwYjKk8QDlM8gQSLbl8jxLRgc7d6" target="_blank">USD at UTS Animal Logic Academy video presentations</a></li>
</ul>

<h2 id="related-resources">Related resources</h2>
<ul>
  <li><a href="https://wiki.aswf.io/display/WGUSD/USD+Projects+and+Resources" target="_blank">USD Projects and Resources</a></li>
  <li><a href="https://github.com/vfxpro99/usd-resources" target="_blank">Resources USD</a></li>
  <li><a href="http://nickporcino.com/posts/last_mile_interchange.html" target="_blank">Article “Last mile interchange” by Nick Porcino</a></li>
  <li><a href="http://www.cgchannel.com/2020/07/see-blenders-cycles-renderer-running-in-the-houdini-viewport" target="_blank">See Blender’s Cycles renderer running in the Houdini viewport, CG Channel</a></li>
  <li><a href="https://marketplace.visualstudio.com/items?itemName=AnimalLogic.vscode-usda-syntax" target="_blank">VSCode USD Language support</a></li>
  <li><a href="https://github.com/quelsolaar/HxA" target="_blank">HxA 3D asset format, Eskil Steenberg</a></li>
  <li><a href="https://lesterbanks.com/2020/03/how-to-integrate-fx-using-usd-and-houdini-solaris" target="_blank">How to Integrate FX Using USD and Houdini Solaris - Lesterbanks</a></li>
  <li><a href="https://www.sidefx.com/products/houdini/solaris/" target="_blank">Solaris, SideFX</a></li>
  <li><a href="https://yoann01.github.io/blog/2019/10/01/USD.html" target="_blank">Intro to USD</a></li>
  <li><a href="https://www.alembic.io" target="_blank">Alembic - an open computer graphics interchange framework</a></li>
</ul>

<h2 id="credits">Credits</h2>

<p>Post cover image by <a target="_blank" href="https://pixabay.com/users/AlexanderStein-45237/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=182220">Alexander Stein</a> from <a target="_blank" href="https://pixabay.com/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=182220">Pixabay</a></p>]]></content><author><name>Victor Stepanov</name></author><category term="GDC" /><category term="visual-arts" /><category term="interchange" /><category term="computer-graphics" /><category term="scene-description" /><category term="usd" /><category term="dcc" /><summary type="html"><![CDATA[TLDW Summary: This talk is an intro to the key concepts and terminology of Universal Scene Description. The presentation shows examples of how USD is integrated into SideFX products. Key Terms Universal Scene Description Scene Graph Layer Hydra DCC Presentation Time Stamps Link to the talk on YouTube. at minute 1 What is USD? at minute 4 “Layer” term at minute 4 “Stage” term at minute 4 “Composition Arcs” term at minute 5 “SubLayers” term at minute 7 “Namespace” term at minute 9 “Opinions” term at minute 11 “Sublayering” term at minute 12 “References” term at minute 14 “Payload” term at minute 16 “Instancing” term at minute 18 “VariantSet” term at minute 22 “Hydra” term at minute 23 Q&amp;A Key Concepts the ‘more’ link will take you to the USD glossary Layer: a file on disk (find out more) Stage: the resulting composition of the layers (find out more) Composition Arcs: different ways to combine layers into a stage (find out more) SubLayers: the way to refer to other layers within a layer (find out more) Opinions: a system for resolving conflicts when combining layers (find out more) Namespace: path to the primitives in the scene graph (find out more) The Problems/Challenges Have a single standardized format for describing a 3D scene The format needs to be open for multiple parties to use and extend The format should be easy to implement Propositions Start learning and using USD in your pipelines to take advantage of the built-in integration into popular DDC tools, commercial rendering engines, and commercial game engines. You will need a tool to visualize how USD composes the scene graphs to get the final result. Arguments Pixar developed USD USD is becoming an industry standard USD is open and actively developed Key Points USD is for assembling scene and editing 3D data USD is about enhancing the communication between Digital Content Creation tools Layer == Scene Graph == USD File USD can enable non-destructive editing of data from lower layers The concept of splitting the scene into multiple files allows the artist not to load the whole resulting scene, a.k.a. “Stage” Compositing USD files (referencing other USD files in a USD file) works like PhotoShop layers “opinions” are used to resolve scene graph composition conflicts. Layer on top will have a stronger “opinion” then the layer below that Need a standalone viewer/tool to understand how the scene is created “This can get super confusing.” “This can get very complicated.” Notable parts of the talk Enabling multiple artist work timestamp: 2 minutes into the presentation It allows multiple artists to work on the same scene Every department can have its own USD file Rob Stauffer. What is USD: A Primer. July 2019, SIGGRAPH, YouTube. Presentation Timestamp 3:53. Composing multiple USD files timestamp: 4 minutes into the presentation Rob Stauffer. What is USD: A Primer. July 2019, SIGGRAPH, YouTube. Presentation Timestamp 4:23. Sublayering timestamp: 5 minutes into the presentation An empty root layer creates an empty stage USD composition works by combining scene graphs (USD files/Layers) a.k.a. sublayering Rob Stauffer. What is USD: A Primer. July 2019, SIGGRAPH, YouTube. Presentation Timestamp 5:53. Rob Stauffer. What is USD: A Primer. July 2019, SIGGRAPH, YouTube. Presentation Timestamp 8:00. opinions are used to resolve conflicts between scene graphs Rob Stauffer. What is USD: A Primer. July 2019, SIGGRAPH, YouTube. Presentation Timestamp 11:25. References timestamp: 12 minutes into the presentation “You reference one primitive from one file into the namespace of an existing primitive of a referencing scene graph” You can make a primitive into a reference to a scene graph in another file You can define root primitives as default primitives USD will look for default primitives The idea is not to just graft a scene graph on top of the existing scene graph. The idea is to specify the location wherein the existing scene graph USD inserts the source scene graph. Rob Stauffer. What is USD: A Primer. July 2019, SIGGRAPH, YouTube. Presentation Timestamp 14:14. Payloads timestamp: 14 minutes into the presentation Only load what you want Rob Stauffer. What is USD: A Primer. July 2019, SIGGRAPH, YouTube. Presentation Timestamp 15-54. Rob Stauffer. What is USD: A Primer. July 2019, SIGGRAPH, YouTube. Presentation Timestamp 15-57. 3 ways to compose There are 3 principal ways to bring a USD file into a scene graph Layers adding a USD file on top of an existing USD file Referencing adding a select primitive of another USD file into a specific location in the base USD file Payload a reference that you can load or not done for memory management and processing time Variantset timestamp: 18 minutes into the presentation a non-destructive set of alternatives examples: dented models that are dented models with different textures materials applied models ageing over time storing LODs The alternatives are chosen non-destructively by using the “opinion” layer stack Hydra timestamp: 22 minutes into the presentation Rob Stauffer. What is USD: A Primer. July 2019, SIGGRAPH, YouTube. Presentation Timestamp 23-08. Notes from the Q&amp;A timestamp: 23 minutes into the presentation in theory USD should make the interop between different DCC tools easier it all depends on the way the given DCC supports USD previz in Virtual Production can be defined as a USD layer USD can hold geometry You can set up a USD scene in a way where: Some USD files will contain the Scene Description and some USD files will contain the geometry example: Pixar USD Kitchen set currently missing support for skeletal animation rigs it is possible to define your own types to store different metadata there isn’t a standard way to organize the USD layer files some studios organize per department some organize everything in a flat file you can support multiple renderers, but you might need to store multiple material definitions Future work: Making it easier to work with materials for different renderers MaterialX MDL Material Supporting shaders Thoughts Applications in Game dev The possibility of leveraging third-party DCCs tools that will use the same format to save levels a seamless workflow between proprietary studio technologies and third-party tools From what I understand you can use USD in 3 different ways: interchange - intermediate format to communicate between tools (buffer/temp files) low commitment to USD store - the authoritative persistent format that all the tools use and save (all your proprietary tools save into a USD file) medium commitment to USD render - implement the Hydra API to render from USD high commitment to USD a third-party DCC, that supports USD, can render using your proprietary render engine ( see Blender’s Cycles renderer running in the Houdini viewport ) Practical Truths General Tools Development Wisdom Layers can power non-destructive workflows. - layers are key for implementing non-destructive workflows. Communicating hierarchies is hard. - it can be a challenge for a non-technical user to grasp hierarchies, especially if merging of hierarchies is a feature. Visualization is paramount. - getting the visualization “right” can make all the difference. Practical Principles General Tools Development Principles Make it easy for your users to visualize the internal data. Don’t just render the underlying data and call it a day. (see GDC 2018 Notes for “A Tale of Three Data Schemas” ) Layers are great for separating artists and department work. Questions that came to mind Is there a good comparison of scene description file formats (open and not)? Article “Last mile interchange” by Nick Porcino The Most Common 3D File Formats (don’t have USD) Who supports USD? Blender Unreal Unity Maya Why the “payload” functionality can’t be done via “composition arcs”? Nick Porcino answered: Composition arcs is just a graph nomenclature. The “arc” expresses the relationship. level3 -&gt; is_active_in -&gt; world lighting -&gt; is_referenced_by -&gt; level3 night_lighting -&gt; overrides -&gt; lighting grunt -&gt; extends -&gt; player red_costume -&gt; is_referenced_by -&gt; grunt The mesh in the costume is a payload. The lights in the night_lighting scene might be a payload. etc…. Notes from the Vault Club During the discussion in the Vault Club, I learned a lot. Here are some highlights. some game dev studios are experimenting with proof-of-concept level editor that saves the scene graph as USD Eskil Steenberg pointed out that USD is more about managing interdepartmental workflows, then about what graphics engineer would look for in a format (polygons, pixels, shaders). “USD, assumes that its part of a pipeline of large DCC applications that supports formats like Alembic, OpenEXR, OpenVDB, OpenShadingLanguage to store the actual data.” Nick Porcino mentioned that one of the possible names for USD was “Layered Scene Description”. :) The name “Hydra” - comes from the idea that you would implement your own rendering “head”. There might be an issue with the coupling between blind data and known data. Meaning that if an application creates custom data that is based on the USD data, we might break that custom data by modifying the USD data outside the current application. These notes are just the main ideas of the talk. They don’t contain anecdotes and examples. If you want to learn more, I would advise watching the talk on YouTube. The Toolsmiths I took these notes as part of our little “Book Club” for Game Tools related videos The Toolsmiths #vault club Join us on Slack. Join us on Twitter. Links What is USD: A Primer, Rob Stauffer, SIGGRAPH 2019 Related Blog Links Notes for GDC 2018 Notes for “A Tale of Three Data Schemas” Related Talks\Videos SIGGRAPH 2016 Real-Time Graphics in Pixar Film Production WWDC 2017 From Art to Engine with Model I/O GDC 2019 The Future of Scene Description on ‘God of War’ USD at UTS Animal Logic Academy video presentations Related resources USD Projects and Resources Resources USD Article “Last mile interchange” by Nick Porcino See Blender’s Cycles renderer running in the Houdini viewport, CG Channel VSCode USD Language support HxA 3D asset format, Eskil Steenberg How to Integrate FX Using USD and Houdini Solaris - Lesterbanks Solaris, SideFX Intro to USD Alembic - an open computer graphics interchange framework Credits Post cover image by Alexander Stein from Pixabay]]></summary></entry><entry><title type="html">Notes for “Procedural World Generation of ‘Far Cry 5’” GDC2018</title><link href="/https://tools.engineer/gdc2018-procedural-world-generation-of-far-cry-5" rel="alternate" type="text/html" title="Notes for “Procedural World Generation of ‘Far Cry 5’” GDC2018" /><published>2020-08-09T01:00:00+00:00</published><updated>2020-08-09T01:00:00+00:00</updated><id>/https://tools.engineer/gdc2018-procedural-world-generation-of-far-cry-5</id><content type="html" xml:base="/https://tools.engineer/gdc2018-procedural-world-generation-of-far-cry-5"><![CDATA[<p><strong>TLDW Summary</strong>: This talk is about how FC5 developers created a pipeline for generating a realistic game world using procedural recipes. The talk contains a high-level overview of the pipeline with two deep dives into the details of the tools.</p>

<h2 id="key-terms">Key Terms</h2>
<div class="keyword-container">
<ul class="keyword-container">
<li>procedural workflow</li>
<li>an ecosystem of procedural tools</li>
<li>Houdini Engine</li>
<li>biome recipes</li>
<li>determinism</li>
<li>terrain</li>
<li>2d mask</li>
</ul>
<style>
    .keyword-container > ul
    {
        font-size: 16px;
        list-style-type: none;
        padding:15px;
    }
    .keyword-container > li
    {
        background-color:#f3f3f3;
        display : inline;
        padding:5px;
        margin:2px;
        margin-bottom: 100px;
        border-radius: 5px;
    }
</style>
</div>

<h2 id="presentation-time-stamps">Presentation Time Stamps</h2>

<ul>
  <li><a href="https://www.gdcvault.com/play/1025215/Procedural-World-Generation-of-Far" target="_blank">at minute 2</a> Introduction</li>
  <li><a href="https://www.gdcvault.com/play/1025215/Procedural-World-Generation-of-Far" target="_blank">at minute 2</a> The goals of the procedural pipeline</li>
  <li><a href="https://www.gdcvault.com/play/1025215/Procedural-World-Generation-of-Far" target="_blank">at minute 6</a> The tools that were developed</li>
  <li><a href="https://www.gdcvault.com/play/1025215/Procedural-World-Generation-of-Far" target="_blank">at minute 15</a> The system from the user’s point of view</li>
  <li><a href="https://www.gdcvault.com/play/1025215/Procedural-World-Generation-of-Far" target="_blank">at minute 12</a> How the pipeline is working under the hood</li>
  <li><a href="https://www.gdcvault.com/play/1025215/Procedural-World-Generation-of-Far" target="_blank">at minute 16</a> The Cliff generation tool</li>
  <li><a href="https://www.gdcvault.com/play/1025215/Procedural-World-Generation-of-Far" target="_blank">at minute 25</a> The Biome generation tool</li>
  <li><a href="https://www.gdcvault.com/play/1025215/Procedural-World-Generation-of-Far" target="_blank">at minute 46</a> What changed during development</li>
  <li><a href="https://www.gdcvault.com/play/1025215/Procedural-World-Generation-of-Far" target="_blank">at minute 49</a> Conclusion</li>
  <li><a href="https://www.gdcvault.com/play/1025215/Procedural-World-Generation-of-Far" target="_blank">at minute 52</a> Q&amp;A</li>
</ul>

<h2 id="key-concepts">Key Concepts</h2>

<ul>
  <li><strong>biome</strong> : an area of a game world with distinct terrain, vegetation, and animal life.
<img src="assets/images/posts/gdc2018-procedural-world-generation-of-far-cry-5/slide_71_sub_biome.png" alt="slide 71 sub biome" width="700" style="margin: .1em auto" />
    <p style="font-size:50%">Carrier, Etienne. <i>Procedural World Generation of 'Far Cry 5'</i>. Mar. 2018, GDC, <a target="_blank" href="https://www.gdcvault.com/play/1025557/Procedural-World-Generation-of-Far"> GDC Vault Slide Location</a>. Presentation Slide #71.</p>
  </li>
  <li><strong>map</strong> : parts of a game <em>world</em> that are not loaded at the same time</li>
  <li><strong>section</strong> : a part of a <em>map</em> (256m X 256m)</li>
  <li><strong>sector</strong> : a part of a <em>section</em> (64m X 64m), the smallest part of a world that can be <em>baked</em>
<img src="assets/images/posts/gdc2018-procedural-world-generation-of-far-cry-5/slide_34_sector.png" alt="slide 34 sector" width="700" style="margin: .1em auto" />
    <p style="font-size:50%">Carrier, Etienne. <i>Procedural World Generation of 'Far Cry 5'</i>. Mar. 2018, GDC, <a target="_blank" href="https://www.gdcvault.com/play/1025557/Procedural-World-Generation-of-Far"> GDC Vault Slide Location</a>. Presentation Slide #34.</p>
  </li>
  <li><strong>recipe</strong> : a set of rules that given a set of inputs determines what <em>entities</em> need to be placed at a given location</li>
  <li><strong>points of interest</strong> : a <em>map</em> <em>location</em> reserved for user input and editing</li>
</ul>

<h1 id="the-problemschallenges">The Problems/Challenges</h1>

<ul>
  <li>Filling up empty space is easy, but filling it up so it looks <em>natural</em> is a big challenge.</li>
  <li>The workflow required to fill up large open spaces beautifully, quickly, while maintaining the <em>flexibility</em> for applying user input.
    <ul>
      <li>The workflow had to allow fine-tuning of smaller <em>locations</em> to deliver <em>tight gameplay experiences</em>.</li>
    </ul>
  </li>
  <li><em>Terraforming</em> can’t be locked at the start of the project
    <ul>
      <li>The terrain of the game would be constantly changing, and the <em>biomes</em> would need to be constantly updated. Updating the biomes by hand wasn’t an option.</li>
      <li>The asset placement needs to be consistent with the terrain topology.</li>
    </ul>
  </li>
  <li>The pipeline needs to run without human intervention to regenerate the content in a <em>build farm</em> setting.</li>
  <li>The pipeline needs to generate small <em>sections</em> of the world separately.</li>
  <li>The parts of the world should be generated <em>deterministically</em> to enable stitching parts together.</li>
</ul>

<h1 id="propositions">Propositions</h1>

<ul>
  <li>The biomes procedural system should be able to simulate <em>natural phenomena</em>.
<img src="assets/images/posts/gdc2018-procedural-world-generation-of-far-cry-5/slide_80_natural.png" alt="slide 80 natural phenomena" width="700" style="margin: .1em auto" />
    <p style="font-size:50%">Carrier, Etienne. <i>Procedural World Generation of 'Far Cry 5'</i>. Mar. 2018, GDC, <a target="_blank" href="https://www.gdcvault.com/play/1025557/Procedural-World-Generation-of-Far"> GDC Vault Slide Location</a>. Presentation Slide #80.</p>
    <p><img src="assets/images/posts/gdc2018-procedural-world-generation-of-far-cry-5/slide_99_canopy.png" alt="slide 99 natural phenomena" width="700" style="margin: .1em auto" /></p>
    <p style="font-size:50%">Carrier, Etienne. <i>Procedural World Generation of 'Far Cry 5'</i>. Mar. 2018, GDC, <a target="_blank" href="https://www.gdcvault.com/play/1025557/Procedural-World-Generation-of-Far"> GDC Vault Slide Location</a>. Presentation Slide #99.</p>
  </li>
  <li>Build <em>biome recipes</em> that react to the physical features of the land to ensure <em>coherence</em> throughout the world
<img src="assets/images/posts/gdc2018-procedural-world-generation-of-far-cry-5/slide_89_physical_features.png" alt="slide 89 natural phenomena" width="700" style="margin: .1em auto" />
    <p style="font-size:50%">Carrier, Etienne. <i>Procedural World Generation of 'Far Cry 5'</i>. Mar. 2018, GDC, <a target="_blank" href="https://www.gdcvault.com/play/1025557/Procedural-World-Generation-of-Far"> GDC Vault Slide Location</a>. Presentation Slide #89.</p>
  </li>
  <li>
    <p>The iterative process is vital to the quality of the game</p>
  </li>
  <li>Use Houdini Engine to run the full map generation in a nightly build</li>
  <li><em>same input</em> = <em>same result</em> (determinism matters)</li>
  <li>The ecosystem of tools needs to be user friendly
    <ul>
      <li>shelf tools</li>
      <li>be able to override procedural results</li>
    </ul>
  </li>
  <li>User must be able to bake data as they work</li>
</ul>

<h1 id="key-points">Key Points</h1>

<ul>
  <li>They developed a sophisticated procedural pipeline for creating a realistic game world using Houdini and Houdini Engine</li>
  <li>Originally they just wanted to develop the <em>biome tool</em>, but they ended up developing a suite of tools.</li>
  <li>The <em>heart</em> of the pipeline is the <em>data exchange</em> between the Houdini Engine and the Game Engine
<img src="assets/images/posts/gdc2018-procedural-world-generation-of-far-cry-5/slide_70_import_2d_data.png" alt="slide 70 importing 2d data" width="700" style="margin: .1em auto" />
    <p style="font-size:50%">Carrier, Etienne. <i>Procedural World Generation of 'Far Cry 5'</i>. Mar. 2018, GDC, <a target="_blank" href="https://www.gdcvault.com/play/1025557/Procedural-World-Generation-of-Far"> GDC Vault Slide Location</a>. Presentation Slide #70.</p>
  </li>
  <li>They developed an <em>ecosystem of procedural tools</em>, where one tool would provide the input to the next tool
<img src="assets/images/posts/gdc2018-procedural-world-generation-of-far-cry-5/slide_38_the_pipeline.png" alt="slide 38 high-level pipeline overview" width="700" style="margin: .1em auto" />
    <p style="font-size:50%">Carrier, Etienne. <i>Procedural World Generation of 'Far Cry 5'</i>. Mar. 2018, GDC, <a target="_blank" href="https://www.gdcvault.com/play/1025557/Procedural-World-Generation-of-Far"> GDC Vault Slide Location</a>. Presentation Slide #38.</p>
  </li>
  <li>They regenerate the entire game world every night on special <em>build machines</em>.</li>
</ul>

<hr />

<h1 id="notable-parts-of-the-talk">Notable parts of the talk</h1>

<hr />

<h2 id="user-iteration-workflow">User Iteration Workflow</h2>
<p><em>timestamp: 6 minutes into the presentation</em></p>

<ol>
  <li>Terraforming pass</li>
  <li>Define freshwater
  <img src="assets/images/posts/gdc2018-procedural-world-generation-of-far-cry-5/slide_22_fresh_water.png" alt="slide 22 high-level pipeline overview" width="700" style="margin: .1em auto" /> <span style="font-size:50%">Carrier, Etienne. <i>Procedural World Generation of ‘Far Cry 5’</i>. Mar. 2018, GDC, <a target="_blank" href="https://www.gdcvault.com/play/1025557/Procedural-World-Generation-of-Far"> GDC Vault Slide Location</a>. Presentation Slide #22.</span></li>
  <li>Run the <em>cliff generation tool</em> to create cliffs on steep terrain</li>
  <li>Use <em>Biome painter</em> and run procedural generation to spawn the vegetation</li>
  <li>Setting up <em>Points of Interest</em> (a.k.a. location)
 <img src="assets/images/posts/gdc2018-procedural-world-generation-of-far-cry-5/slide_26_point_of_interest.png" alt="slide 26 high-level pipeline overview" width="700" style="margin: .1em auto" /> <span style="font-size:50%">Carrier, Etienne. <i>Procedural World Generation of ‘Far Cry 5’</i>. Mar. 2018, GDC, <a target="_blank" href="https://www.gdcvault.com/play/1025557/Procedural-World-Generation-of-Far"> GDC Vault Slide Location</a>. Presentation Slide #26.</span>
    <ol>
      <li>Paint an area with the grass Biome</li>
      <li>Laying down a road spline</li>
      <li>Bake roads and refresh biome</li>
      <li>Add buildings, props</li>
      <li>Apply terrain texture</li>
      <li>Add more Trees with the forest sub-biome</li>
      <li>Bake/refresh biome</li>
      <li>Add fence spline</li>
      <li>Add power line spline
        <ol>
          <li>Snap power line connector to house</li>
          <li>Bake/refresh biome</li>
        </ol>
      </li>
    </ol>
  </li>
</ol>

<h2 id="user-non-destructive-workflow">User Non-Destructive Workflow</h2>
<p><em>timestamp: 11 minutes into the presentation</em></p>
<ol>
  <li>Update level of terrain</li>
  <li>Bake/refresh biome
 <img src="assets/images/posts/gdc2018-procedural-world-generation-of-far-cry-5/slide_35_bake.png" alt="slide 35 high-level pipeline overview" width="700" style="margin: .1em auto" />
    <p style="font-size:50%">Carrier, Etienne. <i>Procedural World Generation of 'Far Cry 5'</i>. Mar. 2018, GDC, <a target="_blank" href="https://www.gdcvault.com/play/1025557/Procedural-World-Generation-of-Far"> GDC Vault Slide Location</a>. Presentation Slide #35.</p>
  </li>
</ol>

<h1 id="how-the-pipeline-is-working-under-the-hood">How the pipeline is working under the hood</h1>
<p><em>timestamp: 12 minutes into the presentation</em></p>

<ul>
  <li>At the heart of the pipeline is the data exchange between the Houdini Engine and the Game Engine</li>
  <li>Inputs for the pipeline are sent from the Game Engine to Houdini via a Python Script
    <ul>
      <li>world information</li>
      <li>spline &amp; shapes</li>
      <li>file paths</li>
      <li>Terrain Sectors (Main input that the generation is linked to)</li>
      <li>heightmaps</li>
      <li>Biome painter</li>
      <li>2D terrain masks</li>
      <li>Houdini Geometry (that might have been generated by another procedural tool)</li>
    </ul>
  </li>
  <li>Outputs of Houdini
    <ul>
      <li>List of outputs
        <ul>
          <li>Entity point could
  <img src="assets/images/posts/gdc2018-procedural-world-generation-of-far-cry-5/slide_37_entity_point_cloud.png" alt="slide 37 high-level pipeline overview" width="700" style="margin: .1em auto" /></li>
        </ul>
        <p style="font-size:50%">Carrier, Etienne. <i>Procedural World Generation of 'Far Cry 5'</i>. Mar. 2018, GDC, <a target="_blank" href="https://www.gdcvault.com/play/1025557/Procedural-World-Generation-of-Far"> GDC Vault Slide Location</a>. Presentation Slide #37.</p>
        <ul>
          <li>Terrain texture layers</li>
          <li>Terrain heightmap layers</li>
          <li>2D terrain data</li>
          <li>Geometry</li>
          <li>Terrain logic zones</li>
        </ul>
      </li>
      <li>The data is saved onto a disk using temp “buffers”</li>
    </ul>
  </li>
  <li>The output of one tool influences the output of another tool
    <ul>
      <li>The tools use masks to communicate with each other</li>
    </ul>
  </li>
</ul>

<h1 id="examples-of-tools">Examples of tools</h1>

<h2 id="cliffs-tool">Cliffs tool</h2>
<p><em>timestamp: 16 minutes into the presentation</em></p>

<p><img src="assets/images/posts/gdc2018-procedural-world-generation-of-far-cry-5/slide_65_cliff_tool.png" alt="slide 65 cliff tool" width="700" style="margin: .1em auto" /></p>
<p style="font-size:50%">Carrier, Etienne. <i>Procedural World Generation of 'Far Cry 5'</i>. Mar. 2018, GDC, <a target="_blank" href="https://www.gdcvault.com/play/1025557/Procedural-World-Generation-of-Far"> GDC Vault Slide Location</a>. Presentation Slide #65.</p>

<h2 id="biomes-tool">Biomes Tool</h2>
<p><em>timestamp: 25 minutes into the presentation</em></p>

<p><img src="assets/images/posts/gdc2018-procedural-world-generation-of-far-cry-5/slide_69_biome_tool.png" alt="slide 69 biome tool" width="700" style="margin: .1em auto" /></p>
<p style="font-size:50%">Carrier, Etienne. <i>Procedural World Generation of 'Far Cry 5'</i>. Mar. 2018, GDC, <a target="_blank" href="https://www.gdcvault.com/play/1025557/Procedural-World-Generation-of-Far"> GDC Vault Slide Location</a>. Presentation Slide #69.</p>

<h1 id="lessons-learned">Lessons Learned</h1>
<p><em>timestamp: 46 minutes into the presentation</em></p>

<ul>
  <li>Making the steps of the <em>pipeline simple</em>. Don’t require knowledge of when the underlying data is generated or how it affects the <em>downstream tasks</em>.</li>
  <li>The <em>blending of biomes</em> is a complicated feature for the users to use and the developers to debug.</li>
  <li>This level of customization and generation at this scale <em>can impact the gameplay</em>.</li>
  <li>This is just a taste of what is possible to produce using this type of <em>procedural technology</em>.</li>
  <li>You won’t get it right on your first try. Keep iterating and simplifying the pipeline. Be flexible - plans and requirements change.</li>
  <li><em>Pay attention</em> to how the users use the tools. If you think a feature will be useful it doesn’t mean that the users will use it.</li>
</ul>

<hr />

<h1 id="thoughts">Thoughts</h1>

<hr />

<h2 id="solved-problemschallenges">Solved Problems/Challenges</h2>

<p><em>Did they solve what they set out to solve?</em></p>

<ul>
  <li>They shipped FC5</li>
  <li>They developed suite of tools:
    <ul>
      <li>The freshwater tool</li>
      <li>Fences &amp; power line tool</li>
      <li>Cliff generation tool</li>
      <li>Biome tool (to spawn vegetation)</li>
      <li>Fog tool</li>
      <li>World map tool (scatter trees on the world map)</li>
      <li>Power line tool
        <ul>
          <li>Auto snapping if a user made an error (with-in a given threshold distance)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>The pipeline is automated and runs nightly</li>
  <li>The workflow allowed for quick <strong>iteration</strong> and the ability to <em>“bake as you work”</em></li>
  <li>Use <em>biome recipes</em> to define what vegetation will be placed in different parts of the map (near water, near cliffs, at high altitude)</li>
</ul>

<h2 id="practical-truths">Practical Truths</h2>

<p><em>General Tools Development Wisdom</em></p>

<ul>
  <li><strong>“At first you won’t understand the problem”.</strong> - You won’t get a system design “right” from the first attempt.</li>
  <li><strong>“You are not your users”.</strong> - If you think something is a good feature, it doesn’t mean that the users will think so.</li>
  <li><strong>“Users don’t have to know the implementation details”.</strong> - Users will not remember complicated cause-and-effect scenarios.</li>
  <li><strong>“Watch out for Hidden Cascade Effects”.</strong> - In a fully automated system, a user might not see/ suspect that their changes are affecting another system that is out of view.</li>
  <li><strong>“The speed of iteration is vital to the quality of the game”.</strong> - Don’t let the tools be the bottleneck of the iteration process.</li>
</ul>

<h2 id="practical-principles">Practical Principles</h2>

<p><em>General Tools Development Principles</em></p>

<ul>
  <li>Enable user input and <em>customization</em> inside a procedural generation system.</li>
  <li><em>Observe users</em> to understand what is important for them.</li>
  <li><em>K.I.S.S.</em>: Keep It Stupid Simple</li>
  <li>Search for the balance between <em>control</em> and <em>automation</em>.</li>
</ul>

<h2 id="questions-that-came-to-mind">Questions that came to mind</h2>

<ul>
  <li>What are some websites/resources about good <em>Digital Content Creation tool</em> architecture/patterns? Maybe even some checklists?
    <ul>
      <li>Like :
        <ul>
          <li>“Don’t forget to make a headless client for your tool”</li>
          <li>“Don’t forget to add python scripting”</li>
          <li>“Don’t forget to think about determinism when saving</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Is there any alternative to Houdini? (not counting <strong>rolling your own</strong>)</li>
  <li>How do they edit the road network that spans multiple <strong>maps</strong> (parts of the <strong>world</strong>)?</li>
  <li>How long into the future when level art for <strong>second class</strong> points of interest will be fully defined by recipes? When will it be mainstream?</li>
</ul>

<div style="background-color:#FFFF94;border-left: 18px solid #ffff48;padding-left: 50px;">
<p></p>
<p>These notes are just the main ideas of the talk. They don’t contain anecdotes and examples. If you want to learn more, I would advise watching the talk on the <a target="_blank" href="https://www.gdcvault.com/play/1025215/Procedural-World-Generation-of-Far">GDC Vault</a>.</p>
<p></p>
</div>

<h2 id="the-toolsmiths">The Toolsmiths</h2>
<p><img src="https://tools.engineer/assets/images/thetoolsmiths_cover_1000x2881.png" alt="The Toolsmiths logo" width="700" /></p>

<p>I took these notes as part of our little “Book Club” for GDC Vault Videos <a href="http://thetoolsmiths.org/vault_club" target="_blank">The Toolsmiths #vault club</a></p>

<p>Join us on <a href="http://thetoolsmiths.org/join_slack_team" target="_blank">Slack</a>.</p>

<p>Join us on <a href="https://twitter.com/thetoolsmiths" target="_blank">Twitter</a>.</p>

<h2 id="links">Links</h2>
<ul>
  <li><a href="https://www.gdcvault.com/play/1025557/Procedural-World-Generation-of-Far" target="_blank">Slides: 	Procedural World Generation of ‘Far Cry 5’</a></li>
</ul>

<h2 id="related-talksvideos">Related Talks\Videos</h2>
<ul>
  <li><a href="https://www.gdcvault.com/play/1024029/-Ghost-Recon-Wildlands-Terrain" target="_blank">GDC 2017 ‘Ghost Recon Wildlands’: Terrain Tools and Technology</a></li>
  <li><a href="https://www.gdcvault.com/browse/gdc-18/play/1025261/Terrain-Rendering-in-Far-Cry" target="_blank">GDC 2018 Terrain Rendering in ‘Far Cry 5’</a></li>
  <li><a href="https://www.gdcvault.com/browse/gdc-18/play/1025264/The-Asset-Build-System-of" target="_blank">GDC 2018 The Asset Build System of ‘Far Cry 5’</a></li>
  <li><a href="https://www.youtube.com/watch?v=OklvMqMCkc4&amp;feature=youtu.be" target="_blank">GAT #69: River - 2k19 Edition</a></li>
</ul>

<h2 id="credits">Credits</h2>

<p>Post cover image by <a href="https://pixabay.com/users/Pexels-2286921/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1852955">Pexels</a> from <a href="https://pixabay.com/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1852955">Pixabay</a></p>]]></content><author><name>Victor Stepanov</name></author><category term="GDC" /><category term="procedural" /><category term="visual-arts" /><category term="level-art" /><category term="level-design" /><summary type="html"><![CDATA[TLDW Summary: This talk is about how FC5 developers created a pipeline for generating a realistic game world using procedural recipes. The talk contains a high-level overview of the pipeline with two deep dives into the details of the tools. Key Terms procedural workflow an ecosystem of procedural tools Houdini Engine biome recipes determinism terrain 2d mask Presentation Time Stamps at minute 2 Introduction at minute 2 The goals of the procedural pipeline at minute 6 The tools that were developed at minute 15 The system from the user’s point of view at minute 12 How the pipeline is working under the hood at minute 16 The Cliff generation tool at minute 25 The Biome generation tool at minute 46 What changed during development at minute 49 Conclusion at minute 52 Q&amp;A Key Concepts biome : an area of a game world with distinct terrain, vegetation, and animal life. Carrier, Etienne. Procedural World Generation of 'Far Cry 5'. Mar. 2018, GDC, GDC Vault Slide Location. Presentation Slide #71. map : parts of a game world that are not loaded at the same time section : a part of a map (256m X 256m) sector : a part of a section (64m X 64m), the smallest part of a world that can be baked Carrier, Etienne. Procedural World Generation of 'Far Cry 5'. Mar. 2018, GDC, GDC Vault Slide Location. Presentation Slide #34. recipe : a set of rules that given a set of inputs determines what entities need to be placed at a given location points of interest : a map location reserved for user input and editing The Problems/Challenges Filling up empty space is easy, but filling it up so it looks natural is a big challenge. The workflow required to fill up large open spaces beautifully, quickly, while maintaining the flexibility for applying user input. The workflow had to allow fine-tuning of smaller locations to deliver tight gameplay experiences. Terraforming can’t be locked at the start of the project The terrain of the game would be constantly changing, and the biomes would need to be constantly updated. Updating the biomes by hand wasn’t an option. The asset placement needs to be consistent with the terrain topology. The pipeline needs to run without human intervention to regenerate the content in a build farm setting. The pipeline needs to generate small sections of the world separately. The parts of the world should be generated deterministically to enable stitching parts together. Propositions The biomes procedural system should be able to simulate natural phenomena. Carrier, Etienne. Procedural World Generation of 'Far Cry 5'. Mar. 2018, GDC, GDC Vault Slide Location. Presentation Slide #80. Carrier, Etienne. Procedural World Generation of 'Far Cry 5'. Mar. 2018, GDC, GDC Vault Slide Location. Presentation Slide #99. Build biome recipes that react to the physical features of the land to ensure coherence throughout the world Carrier, Etienne. Procedural World Generation of 'Far Cry 5'. Mar. 2018, GDC, GDC Vault Slide Location. Presentation Slide #89. The iterative process is vital to the quality of the game Use Houdini Engine to run the full map generation in a nightly build same input = same result (determinism matters) The ecosystem of tools needs to be user friendly shelf tools be able to override procedural results User must be able to bake data as they work Key Points They developed a sophisticated procedural pipeline for creating a realistic game world using Houdini and Houdini Engine Originally they just wanted to develop the biome tool, but they ended up developing a suite of tools. The heart of the pipeline is the data exchange between the Houdini Engine and the Game Engine Carrier, Etienne. Procedural World Generation of 'Far Cry 5'. Mar. 2018, GDC, GDC Vault Slide Location. Presentation Slide #70. They developed an ecosystem of procedural tools, where one tool would provide the input to the next tool Carrier, Etienne. Procedural World Generation of 'Far Cry 5'. Mar. 2018, GDC, GDC Vault Slide Location. Presentation Slide #38. They regenerate the entire game world every night on special build machines. Notable parts of the talk User Iteration Workflow timestamp: 6 minutes into the presentation Terraforming pass Define freshwater Carrier, Etienne. Procedural World Generation of ‘Far Cry 5’. Mar. 2018, GDC, GDC Vault Slide Location. Presentation Slide #22. Run the cliff generation tool to create cliffs on steep terrain Use Biome painter and run procedural generation to spawn the vegetation Setting up Points of Interest (a.k.a. location) Carrier, Etienne. Procedural World Generation of ‘Far Cry 5’. Mar. 2018, GDC, GDC Vault Slide Location. Presentation Slide #26. Paint an area with the grass Biome Laying down a road spline Bake roads and refresh biome Add buildings, props Apply terrain texture Add more Trees with the forest sub-biome Bake/refresh biome Add fence spline Add power line spline Snap power line connector to house Bake/refresh biome User Non-Destructive Workflow timestamp: 11 minutes into the presentation Update level of terrain Bake/refresh biome Carrier, Etienne. Procedural World Generation of 'Far Cry 5'. Mar. 2018, GDC, GDC Vault Slide Location. Presentation Slide #35. How the pipeline is working under the hood timestamp: 12 minutes into the presentation At the heart of the pipeline is the data exchange between the Houdini Engine and the Game Engine Inputs for the pipeline are sent from the Game Engine to Houdini via a Python Script world information spline &amp; shapes file paths Terrain Sectors (Main input that the generation is linked to) heightmaps Biome painter 2D terrain masks Houdini Geometry (that might have been generated by another procedural tool) Outputs of Houdini List of outputs Entity point could Carrier, Etienne. Procedural World Generation of 'Far Cry 5'. Mar. 2018, GDC, GDC Vault Slide Location. Presentation Slide #37. Terrain texture layers Terrain heightmap layers 2D terrain data Geometry Terrain logic zones The data is saved onto a disk using temp “buffers” The output of one tool influences the output of another tool The tools use masks to communicate with each other Examples of tools Cliffs tool timestamp: 16 minutes into the presentation Carrier, Etienne. Procedural World Generation of 'Far Cry 5'. Mar. 2018, GDC, GDC Vault Slide Location. Presentation Slide #65. Biomes Tool timestamp: 25 minutes into the presentation Carrier, Etienne. Procedural World Generation of 'Far Cry 5'. Mar. 2018, GDC, GDC Vault Slide Location. Presentation Slide #69. Lessons Learned timestamp: 46 minutes into the presentation Making the steps of the pipeline simple. Don’t require knowledge of when the underlying data is generated or how it affects the downstream tasks. The blending of biomes is a complicated feature for the users to use and the developers to debug. This level of customization and generation at this scale can impact the gameplay. This is just a taste of what is possible to produce using this type of procedural technology. You won’t get it right on your first try. Keep iterating and simplifying the pipeline. Be flexible - plans and requirements change. Pay attention to how the users use the tools. If you think a feature will be useful it doesn’t mean that the users will use it. Thoughts Solved Problems/Challenges Did they solve what they set out to solve? They shipped FC5 They developed suite of tools: The freshwater tool Fences &amp; power line tool Cliff generation tool Biome tool (to spawn vegetation) Fog tool World map tool (scatter trees on the world map) Power line tool Auto snapping if a user made an error (with-in a given threshold distance) The pipeline is automated and runs nightly The workflow allowed for quick iteration and the ability to “bake as you work” Use biome recipes to define what vegetation will be placed in different parts of the map (near water, near cliffs, at high altitude) Practical Truths General Tools Development Wisdom “At first you won’t understand the problem”. - You won’t get a system design “right” from the first attempt. “You are not your users”. - If you think something is a good feature, it doesn’t mean that the users will think so. “Users don’t have to know the implementation details”. - Users will not remember complicated cause-and-effect scenarios. “Watch out for Hidden Cascade Effects”. - In a fully automated system, a user might not see/ suspect that their changes are affecting another system that is out of view. “The speed of iteration is vital to the quality of the game”. - Don’t let the tools be the bottleneck of the iteration process. Practical Principles General Tools Development Principles Enable user input and customization inside a procedural generation system. Observe users to understand what is important for them. K.I.S.S.: Keep It Stupid Simple Search for the balance between control and automation. Questions that came to mind What are some websites/resources about good Digital Content Creation tool architecture/patterns? Maybe even some checklists? Like : “Don’t forget to make a headless client for your tool” “Don’t forget to add python scripting” “Don’t forget to think about determinism when saving Is there any alternative to Houdini? (not counting rolling your own) How do they edit the road network that spans multiple maps (parts of the world)? How long into the future when level art for second class points of interest will be fully defined by recipes? When will it be mainstream? These notes are just the main ideas of the talk. They don’t contain anecdotes and examples. If you want to learn more, I would advise watching the talk on the GDC Vault. The Toolsmiths I took these notes as part of our little “Book Club” for GDC Vault Videos The Toolsmiths #vault club Join us on Slack. Join us on Twitter. Links Slides: Procedural World Generation of ‘Far Cry 5’ Related Talks\Videos GDC 2017 ‘Ghost Recon Wildlands’: Terrain Tools and Technology GDC 2018 Terrain Rendering in ‘Far Cry 5’ GDC 2018 The Asset Build System of ‘Far Cry 5’ GAT #69: River - 2k19 Edition Credits Post cover image by Pexels from Pixabay]]></summary></entry><entry><title type="html">Notes for “Tools for ‘Marvel’s Spider-Man’ Editing with Immutable Data” GDC2019</title><link href="/https://tools.engineer/gdc2019-tools-for-marvels-spider-man-editing-with-immutable-data" rel="alternate" type="text/html" title="Notes for “Tools for ‘Marvel’s Spider-Man’ Editing with Immutable Data” GDC2019" /><published>2019-07-14T01:00:00+00:00</published><updated>2019-07-14T01:00:00+00:00</updated><id>/https://tools.engineer/gdc2019-tools-for-marvels-spider-man-editing-with-immutable-data</id><content type="html" xml:base="/https://tools.engineer/gdc2019-tools-for-marvels-spider-man-editing-with-immutable-data"><![CDATA[<p><strong>TLDW Summary</strong>: This talk is a tour of the technologies that Insomniac Games developed to transition from their web based tools to their new desktop tools. Highlighting what challenges they encountered when replacing the tool chain in mid production.</p>

<h2 id="keywords">Keywords</h2>
<div class="keyword-container">
<ul class="keyword-container">
<li>Data Design</li>
<li>Immutable Data</li>
<li>Mid Production</li>
<li>Data Definition Language (DDL)</li>
<li>Porting</li>
</ul>
<style>
    .keyword-container > ul
    {
        font-size: 16px;
        list-style-type: none;
        padding:15px;
    }
    .keyword-container > li
    {
        background-color:#f3f3f3;
        display : inline;
        padding:5px;
        margin:2px;
        margin-bottom: 100px;
        border-radius: 5px;
    }
</style>
</div>

<h2 id="presentation-time-stamps">Presentation Time Stamps</h2>

<ul>
  <li><a href="https://www.gdcvault.com/play/1026080/Tools-for-Marvel-s-Spider">at min 1</a> Background</li>
  <li><a href="https://www.gdcvault.com/play/1026080/Tools-for-Marvel-s-Spider">at min 2</a> Making Changes</li>
  <li><a href="https://www.gdcvault.com/play/1026080/Tools-for-Marvel-s-Spider">at min 6</a> Mission Directive</li>
  <li><a href="https://www.gdcvault.com/play/1026080/Tools-for-Marvel-s-Spider">at min 15</a> Implicitly shared data with Copy-on-write</li>
  <li><a href="https://www.gdcvault.com/play/1026080/Tools-for-Marvel-s-Spider">at min 29</a> Immutable Data</li>
  <li><a href="https://www.gdcvault.com/play/1026080/Tools-for-Marvel-s-Spider">at min 32</a> The Edit Loop</li>
  <li><a href="https://www.gdcvault.com/play/1026080/Tools-for-Marvel-s-Spider">at min 41</a> Hazards Encountered</li>
  <li><a href="https://www.gdcvault.com/play/1026080/Tools-for-Marvel-s-Spider">at min 45</a> Conclusion</li>
  <li><a href="https://www.gdcvault.com/play/1026080/Tools-for-Marvel-s-Spider">at min 47</a> Q&amp;A</li>
</ul>

<h1 id="background">Background</h1>
<ul>
  <li>Insomniac Games started to develop Web-Based Tools in 2010 (written in JavaScript)
    <ul>
      <li>This lead to some issues and the engine team decided to go back to the regular desktop tools
        <ul>
          <li>for more see <a href="http://www.gdcvault.com/play/1024465/Insomniac-s-Web-Tools-A">GDC 2017 “Insomniac’s Web Tools: A Postmortem”</a></li>
        </ul>
      </li>
      <li>Insomniac Games  shipped 6 games with the web tools</li>
    </ul>
  </li>
  <li>This talk is about what happened after the “Insomniac’s Web Tools: A Postmortem”</li>
</ul>

<h1 id="making-changes">Making Changes</h1>
<p><em>timestamp: 2 min into the presentation</em></p>
<ul>
  <li>In 2015 the work started on the transition from JavaScript to C++ Qt with a 4 man team</li>
  <li>The refactoring had to be done while the tools were still in use</li>
  <li>Sunset Overdrive pushed the JS world editor to its limits and ‘Marvel’s Spider-Man’ Manhattan would be even bigger
    <ul>
      <li><img src="assets/images/posts/tools-for-marvels-spider-man-editing-with-immutable-data/map-scale.jpg" alt="slide: Sunset Overdrive vs'Marvel's Spider-Man' Manhattan size" width="700" /></li>
    </ul>
  </li>
  <li>the team needed to port 12 editors from JS
    <ul>
      <li><img src="assets/images/posts/tools-for-marvels-spider-man-editing-with-immutable-data/world-editor.jpg" alt="slide: world editor" width="700" /></li>
      <li><img src="assets/images/posts/tools-for-marvels-spider-man-editing-with-immutable-data/animation-editor.jpg" alt="slide: animation editor" width="700" /></li>
      <li><img src="assets/images/posts/tools-for-marvels-spider-man-editing-with-immutable-data/cinematics-editor.jpg" alt="slide: cinematics editor" width="700" /></li>
      <li><img src="assets/images/posts/tools-for-marvels-spider-man-editing-with-immutable-data/vfx-editor.jpg" alt="slide: vfx editor" width="700" /></li>
      <li><img src="assets/images/posts/tools-for-marvels-spider-man-editing-with-immutable-data/12-editors.jpg" alt="slide: 12 editors" width="700" /></li>
    </ul>
  </li>
  <li>the goals of the refactoring were
    <ul>
      <li>performance (being able to work with large data sets)
        <ul>
          <li>multi-threading support</li>
        </ul>
      </li>
      <li>easier to maintain</li>
      <li>type safety (JS “Uncaught TypeError: undefined is not a function”)</li>
    </ul>
  </li>
</ul>

<h1 id="mission-directive">Mission Directive</h1>
<p><em>timestamp: 6 min into the presentation</em></p>

<ul>
  <li>the tool porting was planned to be done when a significant part of the content would have been created with the old tools
    <ul>
      <li>needed to provide an upgrade path or data compatibility</li>
    </ul>
  </li>
  <li>the C++ tools need to have the same UX and UI as the JS tools to make the switching between the tools as seamless as possible.
    <ul>
      <li>no feature requests were accepted to make it possible to finish on time</li>
    </ul>
  </li>
  <li>The tools were 100% data compatible
    <ul>
      <li>this enabled the users to fall back to the JS tools when they hit an issue with the C++ version</li>
    </ul>
  </li>
  <li>the JS tools were using a local client/server model
    <ul>
      <li>the local server was called LunaServer
        <ul>
          <li>for more check out the GDC2012 talk about <a href="https://gdcvault.com/play/1015531/Developing-Imperfect-Software-How-to">Developing Imperfect Software: How to Prepare for Development Pipeline Failure</a></li>
        </ul>
      </li>
      <li>LunaServer
        <ul>
          <li>stores its state in MongoDB</li>
          <li>responsible for file system IO</li>
          <li>responsible for Perforce operations</li>
          <li>sync changes to assets between tools</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>their own in-house DDL
    <ul>
      <li>made JSON type safe with a DDL compiler (ToolsDDL) that would compile the DDL into C++ code (set/get)</li>
      <li>tools use in memory JSON representation (to reduce complexity and the need to convert between C++ object)modification</li>
    </ul>
  </li>
  <li>to represent a game object, they use JSON trees which are the same as hash table of hash tables</li>
</ul>

<h1 id="implicitly-shared-data-with-copy-on-write">Implicitly shared data with Copy-on-write</h1>
<p><em>timestamp: 15 min into the presentation</em></p>
<ul>
  <li>a detailed explanation of the Implicitly shared data with Copy-on-write pattern at @ 15-36</li>
  <li>basic idea
    <ul>
      <li>a global state is implicitly shared between modules</li>
      <li><img src="assets/images/posts/tools-for-marvels-spider-man-editing-with-immutable-data/modify_worldNode_0.jpg" alt="slide: modify worldNode step one" width="700" /></li>
      <li>when a module wants to update the global state, a copy is made</li>
      <li><img src="assets/images/posts/tools-for-marvels-spider-man-editing-with-immutable-data/modify_worldNode.jpg" alt="slide: modify worldNode step two" width="700" /></li>
      <li>after the modification is done the rest of the modules get notified to fetch the pointer to the new object</li>
      <li><img src="assets/images/posts/tools-for-marvels-spider-man-editing-with-immutable-data/modify_worldNode_2.jpg" alt="slide: modify worldNode step three" width="700" /></li>
    </ul>
  </li>
  <li>implicit sharing makes it easy to compute the diff of 2 JSON trees
    <ul>
      <li>this is because as soon as 2 subtrees point to the same shared subtree, you don’t need to traverse that part of the tree any further.</li>
    </ul>
  </li>
</ul>

<h1 id="immutable-data">Immutable Data</h1>
<p><em>timestamp: 29 min into the presentation</em></p>
<ul>
  <li>the same idea of Implicitly shared data <strong>without</strong> Copy-on-write
    <ul>
      <li>no setters</li>
      <li><img src="assets/images/posts/tools-for-marvels-spider-man-editing-with-immutable-data/Immutable_Data.jpg" alt="slide: Immutable Data class" width="700" /></li>
    </ul>
  </li>
  <li>this makes it easier to reason about the code</li>
</ul>

<div style="font-style: normal;font-size: 26px;margin-left: 32px;font-family: Consolas, 'Times New Roman', Verdana;border-left: 4px solid #3a5ebf;padding-left: 20px;">
<p></p>
"Immutable is not const. const only controls access, immutable is a guarantee."
<p></p>
</div>
<p></p>
<ul>
  <li>they like to think about this as a step towards functional programming</li>
  <li>designing an API that is like a function that returns a new value based on the old value
    <ul>
      <li>without any
        <ul>
          <li>side effects</li>
          <li>preconditions</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h1 id="the-edit-loop">The Edit Loop</h1>
<p><em>timestamp: 32 min into the presentation</em></p>
<ul>
  <li>LunaEdit is the module that is responsible for editing asset
    <ul>
      <li>creating a new object from an object that was passed in</li>
    </ul>
  </li>
  <li>LunaEdit is also responsible for
    <ul>
      <li>handling Perforce checkout</li>
      <li>handling the undo system</li>
      <li>sending updates to the LunaServer (updating the DB and files on disk)</li>
      <li>broadcast changes all of the modules in the system (change/update)</li>
    </ul>
  </li>
  <li>all of the complexity of working with the data format is hidden in one place -  the LunaEdit module</li>
  <li><img src="assets/images/posts/tools-for-marvels-spider-man-editing-with-immutable-data/edit_loop.jpg" alt="slide: The Edit Loop" width="700" /></li>
</ul>

<h1 id="hazards-encountered">Hazards Encountered</h1>
<p><em>timestamp: 41 min into the presentation</em></p>

<ul>
  <li>copying wide (flat) hash tables is expensive
    <ul>
      <li>prefer deep hash tables</li>
    </ul>
  </li>
  <li>don’t use QJsonObject
    <ul>
      <li>strings are stored as 8-bit and returned as 16-bit</li>
      <li>strings are not shared (issue with identical keys)</li>
    </ul>
  </li>
  <li>with multiple versions of data in flight
    <ul>
      <li>a module wants to change a piece of data that is in the process of being updated.</li>
      <li>this wasn’t an issue because the main thread is the only thread that can request a change</li>
    </ul>
  </li>
</ul>

<div style="background-color:#FFFF94;border-left: 18px solid #ffff48;padding-left: 50px;">
<p></p>
<p>These notes are just the main ideas of the talk. They don’t contain anecdotes and examples. If you want to learn more, I would advise watching the talk on the <a href="https://www.gdcvault.com/play/1026080/Tools-for-Marvel-s-Spider">GDC Vault</a>.</p>
<p></p>
</div>

<h2 id="the-toolsmiths">The Toolsmiths</h2>
<p><img src="https://tools.engineer/assets/images/thetoolsmiths_cover_1000x2881.png" alt="The Toolsmiths logo" width="700" /></p>

<p>I took these notes as part of our little “Book Club” for GDC Vault Videos <a href="http://thetoolsmiths.org/vault_club">The Toolsmiths #vault club</a></p>

<p>Join us on <a href="http://thetoolsmiths.org/join_slack_team">Slack</a>.</p>

<p>Join us on <a href="https://twitter.com/thetoolsmiths">Twitter</a>.</p>

<h2 id="links">Links</h2>
<ul>
  <li><a href="https://www.gdcvault.com/play/1026080/Tools-for-Marvel-s-Spider">Tools for ‘Marvel’s Spider-Man’ Editing with Immutable Data</a></li>
</ul>

<h2 id="related-talks">Related talks</h2>
<ul>
  <li><a href="http://www.gdcvault.com/play/1024465/Insomniac-s-Web-Tools-A">GDC 2017 “Insomniac’s Web Tools: A Postmortem”</a></li>
  <li><a href="https://gdcvault.com/play/1015531/Developing-Imperfect-Software-How-to">GDC 2012 Developing Imperfect Software: How to Prepare for Development Pipeline Failure</a></li>
</ul>]]></content><author><name>Victor Stepanov</name></author><category term="GDC" /><category term="data" /><category term="ddl" /><category term="edit" /><category term="web" /><summary type="html"><![CDATA[TLDW Summary: This talk is a tour of the technologies that Insomniac Games developed to transition from their web based tools to their new desktop tools. Highlighting what challenges they encountered when replacing the tool chain in mid production. Keywords Data Design Immutable Data Mid Production Data Definition Language (DDL) Porting Presentation Time Stamps at min 1 Background at min 2 Making Changes at min 6 Mission Directive at min 15 Implicitly shared data with Copy-on-write at min 29 Immutable Data at min 32 The Edit Loop at min 41 Hazards Encountered at min 45 Conclusion at min 47 Q&amp;A Background Insomniac Games started to develop Web-Based Tools in 2010 (written in JavaScript) This lead to some issues and the engine team decided to go back to the regular desktop tools for more see GDC 2017 “Insomniac’s Web Tools: A Postmortem” Insomniac Games shipped 6 games with the web tools This talk is about what happened after the “Insomniac’s Web Tools: A Postmortem” Making Changes timestamp: 2 min into the presentation In 2015 the work started on the transition from JavaScript to C++ Qt with a 4 man team The refactoring had to be done while the tools were still in use Sunset Overdrive pushed the JS world editor to its limits and ‘Marvel’s Spider-Man’ Manhattan would be even bigger the team needed to port 12 editors from JS the goals of the refactoring were performance (being able to work with large data sets) multi-threading support easier to maintain type safety (JS “Uncaught TypeError: undefined is not a function”) Mission Directive timestamp: 6 min into the presentation the tool porting was planned to be done when a significant part of the content would have been created with the old tools needed to provide an upgrade path or data compatibility the C++ tools need to have the same UX and UI as the JS tools to make the switching between the tools as seamless as possible. no feature requests were accepted to make it possible to finish on time The tools were 100% data compatible this enabled the users to fall back to the JS tools when they hit an issue with the C++ version the JS tools were using a local client/server model the local server was called LunaServer for more check out the GDC2012 talk about Developing Imperfect Software: How to Prepare for Development Pipeline Failure LunaServer stores its state in MongoDB responsible for file system IO responsible for Perforce operations sync changes to assets between tools their own in-house DDL made JSON type safe with a DDL compiler (ToolsDDL) that would compile the DDL into C++ code (set/get) tools use in memory JSON representation (to reduce complexity and the need to convert between C++ object)modification to represent a game object, they use JSON trees which are the same as hash table of hash tables Implicitly shared data with Copy-on-write timestamp: 15 min into the presentation a detailed explanation of the Implicitly shared data with Copy-on-write pattern at @ 15-36 basic idea a global state is implicitly shared between modules when a module wants to update the global state, a copy is made after the modification is done the rest of the modules get notified to fetch the pointer to the new object implicit sharing makes it easy to compute the diff of 2 JSON trees this is because as soon as 2 subtrees point to the same shared subtree, you don’t need to traverse that part of the tree any further. Immutable Data timestamp: 29 min into the presentation the same idea of Implicitly shared data without Copy-on-write no setters this makes it easier to reason about the code "Immutable is not const. const only controls access, immutable is a guarantee." they like to think about this as a step towards functional programming designing an API that is like a function that returns a new value based on the old value without any side effects preconditions The Edit Loop timestamp: 32 min into the presentation LunaEdit is the module that is responsible for editing asset creating a new object from an object that was passed in LunaEdit is also responsible for handling Perforce checkout handling the undo system sending updates to the LunaServer (updating the DB and files on disk) broadcast changes all of the modules in the system (change/update) all of the complexity of working with the data format is hidden in one place - the LunaEdit module Hazards Encountered timestamp: 41 min into the presentation copying wide (flat) hash tables is expensive prefer deep hash tables don’t use QJsonObject strings are stored as 8-bit and returned as 16-bit strings are not shared (issue with identical keys) with multiple versions of data in flight a module wants to change a piece of data that is in the process of being updated. this wasn’t an issue because the main thread is the only thread that can request a change These notes are just the main ideas of the talk. They don’t contain anecdotes and examples. If you want to learn more, I would advise watching the talk on the GDC Vault. The Toolsmiths I took these notes as part of our little “Book Club” for GDC Vault Videos The Toolsmiths #vault club Join us on Slack. Join us on Twitter. Links Tools for ‘Marvel’s Spider-Man’ Editing with Immutable Data Related talks GDC 2017 “Insomniac’s Web Tools: A Postmortem” GDC 2012 Developing Imperfect Software: How to Prepare for Development Pipeline Failure]]></summary></entry><entry><title type="html">Notes for “The Future of Scene Description on ‘God of War’” GDC2019</title><link href="/https://tools.engineer/gdc2019-the-future-of-scene-description-on-god-of-war" rel="alternate" type="text/html" title="Notes for “The Future of Scene Description on ‘God of War’” GDC2019" /><published>2019-06-16T01:00:00+00:00</published><updated>2019-06-16T01:00:00+00:00</updated><id>/https://tools.engineer/gdc2019-the-future-of-scene-description-on-god-of-war</id><content type="html" xml:base="/https://tools.engineer/gdc2019-the-future-of-scene-description-on-god-of-war"><![CDATA[<p><strong>TLDW Summary</strong>: This talk sheds light on the decisions that were made by the Santa Monica Studio’s engine team while tackling the problems of time and complexity in transforming source data into game-ready data.</p>

<h2 id="keywords">Keywords</h2>
<div class="keyword-container">
<ul class="keyword-container">
<li>Data Design</li>
<li>Data Duality</li>
<li>Scene Description</li>
<li>Data Definition Language (DDL)</li>
<li>Nondeterminism</li>
</ul>
<style>
    .keyword-container > ul
    {
        font-size: 16px;
        list-style-type: none;
        padding:15px;
    }
    .keyword-container > li
    {
        background-color:#f3f3f3;
        display : inline;
        padding:5px;
        margin:2px;
        margin-bottom: 100px;
        border-radius: 5px;
    }
</style>
</div>

<h2 id="presentation-time-stamps">Presentation Time Stamps</h2>
<ul>
  <li><a href="https://www.gdcvault.com/play/1025969/The-Future-of-Scene-Description">at min 1</a> Backgound: Game Content Pipeline</li>
  <li><a href="https://www.gdcvault.com/play/1025969/The-Future-of-Scene-Description">at min 16</a> Past: Redefining SmSchema</li>
  <li><a href="https://www.gdcvault.com/play/1025969/The-Future-of-Scene-Description">at min 20</a> Present: A view after years of investment</li>
  <li><a href="https://www.gdcvault.com/play/1025969/The-Future-of-Scene-Description">at min 27</a> Present: Connecting the parts of the design into one</li>
  <li><a href="https://www.gdcvault.com/play/1025969/The-Future-of-Scene-Description">at min 37</a> Looking into the future: many opportunities still remain</li>
  <li><a href="https://www.gdcvault.com/play/1025969/The-Future-of-Scene-Description">at min 41</a> Lessons we’ve learned</li>
  <li><a href="https://www.gdcvault.com/play/1025969/The-Future-of-Scene-Description">at min 43</a> Q&amp;A</li>
</ul>

<h2 id="backgound-game-content-pipeline">Backgound: Game Content Pipeline</h2>
<p><em>timestamp: 1 min into the presentation</em></p>
<ul>
  <li>God of War data breakdown
<img src="assets/images/posts/the-future-of-scene-description-on-god-of-war\god-of-War-data-breakdown.jpg" alt="slide: God of War data breakdown" width="700" /></li>
  <li>What Source Data and Run-time data have in common
<img src="assets/images/posts/the-future-of-scene-description-on-god-of-war\source-data-n-production-data.jpg" alt="slide: What Source Data and Run-time data have in common" width="700" /></li>
  <li>The design philosophy was inspired by the scene description from the film industry</li>
  <li>Patch size was a common enemy
    <ul>
      <li>Nondeterminism made patch sizes huge
        <ul>
          <li>Patching was always an afterthought.</li>
          <li>Parts of the run-time was an afterthought.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Exploring data formats to find a better way</li>
  <li>2 types of explicit data formats
    <ul>
      <li>Low level: FlatBuffers, ProtocolBuffers</li>
      <li>Higher level: COLLADA and USD</li>
    </ul>
  </li>
  <li>None satisfied the requirements
    <ul>
      <li>This was the catalyst for the SmSchema Data Definition Language</li>
    </ul>
  </li>
  <li>The SmSchema proof of concept had 3 main parts
    <ul>
      <li>The definition itself</li>
      <li>C++ code generation with (Jinja Python)</li>
      <li>Sterilization into JSON</li>
    </ul>
  </li>
  <li>The first attempt to apply it to a real-world problem showed that the mental model that they had envisioned had missing parts
<img src="assets/images/posts/the-future-of-scene-description-on-god-of-war\smschema-interconnected-technologies.jpg" alt="slide: missing interconnected technologies" width="700" /></li>
</ul>

<h2 id="past-redefining-smschema">Past: Redefining SmSchema</h2>
<p><em>timestamp: 16 min into the presentation</em></p>
<ul>
  <li>Decided to use the serialization as an anchor point to design around</li>
  <li>The redesign started with laying down the foundation with <a href="https://fs.blog/2018/04/first-principles/">first-prenciples</a>
<img src="assets/images/posts/the-future-of-scene-description-on-god-of-war\first-principles.jpg" alt="slide: first-prenciples used in the design" width="700" /></li>
  <li>Wanted to get away from a JSON-based Language</li>
  <li>Issues with Maya scalability brought more questions that needed answers
<img src="assets/images/posts/the-future-of-scene-description-on-god-of-war\new-insight.jpg" alt="slide: questions that needed answers" width="700" /></li>
</ul>

<h2 id="present-a-view-after-years-of-investment">Present: A view after years of investment</h2>
<p><em>timestamp: 20 min into the presentation</em></p>
<ul>
  <li><img src="assets/images/posts/the-future-of-scene-description-on-god-of-war\smschema-interconnected-technologies-2.jpg" alt="slide: SmSchema architecture high level" width="700" /></li>
  <li>The DDL was inspired by <a href="https://gdcvault.com/play/1015531/Developing-Imperfect-Software-How-to">Insomniac’s DDL</a></li>
  <li>Used <a href="https://www.antlr.org/">ANTLR</a> for language definition</li>
  <li>Process of code generation
    <ul>
      <li>Used special Compile-Time Type Info (CTTI) to decouple the DDL and the code generation</li>
      <li>Used a functional approach to make it easier to generate code to any current or future target</li>
      <li>Used special metadata in the form of annotations to enable user-driven code generation without making changes in the parser</li>
    </ul>
  </li>
  <li><img src="assets/images/posts/the-future-of-scene-description-on-god-of-war\code-gen-1.jpg" alt="slide: Code Generation with CTTI info" width="700" /></li>
  <li><img src="assets/images/posts/the-future-of-scene-description-on-god-of-war\code-gen-2.jpg" alt="slide: Code Generation with CTTI flexibility" width="700" /></li>
  <li>Serialization formats
    <ul>
      <li>JSON - Human readable for merging, diffing and fixing issues
        <ul>
          <li>Leverage open source tools and libs</li>
        </ul>
      </li>
      <li>Binary - For performance &amp; compression</li>
      <li>Experimenting with MsgPack to encode large assets</li>
      <li>X3D scene loader increased performance by an order of magnitude while saving and loading</li>
    </ul>
  </li>
</ul>

<h2 id="present-connecting-the-parts-of-the-design-into-one">Present: connecting the parts of the design into one</h2>
<p><em>timestamp: 27 min into the presentation</em></p>
<ul>
  <li>The defining structure of SmSchema that brings all of the parts together is called the document.</li>
  <li>The Document is a “Section of data with a header”
    <ul>
      <li>Defining the semantics of pointers used in the referencing solution. Used to reference other documents.</li>
    </ul>
  </li>
  <li>Pointers was a common request for SmSchema
    <ul>
      <li>See details on the implementation of pointer @ min 28</li>
      <li>The pointer had to provide
        <ul>
          <li>Ownership semantics: unique, weak</li>
          <li>Locality semantics: local, section, external</li>
          <li>Used Frozen/Alive concept to determine if the reference is loaded</li>
          <li>The concept of the section was introduced to SmSchema
            <ul>
              <li>A document is segmented into several memory blocks</li>
              <li>These memory blocks are called sections and are used for storing things like debug data or GPU data</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li><img src="assets/images/posts/the-future-of-scene-description-on-god-of-war\sections.jpg" alt="slide: Sections of the SmSchema Doc" width="700" /></li>
  <li>With the Document structure, they were able to design workflows with a minimum amount of transformations from the source data to the run-time data
    <ul>
      <li>The document could be
        <ul>
          <li>Shipping streaming resource</li>
          <li>A string hash look-up table</li>
          <li>A source X3D scene graph</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><img src="assets/images/posts/the-future-of-scene-description-on-god-of-war\data-transform.jpg" alt="slide: Transforming data from source to run-time" width="700" /></li>
</ul>

<h2 id="looking-into-the-future-many-opportunities-still-remain">Looking into the future: many opportunities still remain</h2>
<p><em>timestamp: 37 min into the presentation</em></p>

<ul>
  <li>Current and future research
<img src="assets/images/posts/the-future-of-scene-description-on-god-of-war\wip.jpg" alt="slide: SmSchema architecture high level Final" width="700" /></li>
  <li>Challenges with external pointer resolution
    <ul>
      <li>Who is responsible for resolving? 
<img src="assets/images/posts/the-future-of-scene-description-on-god-of-war\external-pointers.jpg" alt="slide: Frozen external pointers" width="700" /></li>
    </ul>
  </li>
  <li>This led to the creation of a data structure for arbitrating external pointer resolution called the “document store”
    <ul>
      <li>The document arbitration takes a form of transaction
<img src="assets/images/posts/the-future-of-scene-description-on-god-of-war\document-store.jpg" alt="slide: Document store transactions" width="700" /></li>
    </ul>
  </li>
  <li>The combination of the Document Store and Streaming Policies could produce complex decision-making behavior for streaming resources</li>
</ul>

<div style="font-style: normal;font-size: 26px;margin-left: 32px;font-family: Consolas, 'Times New Roman', Verdana;border-left: 4px solid #3a5ebf;padding-left: 20px;">
<p></p>
"Solutions have to be driven by use case, introduced with scrutiny, and solve a domain of problems evidently and clearly."
<p></p>
</div>

<h2 id="lessons-weve-learned">Lessons we’ve learned</h2>
<p><em>timestamp: 41 min into the presentation</em></p>
<ul>
  <li>While answering what is the future of Scene Description on “God of War”
    <ul>
      <li>They understood that there are other questions that they need to answer before answering the original question
        <ul>
          <li>What are the primitives used in the design of
            <ul>
              <li>The engine</li>
              <li>The workflows</li>
              <li>The formats</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<div style="font-style: normal;font-size: 26px;margin-left: 32px;font-family: Consolas, 'Times New Roman', Verdana;border-left: 4px solid #3a5ebf;padding-left: 20px;">
<p></p>
"Our goal was never to predispose ourselves to a particulate design. The future of scene description is not a data structure, it’s not a design pattern; it’s a set of questions that we need to be able to answer about our content."
<p></p>
</div>

<p><img src="assets/images/posts/the-future-of-scene-description-on-god-of-war\takeaway.jpg" alt="slide: takeaway" width="700" /></p>

<div style="background-color:#FFFF94;border-left: 18px solid #ffff48;padding-left: 50px;">
<p></p>
<p>These notes are just the main ideas of the talk. They don’t contain anecdotes and examples. If you want to learn more, I would advise watching the talk on the <a href="https://www.gdcvault.com/play/1025969/The-Future-of-Scene-Description">GDC Vault</a>.</p>
<p></p>
</div>

<h2 id="the-toolsmiths">The Toolsmiths</h2>
<p><img src="https://tools.engineer/assets/images/thetoolsmiths_cover_1000x2881.png" alt="The Toolsmiths logo" width="700" /></p>

<p>I took these notes as part of our little “Book Club” for GDC Vault Videos <a href="http://thetoolsmiths.org/vault_club">The Toolsmiths #vault club</a></p>

<p><strong>Koray Hagen</strong> is a member of the <a href="http://thetoolsmiths.org/">Toolsmiths</a> community. The Toolsmiths are a community of Game Tool Developers that are passionate about improving the way people make games.</p>

<p>Join us on <a href="http://thetoolsmiths.org/join_slack_team">Slack</a>.</p>

<p>Join us on <a href="https://twitter.com/thetoolsmiths">Twitter</a>.</p>

<h2 id="links">Links</h2>
<ul>
  <li><a href="https://www.gdcvault.com/play/1025969/The-Future-of-Scene-Description">The Future of Scene Description on ‘God of War’</a></li>
  <li>Slides for <a href="https://www.gdcvault.com/play/1026345/The-Future-of-Scene-Description">The Future of Scene Description on ‘God of War’</a></li>
</ul>

<h2 id="related-blog-links">Related Blog Links</h2>
<ul>
  <li>Notes for <a href="https://tools.engineer//2018-10-07-tools-tutorial-day-a-tale-of-three-data-schemas">GDC 2018 Tools Tutorial Day: A Tale of Three Data Schemas</a></li>
</ul>

<h2 id="related-talks">Related talks</h2>
<ul>
  <li><a href="https://www.gdcvault.com/play/1025284/Tools-Tutorial-Day-A-Tale">GDC 2018 Tools Tutorial Day: A Tale of Three Data Schemas</a></li>
  <li><a href="https://gdcvault.com/play/1015531/Developing-Imperfect-Software-How-to">GDC 2012 Developing Imperfect Software: How to Prepare for Development Pipeline Failure</a></li>
</ul>]]></content><author><name>Victor Stepanov</name></author><category term="GDC" /><category term="data" /><category term="determinism" /><category term="ddl" /><summary type="html"><![CDATA[TLDW Summary: This talk sheds light on the decisions that were made by the Santa Monica Studio’s engine team while tackling the problems of time and complexity in transforming source data into game-ready data. Keywords Data Design Data Duality Scene Description Data Definition Language (DDL) Nondeterminism Presentation Time Stamps at min 1 Backgound: Game Content Pipeline at min 16 Past: Redefining SmSchema at min 20 Present: A view after years of investment at min 27 Present: Connecting the parts of the design into one at min 37 Looking into the future: many opportunities still remain at min 41 Lessons we’ve learned at min 43 Q&amp;A Backgound: Game Content Pipeline timestamp: 1 min into the presentation God of War data breakdown What Source Data and Run-time data have in common The design philosophy was inspired by the scene description from the film industry Patch size was a common enemy Nondeterminism made patch sizes huge Patching was always an afterthought. Parts of the run-time was an afterthought. Exploring data formats to find a better way 2 types of explicit data formats Low level: FlatBuffers, ProtocolBuffers Higher level: COLLADA and USD None satisfied the requirements This was the catalyst for the SmSchema Data Definition Language The SmSchema proof of concept had 3 main parts The definition itself C++ code generation with (Jinja Python) Sterilization into JSON The first attempt to apply it to a real-world problem showed that the mental model that they had envisioned had missing parts Past: Redefining SmSchema timestamp: 16 min into the presentation Decided to use the serialization as an anchor point to design around The redesign started with laying down the foundation with first-prenciples Wanted to get away from a JSON-based Language Issues with Maya scalability brought more questions that needed answers Present: A view after years of investment timestamp: 20 min into the presentation The DDL was inspired by Insomniac’s DDL Used ANTLR for language definition Process of code generation Used special Compile-Time Type Info (CTTI) to decouple the DDL and the code generation Used a functional approach to make it easier to generate code to any current or future target Used special metadata in the form of annotations to enable user-driven code generation without making changes in the parser Serialization formats JSON - Human readable for merging, diffing and fixing issues Leverage open source tools and libs Binary - For performance &amp; compression Experimenting with MsgPack to encode large assets X3D scene loader increased performance by an order of magnitude while saving and loading Present: connecting the parts of the design into one timestamp: 27 min into the presentation The defining structure of SmSchema that brings all of the parts together is called the document. The Document is a “Section of data with a header” Defining the semantics of pointers used in the referencing solution. Used to reference other documents. Pointers was a common request for SmSchema See details on the implementation of pointer @ min 28 The pointer had to provide Ownership semantics: unique, weak Locality semantics: local, section, external Used Frozen/Alive concept to determine if the reference is loaded The concept of the section was introduced to SmSchema A document is segmented into several memory blocks These memory blocks are called sections and are used for storing things like debug data or GPU data With the Document structure, they were able to design workflows with a minimum amount of transformations from the source data to the run-time data The document could be Shipping streaming resource A string hash look-up table A source X3D scene graph Looking into the future: many opportunities still remain timestamp: 37 min into the presentation Current and future research Challenges with external pointer resolution Who is responsible for resolving? This led to the creation of a data structure for arbitrating external pointer resolution called the “document store” The document arbitration takes a form of transaction The combination of the Document Store and Streaming Policies could produce complex decision-making behavior for streaming resources "Solutions have to be driven by use case, introduced with scrutiny, and solve a domain of problems evidently and clearly." Lessons we’ve learned timestamp: 41 min into the presentation While answering what is the future of Scene Description on “God of War” They understood that there are other questions that they need to answer before answering the original question What are the primitives used in the design of The engine The workflows The formats "Our goal was never to predispose ourselves to a particulate design. The future of scene description is not a data structure, it’s not a design pattern; it’s a set of questions that we need to be able to answer about our content." These notes are just the main ideas of the talk. They don’t contain anecdotes and examples. If you want to learn more, I would advise watching the talk on the GDC Vault. The Toolsmiths I took these notes as part of our little “Book Club” for GDC Vault Videos The Toolsmiths #vault club Koray Hagen is a member of the Toolsmiths community. The Toolsmiths are a community of Game Tool Developers that are passionate about improving the way people make games. Join us on Slack. Join us on Twitter. Links The Future of Scene Description on ‘God of War’ Slides for The Future of Scene Description on ‘God of War’ Related Blog Links Notes for GDC 2018 Tools Tutorial Day: A Tale of Three Data Schemas Related talks GDC 2018 Tools Tutorial Day: A Tale of Three Data Schemas GDC 2012 Developing Imperfect Software: How to Prepare for Development Pipeline Failure]]></summary></entry><entry><title type="html">Notes for “Bungie’s Force Multipliers - Production Engineers” GDC2019</title><link href="/https://tools.engineer/gdc2019-bungie-s-force-multipliers-production-engineers" rel="alternate" type="text/html" title="Notes for “Bungie’s Force Multipliers - Production Engineers” GDC2019" /><published>2019-05-26T01:00:00+00:00</published><updated>2019-05-26T01:00:00+00:00</updated><id>/https://tools.engineer/gdc2019-bungie-s-force-multipliers-production-engineers</id><content type="html" xml:base="/https://tools.engineer/gdc2019-bungie-s-force-multipliers-production-engineers"><![CDATA[<p><strong>TLDW Summary</strong>: How Bungie organized a dedicated task force of engineers to stay on top of production challenges, blocking issues and shielding Tech-Artists and Engineers from random support requests.</p>

<h2 id="keywords">Keywords</h2>
<div class="keyword-container">
<ul class="keyword-container">
<li>Support</li>
<li>Tools Role</li>
<li>Production</li>
</ul>
<style>
    .keyword-container > ul
    {
        font-size: 16px;
        list-style-type: none;
        padding:15px;
    }
    .keyword-container > li
    {
        background-color:#f3f3f3;
        display : inline;
        padding:5px;
        margin:2px;
        margin-bottom: 100px;
        border-radius: 5px;
    }
</style>
</div>

<h2 id="presentation-table-of-contents">Presentation Table of Contents</h2>
<p><img src="assets/images/posts/Bungie-s-Force-Multipliers-Production/toc.jpg" alt="slide: achieving the development vision" width="700" /></p>

<h2 id="presentation-timestamps">Presentation Timestamps</h2>
<ul>
  <li><a href="https://www.gdcvault.com/play/1025970/Bungie-s-Force-Multipliers-Production">at min 1</a> What is a Production Engineer (PE)?</li>
  <li><a href="https://www.gdcvault.com/play/1025970/Bungie-s-Force-Multipliers-Production">at min 6</a> History</li>
  <li><a href="https://www.gdcvault.com/play/1025970/Bungie-s-Force-Multipliers-Production">at min 10</a> Training &amp; Specializations</li>
  <li><a href="https://www.gdcvault.com/play/1025970/Bungie-s-Force-Multipliers-Production">at min 13</a> Day-to-Day</li>
  <li><a href="https://www.gdcvault.com/play/1025970/Bungie-s-Force-Multipliers-Production">at min 33</a> Hiring a Production Engineer</li>
  <li><a href="https://www.gdcvault.com/play/1025970/Bungie-s-Force-Multipliers-Production">at min 37</a> Conclusion &amp; Takeaways</li>
  <li><a href="https://www.gdcvault.com/play/1025970/Bungie-s-Force-Multipliers-Production">at min 38</a> Q&amp;A</li>
</ul>

<h2 id="what-is-a-production-engineer-pe">What is a Production Engineer (PE)?</h2>
<p><em>timestamp: 1 min into the presentation</em></p>
<ul>
  <li>PE is a dedicated engineering role that comes to the rescue when a content creator hits an issue that blocks his/her work.</li>
  <li>PEs also track down the root cause of an issue and bring the issue up to the teams that can fix it.</li>
  <li>PEs are aware of all of the current issues that are blocking developers in the studio
    <ul>
      <li>they know how to fix the issue</li>
      <li>they know how to work around the issue</li>
      <li>they know who is fixing the issue</li>
    </ul>
  </li>
  <li>The skill set of a PE is a combination of an Engineer, Tech Artis, Tester, and a Producer</li>
  <li>PEs look for possible inefficiencies in the workflows of devs that are getting blocked</li>
  <li>PEs spot workflow automation potential</li>
</ul>

<h2 id="history">History</h2>
<p><em>timestamp: 6 min into the presentation</em></p>
<ul>
  <li>the PE role was formed from a need to have a dedicated person help with random technical issues on the development team</li>
  <li>there were several gaps in the production knowledge base:
    <ul>
      <li>missing tools documentation</li>
      <li>missing workflow documentation</li>
      <li><img src="assets/images/posts/Bungie-s-Force-Multipliers-Production/no-docs-for-tools.jpg" alt="slide: Gap: No Docs for tools" width="700" /></li>
    </ul>
  </li>
  <li>when the PE team was formed there were about 3-4 PEs</li>
  <li>Bungie tries to keep the PE ratio to 1:20 users</li>
  <li>PEs should have the following traits
    <ul>
      <li><img src="assets/images/posts/Bungie-s-Force-Multipliers-Production/unique-experiences.jpg" alt="slide: Unique Experiences" width="700" /></li>
    </ul>
  </li>
  <li>Diverse Backgrounds
    <ul>
      <li><img src="assets/images/posts/Bungie-s-Force-Multipliers-Production/diverse-background-sills.jpg" alt="slide: diverse background sills" width="700" /></li>
    </ul>
  </li>
</ul>

<h2 id="training--specializations">Training &amp; Specializations</h2>
<p><em>timestamp: 10 min into the presentation</em></p>
<ul>
  <li>PEs have a training regimen for new hires
    <ul>
      <li>a PEs from different teams train the new hire</li>
      <li><img src="assets/images/posts/Bungie-s-Force-Multipliers-Production/pe-training.jpg" alt="slide: pe training" width="700" /></li>
    </ul>
  </li>
  <li>a PE is a generalist but usually will specialize in a particular area of the game production</li>
  <li>PEs are also responsible for bringing up to speed new hires in the “users” team</li>
</ul>

<h2 id="day-to-day">Day-to-Day</h2>
<p><em>timestamp: 13 min into the presentation</em></p>
<ul>
  <li>there is usually a PE in walking distance from a Content Creator</li>
  <li>details on managing Special Email Support list and issue tickets <a href="https://www.gdcvault.com/play/1025970/Bungie-s-Force-Multipliers-Production">at min 15</a></li>
  <li>about 15% of issues need to be escalated beyond the PE team</li>
  <li>PEs help Tech-Artists and Engineers focus on their primary work duties, thus maximize the effectiveness of those teams
    <ul>
      <li><img src="assets/images/posts/Bungie-s-Force-Multipliers-Production/a-tas-time.jpg" alt="slide: a TA's time" width="700" /></li>
    </ul>
  </li>
  <li>PEs can temporarily act as a substitute of a Content Creator and step into that role knowing the process and workflows</li>
  <li>PEs are in a constant search for the underlying issue
    <ul>
      <li>is it workflow related?</li>
      <li>is it tool related?</li>
      <li>is there enough staff?</li>
    </ul>
  </li>
  <li>20% of a PE’s time is spent in projects that solve small to mid-sized issues that the engineers don’t have time to address
    <ul>
      <li>examples:
        <ul>
          <li>BungieLauncher</li>
          <li>Cleanup of old and not used content</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="hiring-a-production-engineer">Hiring a Production Engineer</h2>
<p><em>timestamp: 33 min into the presentation</em></p>
<ul>
  <li>key skills
    <ul>
      <li><img src="assets/images/posts/Bungie-s-Force-Multipliers-Production/what-to-look-for-when-hiring-a-pe.jpg" alt="slide: what to look for when hiring a pe" width="700" /></li>
    </ul>
  </li>
  <li>“foot in the door” type of a position - not a bad thing</li>
</ul>

<h2 id="qa">Q&amp;A</h2>
<p><em>timestamp: 38 min into the presentation</em></p>

<ul>
  <li>it is part of a PE’s job to drive cultural change
    <ul>
      <li>like documentation</li>
    </ul>
  </li>
  <li>when the PE team was set up the hiring was done internally</li>
  <li>PE’s time is organized depending on the situation</li>
  <li>it is vital for a PE to attend retrospectives</li>
</ul>

<div style="background-color:#FFFF94;border-left: 18px solid #ffff48;padding-left: 50px;">
<p></p>
<p>These notes are just the main ideas of the talk. They don’t contain anecdotes and examples. If you want to learn more, I would advise watching the talk on the <a href="https://www.gdcvault.com/play/1025969/The-Future-of-Scene-Description">GDC Vault</a>.</p>
<p></p>
</div>

<h2 id="the-toolsmiths">The Toolsmiths</h2>
<p><img src="https://tools.engineer/assets/images/thetoolsmiths_cover_1000x2881.png" alt="The Toolsmiths logo" width="700" /></p>

<p>I took these notes as part of our little “Book Club” for GDC Vault Videos <a href="http://thetoolsmiths.org/vault_club">The Toolsmiths #vault club</a></p>

<p><strong>Jo King-Yost</strong> is a member of the <a href="http://thetoolsmiths.org/">Toolsmiths</a> community. The Toolsmiths are a community of Game Tool Developers that are passionate about improving the way people make games.</p>

<p>Join us on <a href="http://thetoolsmiths.org/join_slack_team">Slack</a>.</p>

<p>Join us on <a href="https://twitter.com/thetoolsmiths">Twitter</a>.</p>

<h2 id="links">Links</h2>
<ul>
  <li><a href="https://www.gdcvault.com/play/1025970/Bungie-s-Force-Multipliers-Production">GDC 2019 Bungie’s Force Multipliers: Production Engineers</a></li>
  <li>Slides for <a href="https://www.gdcvault.com/play/1026530/Bungie-s-Force-Multipliers-Production">GDC 2019 Bungie’s Force Multipliers: Production Engineers</a></li>
</ul>

<h2 id="related-blog-links">Related Blog Links</h2>
<ul>
  <li>Notes for <a href="https://tools.engineer//gdc2019-pipeline-support-for-feature-branches-in-destiny">GDC 2019 Pipeline Support for Feature Branches in ‘Destiny’</a></li>
</ul>

<h2 id="related-talks">Related talks</h2>
<ul>
  <li><a href="https://www.gdcvault.com/play/1025992/Pipeline-Support-for-Feature-Branches">GDC 2019 Pipeline Support for Feature Branches in ‘Destiny’</a></li>
  <li><a href="https://www.gdcvault.com/browse/gdc-19/play/1025807">GDC 2019 Tools Tutorial Day: Tooling for Small Team Workflows</a></li>
  <li><a href="https://www.gdcvault.com/browse/gdc-18/play/1025252/Teams-Are-Stronger-Than-Heroes">GDC 2018 Teams Are Stronger Than Heroes: Bungie Development Evolved</a></li>
  <li><a href="https://www.gdcvault.com/browse/gdc-18/play/1025116/Epic-Sync-Wrangling-the-Work">GDC 2018 Epic Sync: Wrangling the Work of Highly Interdependent Dev Teams at Bungie</a></li>
</ul>]]></content><author><name>Victor Stepanov</name></author><category term="GDC" /><category term="Roles" /><category term="Support" /><category term="Production" /><summary type="html"><![CDATA[TLDW Summary: How Bungie organized a dedicated task force of engineers to stay on top of production challenges, blocking issues and shielding Tech-Artists and Engineers from random support requests. Keywords Support Tools Role Production Presentation Table of Contents Presentation Timestamps at min 1 What is a Production Engineer (PE)? at min 6 History at min 10 Training &amp; Specializations at min 13 Day-to-Day at min 33 Hiring a Production Engineer at min 37 Conclusion &amp; Takeaways at min 38 Q&amp;A What is a Production Engineer (PE)? timestamp: 1 min into the presentation PE is a dedicated engineering role that comes to the rescue when a content creator hits an issue that blocks his/her work. PEs also track down the root cause of an issue and bring the issue up to the teams that can fix it. PEs are aware of all of the current issues that are blocking developers in the studio they know how to fix the issue they know how to work around the issue they know who is fixing the issue The skill set of a PE is a combination of an Engineer, Tech Artis, Tester, and a Producer PEs look for possible inefficiencies in the workflows of devs that are getting blocked PEs spot workflow automation potential History timestamp: 6 min into the presentation the PE role was formed from a need to have a dedicated person help with random technical issues on the development team there were several gaps in the production knowledge base: missing tools documentation missing workflow documentation when the PE team was formed there were about 3-4 PEs Bungie tries to keep the PE ratio to 1:20 users PEs should have the following traits Diverse Backgrounds Training &amp; Specializations timestamp: 10 min into the presentation PEs have a training regimen for new hires a PEs from different teams train the new hire a PE is a generalist but usually will specialize in a particular area of the game production PEs are also responsible for bringing up to speed new hires in the “users” team Day-to-Day timestamp: 13 min into the presentation there is usually a PE in walking distance from a Content Creator details on managing Special Email Support list and issue tickets at min 15 about 15% of issues need to be escalated beyond the PE team PEs help Tech-Artists and Engineers focus on their primary work duties, thus maximize the effectiveness of those teams PEs can temporarily act as a substitute of a Content Creator and step into that role knowing the process and workflows PEs are in a constant search for the underlying issue is it workflow related? is it tool related? is there enough staff? 20% of a PE’s time is spent in projects that solve small to mid-sized issues that the engineers don’t have time to address examples: BungieLauncher Cleanup of old and not used content Hiring a Production Engineer timestamp: 33 min into the presentation key skills “foot in the door” type of a position - not a bad thing Q&amp;A timestamp: 38 min into the presentation it is part of a PE’s job to drive cultural change like documentation when the PE team was set up the hiring was done internally PE’s time is organized depending on the situation it is vital for a PE to attend retrospectives These notes are just the main ideas of the talk. They don’t contain anecdotes and examples. If you want to learn more, I would advise watching the talk on the GDC Vault. The Toolsmiths I took these notes as part of our little “Book Club” for GDC Vault Videos The Toolsmiths #vault club Jo King-Yost is a member of the Toolsmiths community. The Toolsmiths are a community of Game Tool Developers that are passionate about improving the way people make games. Join us on Slack. Join us on Twitter. Links GDC 2019 Bungie’s Force Multipliers: Production Engineers Slides for GDC 2019 Bungie’s Force Multipliers: Production Engineers Related Blog Links Notes for GDC 2019 Pipeline Support for Feature Branches in ‘Destiny’ Related talks GDC 2019 Pipeline Support for Feature Branches in ‘Destiny’ GDC 2019 Tools Tutorial Day: Tooling for Small Team Workflows GDC 2018 Teams Are Stronger Than Heroes: Bungie Development Evolved GDC 2018 Epic Sync: Wrangling the Work of Highly Interdependent Dev Teams at Bungie]]></summary></entry><entry><title type="html">Notes for “Pipeline Support for Feature Branches in ‘Destiny’” GDC2019</title><link href="/https://tools.engineer/gdc2019-pipeline-support-for-feature-branches-in-destiny" rel="alternate" type="text/html" title="Notes for “Pipeline Support for Feature Branches in ‘Destiny’” GDC2019" /><published>2019-05-05T01:00:00+00:00</published><updated>2019-05-05T01:00:00+00:00</updated><id>/https://tools.engineer/gdc2019-pipeline-support-for-feature-branches-in-destiny</id><content type="html" xml:base="/https://tools.engineer/gdc2019-pipeline-support-for-feature-branches-in-destiny"><![CDATA[<h2 id="tldw-summary">TLDW Summary:</h2>
<p>How Bungie created an ecosystem of tools and workflows to allow small teams to quickly iterate on changes without worrying about breaking and blocking other teams.</p>

<h2 id="keywords">Keywords</h2>
<div class="keyword-container">
<ul class="keyword-container">
<li>Game Data Merging</li>
<li>Version Control System</li>
<li>Branch Integration </li>
</ul>
<style>
    .keyword-container > ul
    {
        font-size: 16px;
        list-style-type: none;
        padding:15px;
    }
    .keyword-container > li
    {
        background-color:#f3f3f3;
        display : inline;
        padding:5px;
        margin:2px;
        margin-bottom: 100px;
        border-radius: 5px;
    }
</style>
</div>

<h2 id="intro">Intro</h2>
<ul>
  <li>Each P4 branch is about 4 Tb</li>
  <li>Up to 350 content creators, designers, and engineers working in one branch</li>
  <li>They use a pre-commit build pipeline - “the Gauntlet”
    <ul>
      <li>Pete Kugler did a talk at <a href="https://drive.google.com/file/d/1FeZGA-MeuI31Wan9ZVlXmSZ-JrSLgIL2/view?usp=sharing">GDC2016: Developing a pipeline for managing game stability</a>
        <ul>
          <li>Pipeline for managing game stability</li>
          <li>Describes the reason they put the pre-commit system in place</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>They pick stability over iteration speed
    <ul>
      <li><img src="assets/images/posts/pipeline-support-for-feature-branches/initial-destiny-2-challenges.jpg" alt="slide: initial Destiny 2 challenges" width="700" /></li>
    </ul>
  </li>
  <li>Had technical limitations of just simply adding more feature branches
    <ul>
      <li>Not supported by tools</li>
      <li>More pressure on integration</li>
      <li>More pressure on build pipeline</li>
      <li>Couldn’t merge game data</li>
    </ul>
  </li>
  <li>Definition <strong>“Feature Branch”</strong> - Branch created for teams to work in without interfering with the stability of the main branch</li>
  <li>Definition <strong>“Small Team”</strong> -  group of cross-discipline developer working collaboratively on shared features (strike teams? )</li>
  <li>The development team was in an environment that would not allow risky feature prototype and development
    <ul>
      <li>Long pre-commit build pipeline throughput</li>
      <li>Thurow QA testing</li>
      <li>Fear of creating blockers</li>
    </ul>
  </li>
  <li>Vision
    <ul>
      <li><img src="assets/images/posts/pipeline-support-for-feature-branches/auto-integration.jpg" alt="slide: auto-integration" width="400" /></li>
      <li><img src="assets/images/posts/pipeline-support-for-feature-branches/small-team-development-vision.jpg" alt="slide: small team development vision" width="700" /></li>
      <li>QA had the option to use stabilization branch to shield from the auto integrations that were happening</li>
    </ul>
  </li>
  <li>Had 3 main challenges:
    <ul>
      <li><img src="assets/images/posts/pipeline-support-for-feature-branches/achieving-the-development-vision.jpg" alt="slide: achieving the development vision" width="700" />
        <ul>
          <li>Focused on semantically merge content to make the lives of content creators easier</li>
          <li>Focused on making a simple as possible to keep branches in-sync and stable (management tools)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Developers became accustomed to workflow build around having multiple branches per workspace
    <ul>
      <li>Because of the release cycles (having multiple features in progress)</li>
      <li>Expected to have immediate access to things that are mapped in the workspace</li>
    </ul>
  </li>
  <li>Source <a href="http://thetoolsmiths.org/codex/glossary/">DCC</a> assets in the same location as the game data
    <ul>
      <li>This made for build branches</li>
    </ul>
  </li>
  <li>Moving to a streamed depot was a risk that the dev team didn’t want to take
    <ul>
      <li>Compromise by adapting the current system to behave like Streams</li>
      <li>Had plans to move to Streams for next project</li>
    </ul>
  </li>
</ul>

<h2 id="scaling-the-infrastructure">Scaling the Infrastructure</h2>
<ul>
  <li>Needed to implement Centralized Branch Authority
    <ul>
      <li>Which was available as part P4 Stream</li>
      <li>Used the build farm DB to be the Branch Authority</li>
    </ul>
  </li>
  <li>Needed to implement a way to make the branches available on the build farm machines</li>
  <li>Asset pipeline changes
    <ul>
      <li>For details checkout Brandon Moro’s talk: <a href="https://www.gdcvault.com/play/1025430/Tools-Tutorial-Day-Bungie-s">GDC 2018 Tools Tutorial Day: Bungie’s Asset Pipeline: ‘Destiny 2’ and Beyond</a></li>
      <li>Need to enable the scaling of the Asset Cache
        <ul>
          <li>Used to be one/two machine(s) per branch</li>
          <li>Decoupled storage HW from the service HW</li>
          <li>The service was made stateless
            <ul>
              <li>So service could handle different branches</li>
              <li>The state management was moved into Redis</li>
              <li>Logging was moved into elasticsearch</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>To setup, branch used a lazy copy of that branch
    <ul>
      <li>The branch was 4 Tb</li>
      <li>On the backend use deduplication to not store the same data</li>
    </ul>
  </li>
</ul>

<h2 id="implementing-content-merging">Implementing Content Merging</h2>

<ul>
  <li>Propper game data merging
    <ul>
      <li>Needs to know the semantics of the data</li>
      <li>Used C# for the content merge tool (some screenshots <a href="https://www.gdcvault.com/play/1025992/Pipeline-Support-for-Feature-Branches">at min 40</a>)
        <ul>
          <li><img src="assets/images/posts/pipeline-support-for-feature-branches/content-merge-tool.jpg" alt="slide: content merge tool" width="400" /></li>
        </ul>
      </li>
      <li>Tracked auto-resolve\ conflict ratio</li>
      <li>Used TDD and recorded mergers that produced conflict to analyze</li>
    </ul>
  </li>
  <li><a href="https://www.gdcvault.com/play/1025992/Pipeline-Support-for-Feature-Branches">at min 31</a> notes on how to implement merging of game data</li>
  <li>Were able to reach 80% auto-conflict resolution rate</li>
</ul>

<h2 id="flow-of-changes">Flow of changes</h2>
<ul>
  <li>Created custom tool “Team Sync” to view of a users branch state
    <ul>
      <li><img src="assets/images/posts/pipeline-support-for-feature-branches/team-sync.jpg" alt="slide: Team Sync tool" width="400" /></li>
      <li>Shows
        <ul>
          <li>Check-ins</li>
          <li>Bugs</li>
          <li>Builds in progress/finished</li>
        </ul>
      </li>
      <li>For more info see <a href="https://www.gdcvault.com/browse/gdc-19/play/1025807">GDC 2019 Tools Tutorial Day: Tooling for Small Team Workflows</a></li>
    </ul>
  </li>
  <li>Had a special process for automatically integrating into the main branch
    <ul>
      <li>Via a build farm worker</li>
      <li>Had a special local conflict resolution workflow (when conflicts happened during an integration)</li>
      <li>After conflict resolution, automated testing would occur
        <ul>
          <li>If something was broken, the team had the ability to login to a remote worker and fix the issue
            <ul>
              <li>The worker would have all the dev tools ready</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>All in all, Pete says that this was a great investment for the dev team</li>
</ul>

<div style="background-color:#FFFF94;border-left: 18px solid #ffff48;padding-left: 50px;">
<p></p>
<p>These notes are just the main ideas of the talk. They don’t contain anecdotes and examples. If you want to learn more, I would advise watching the talk on the <a href="https://www.gdcvault.com/play/1025969/The-Future-of-Scene-Description">GDC Vault</a>.</p>
<p></p>
</div>

<h2 id="the-toolsmiths">The Toolsmiths</h2>
<p><img src="https://tools.engineer/assets/images/thetoolsmiths_cover_1000x2881.png" alt="The Toolsmiths logo" width="700" /></p>

<p>I took these notes as part of our little “Book Club” for GDC Vault Videos <a href="http://thetoolsmiths.org/vault_club">The Toolsmiths #vault club</a></p>

<p><strong>Pete Kugler</strong> is a member of the <a href="http://thetoolsmiths.org/">Toolsmiths</a> community. The Toolsmiths are a community of Game Tool Developers that are passionate about improving the way people make games.</p>

<p>Join us on <a href="http://thetoolsmiths.org/join_slack_team">Slack</a>.</p>

<p>Join us on <a href="https://twitter.com/thetoolsmiths">Twitter</a>.</p>

<h2 id="links">Links</h2>
<ul>
  <li><a href="https://www.gdcvault.com/play/1025992/Pipeline-Support-for-Feature-Branches">GDC 2019 Pipeline Support for Feature Branches in ‘Destiny’</a></li>
</ul>

<h2 id="related-blog-links">Related Blog Links</h2>
<ul>
  <li>Notes for <a href="https://tools.engineer//gdc2019-bungie-s-force-multipliers-production-engineers">GDC 2019 Bungie’s Force Multipliers: Production Engineers</a></li>
</ul>

<h2 id="related-talks">Related talks</h2>
<ul>
  <li>2016 talk by Pete Kugler - <a href="https://drive.google.com/file/d/1FeZGA-MeuI31Wan9ZVlXmSZ-JrSLgIL2/view?usp=sharing">GDC 2016 Developing a pipeline for managing game stability</a></li>
  <li><a href="https://www.gdcvault.com/browse/gdc-19/play/1025807">GDC 2019 Tools Tutorial Day: Tooling for Small Team Workflows</a></li>
  <li><a href="https://www.gdcvault.com/play/1025380/Tools-Tutorial-Day-Shipping-Call">GDC 2018 Tools Tutorial Day: Shipping ‘Call of Duty’</a></li>
  <li><a href="https://www.gdcvault.com/play/1025430/Tools-Tutorial-Day-Bungie-s">GDC 2018 Tools Tutorial Day: Bungie’s Asset Pipeline: ‘Destiny 2’ and Beyond</a></li>
  <li><a href="https://www.youtube.com/watch?v=7KXVox0-7lU">HandmadeCon 2016 - Asset Systems and Scalability</a></li>
  <li><a href="https://www.gdcvault.com/play/1025970/Bungie-s-Force-Multipliers-Production">GDC 2019 Bungie’s Force Multipliers: Production Engineers</a></li>
  <li><a href="https://www.gdcvault.com/browse/gdc-18/play/1025252/Teams-Are-Stronger-Than-Heroes">GDC 2018 Teams Are Stronger Than Heroes: Bungie Development Evolved</a></li>
  <li><a href="https://www.gdcvault.com/browse/gdc-18/play/1025116/Epic-Sync-Wrangling-the-Work">GDC 2018 Epic Sync: Wrangling the Work of Highly Interdependent Dev Teams at Bungie</a></li>
</ul>]]></content><author><name>Victor Stepanov</name></author><category term="GDC" /><category term="version_control" /><category term="game_data_merging" /><summary type="html"><![CDATA[TLDW Summary: How Bungie created an ecosystem of tools and workflows to allow small teams to quickly iterate on changes without worrying about breaking and blocking other teams. Keywords Game Data Merging Version Control System Branch Integration Intro Each P4 branch is about 4 Tb Up to 350 content creators, designers, and engineers working in one branch They use a pre-commit build pipeline - “the Gauntlet” Pete Kugler did a talk at GDC2016: Developing a pipeline for managing game stability Pipeline for managing game stability Describes the reason they put the pre-commit system in place They pick stability over iteration speed Had technical limitations of just simply adding more feature branches Not supported by tools More pressure on integration More pressure on build pipeline Couldn’t merge game data Definition “Feature Branch” - Branch created for teams to work in without interfering with the stability of the main branch Definition “Small Team” - group of cross-discipline developer working collaboratively on shared features (strike teams? ) The development team was in an environment that would not allow risky feature prototype and development Long pre-commit build pipeline throughput Thurow QA testing Fear of creating blockers Vision QA had the option to use stabilization branch to shield from the auto integrations that were happening Had 3 main challenges: Focused on semantically merge content to make the lives of content creators easier Focused on making a simple as possible to keep branches in-sync and stable (management tools) Developers became accustomed to workflow build around having multiple branches per workspace Because of the release cycles (having multiple features in progress) Expected to have immediate access to things that are mapped in the workspace Source DCC assets in the same location as the game data This made for build branches Moving to a streamed depot was a risk that the dev team didn’t want to take Compromise by adapting the current system to behave like Streams Had plans to move to Streams for next project Scaling the Infrastructure Needed to implement Centralized Branch Authority Which was available as part P4 Stream Used the build farm DB to be the Branch Authority Needed to implement a way to make the branches available on the build farm machines Asset pipeline changes For details checkout Brandon Moro’s talk: GDC 2018 Tools Tutorial Day: Bungie’s Asset Pipeline: ‘Destiny 2’ and Beyond Need to enable the scaling of the Asset Cache Used to be one/two machine(s) per branch Decoupled storage HW from the service HW The service was made stateless So service could handle different branches The state management was moved into Redis Logging was moved into elasticsearch To setup, branch used a lazy copy of that branch The branch was 4 Tb On the backend use deduplication to not store the same data Implementing Content Merging Propper game data merging Needs to know the semantics of the data Used C# for the content merge tool (some screenshots at min 40) Tracked auto-resolve\ conflict ratio Used TDD and recorded mergers that produced conflict to analyze at min 31 notes on how to implement merging of game data Were able to reach 80% auto-conflict resolution rate Flow of changes Created custom tool “Team Sync” to view of a users branch state Shows Check-ins Bugs Builds in progress/finished For more info see GDC 2019 Tools Tutorial Day: Tooling for Small Team Workflows Had a special process for automatically integrating into the main branch Via a build farm worker Had a special local conflict resolution workflow (when conflicts happened during an integration) After conflict resolution, automated testing would occur If something was broken, the team had the ability to login to a remote worker and fix the issue The worker would have all the dev tools ready All in all, Pete says that this was a great investment for the dev team These notes are just the main ideas of the talk. They don’t contain anecdotes and examples. If you want to learn more, I would advise watching the talk on the GDC Vault. The Toolsmiths I took these notes as part of our little “Book Club” for GDC Vault Videos The Toolsmiths #vault club Pete Kugler is a member of the Toolsmiths community. The Toolsmiths are a community of Game Tool Developers that are passionate about improving the way people make games. Join us on Slack. Join us on Twitter. Links GDC 2019 Pipeline Support for Feature Branches in ‘Destiny’ Related Blog Links Notes for GDC 2019 Bungie’s Force Multipliers: Production Engineers Related talks 2016 talk by Pete Kugler - GDC 2016 Developing a pipeline for managing game stability GDC 2019 Tools Tutorial Day: Tooling for Small Team Workflows GDC 2018 Tools Tutorial Day: Shipping ‘Call of Duty’ GDC 2018 Tools Tutorial Day: Bungie’s Asset Pipeline: ‘Destiny 2’ and Beyond HandmadeCon 2016 - Asset Systems and Scalability GDC 2019 Bungie’s Force Multipliers: Production Engineers GDC 2018 Teams Are Stronger Than Heroes: Bungie Development Evolved GDC 2018 Epic Sync: Wrangling the Work of Highly Interdependent Dev Teams at Bungie]]></summary></entry></feed>